export CG_BubbleTrail
code
proc CG_BubbleTrail 88 4
file "../../../../code/cgame/cg_effects.c"
line 15
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_effects.c -- these functions generate localentities, usually as a result
;4:// of event processing
;5:
;6:#include "cg_local.h"
;7:
;8:/*
;9:==================
;10:CG_BubbleTrail
;11:
;12:Bullets shot underwater
;13:==================
;14:*/
;15:void CG_BubbleTrail(const vec3_t start, const vec3_t end, float spacing) {
line 21
;16:	vec3_t move;
;17:	vec3_t vec;
;18:	float  len;
;19:	int    i;
;20:
;21:	if (cg_noProjectileTrail.integer) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $73
line 22
;22:		return;
ADDRGP4 $72
JUMPV
LABELV $73
line 25
;23:	}
;24:
;25:	VectorCopy(start, move);
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 26
;26:	VectorSubtract(end, start, vec);
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 27
;27:	len = VectorNormalize(vec);
ADDRLP4 12
ARGP4
ADDRLP4 40
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 40
INDIRF4
ASGNF4
line 30
;28:
;29:	// advance a random amount first
;30:	i = rand() % (int)spacing;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 44
INDIRI4
ADDRFP4 8
INDIRF4
CVFI4 4
MODI4
ASGNI4
line 31
;31:	VectorMA(move, i, vec, move);
ADDRLP4 48
ADDRLP4 24
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDRLP4 24
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 33
;32:
;33:	VectorScale(vec, spacing, vec);
ADDRLP4 52
ADDRFP4 8
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
line 35
;34:
;35:	for (; i < len; i += spacing) {
ADDRGP4 $91
JUMPV
LABELV $88
line 39
;36:		localEntity_t* le;
;37:		refEntity_t*   re;
;38:
;39:		le            = CG_AllocLocalEntity();
ADDRLP4 64
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 56
ADDRLP4 64
INDIRP4
ASGNP4
line 40
;40:		le->leFlags   = LEF_PUFF_DONT_SCALE;
ADDRLP4 56
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 41
;41:		le->leType    = LE_MOVE_SCALE_FADE;
ADDRLP4 56
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 42
;42:		le->startTime = cg.time;
ADDRLP4 56
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 43
;43:		le->endTime   = cg.time + 1000 + random() * 250;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
ADDI4
CVIF4 4
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1006240244
MULF4
ADDF4
CVFI4 4
ASGNI4
line 44
;44:		le->lifeRate  = 1.0 / (le->endTime - le->startTime);
ADDRLP4 56
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 56
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 56
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 46
;45:
;46:		re = &le->refEntity;
ADDRLP4 60
ADDRLP4 56
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 47
;47:		if (intShaderTime)
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $94
line 48
;48:			re->u.intShaderTime = cg.time;
ADDRLP4 60
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $95
JUMPV
LABELV $94
line 50
;49:		else
;50:			re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 60
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $95
line 52
;51:
;52:		re->reType        = RT_SPRITE;
ADDRLP4 60
INDIRP4
CNSTI4 2
ASGNI4
line 53
;53:		re->rotation      = 0;
ADDRLP4 60
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 0
ASGNF4
line 54
;54:		re->radius        = 3;
ADDRLP4 60
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1077936128
ASGNF4
line 55
;55:		re->customShader  = cgs.media.waterBubbleShader;
ADDRLP4 60
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148692+292
INDIRI4
ASGNI4
line 56
;56:		re->shaderRGBA[0] = 0xff;
ADDRLP4 60
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 57
;57:		re->shaderRGBA[1] = 0xff;
ADDRLP4 60
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 58
;58:		re->shaderRGBA[2] = 0xff;
ADDRLP4 60
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 59
;59:		re->shaderRGBA[3] = 0xff;
ADDRLP4 60
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 61
;60:
;61:		le->color[3] = 1.0;
ADDRLP4 56
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 63
;62:
;63:		le->pos.trType = TR_LINEAR;
ADDRLP4 56
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 64
;64:		le->pos.trTime = cg.time;
ADDRLP4 56
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 65
;65:		VectorCopy(move, le->pos.trBase);
ADDRLP4 56
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0
INDIRB
ASGNB 12
line 66
;66:		le->pos.trDelta[0] = crandom() * 5;
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1092616192
MULF4
ASGNF4
line 67
;67:		le->pos.trDelta[1] = crandom() * 5;
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1092616192
MULF4
ASGNF4
line 68
;68:		le->pos.trDelta[2] = crandom() * 5 + 6;
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1092616192
MULF4
CNSTF4 1086324736
ADDF4
ASGNF4
line 70
;69:
;70:		VectorAdd(move, vec, move);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDF4
ASGNF4
line 71
;71:	}
LABELV $89
line 35
ADDRLP4 24
ADDRLP4 24
INDIRI4
CVIF4 4
ADDRFP4 8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
LABELV $91
ADDRLP4 24
INDIRI4
CVIF4 4
ADDRLP4 28
INDIRF4
LTF4 $88
line 72
;72:}
LABELV $72
endproc CG_BubbleTrail 88 4
data
align 4
LABELV $108
byte 4 146
export CG_SmokePuff
code
proc CG_SmokePuff 52 4
line 83
;73:
;74:/*
;75:=====================
;76:CG_SmokePuff
;77:
;78:Adds a smoke puff or blood trail localEntity.
;79:=====================
;80:*/
;81:localEntity_t* CG_SmokePuff(
;82:	const vec3_t p, const vec3_t vel, float radius, float r, float g, float b, float a, float duration, int startTime, int fadeInTime, int leFlags,
;83:	qhandle_t hShader) {
line 89
;84:	static int     seed = 0x92;
;85:	localEntity_t* le;
;86:	refEntity_t*   re;
;87:	//	int fadeInTime = startTime + duration / 2;
;88:
;89:	le          = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 90
;90:	le->leFlags = leFlags;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 40
INDIRI4
ASGNI4
line 91
;91:	le->radius  = radius;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 93
;92:
;93:	re           = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 94
;94:	re->rotation = Q_random(&seed) * 360;
ADDRGP4 $108
ARGP4
ADDRLP4 12
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 12
INDIRF4
CNSTF4 1135869952
MULF4
ASGNF4
line 95
;95:	re->radius   = radius;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 97
;96:
;97:	if (intShaderTime)
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $109
line 98
;98:		re->u.intShaderTime = startTime;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
ADDRGP4 $110
JUMPV
LABELV $109
line 100
;99:	else
;100:		re->u.shaderTime = startTime / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRFP4 32
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $110
line 102
;101:
;102:	le->leType     = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 103
;103:	le->startTime  = startTime;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 104
;104:	le->fadeInTime = fadeInTime;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 36
INDIRI4
ASGNI4
line 105
;105:	le->endTime    = startTime + duration;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 32
INDIRI4
CVIF4 4
ADDRFP4 28
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 106
;106:	if (fadeInTime > startTime) {
ADDRFP4 36
INDIRI4
ADDRFP4 32
INDIRI4
LEI4 $111
line 107
;107:		le->lifeRate = 1.0 / (le->endTime - le->fadeInTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 108
;108:	} else {
ADDRGP4 $112
JUMPV
LABELV $111
line 109
;109:		le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 110
;110:	}
LABELV $112
line 111
;111:	le->color[0] = r;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 12
INDIRF4
ASGNF4
line 112
;112:	le->color[1] = g;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 113
;113:	le->color[2] = b;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 114
;114:	le->color[3] = a;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 116
;115:
;116:	le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 117
;117:	le->pos.trTime = startTime;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 118
;118:	VectorCopy(vel, le->pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 119
;119:	VectorCopy(p, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 121
;120:
;121:	VectorCopy(p, re->origin);
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 122
;122:	re->customShader = hShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 44
INDIRI4
ASGNI4
line 125
;123:
;124:	// rage pro can't alpha fade, so use a different shader
;125:	if (cgs.glconfig.hardwareType == GLHW_RAGEPRO) {
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
NEI4 $113
line 126
;126:		re->customShader  = cgs.media.smokePuffRageProShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148692+280
INDIRI4
ASGNI4
line 127
;127:		re->shaderRGBA[0] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 128
;128:		re->shaderRGBA[1] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 129
;129:		re->shaderRGBA[2] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 130
;130:		re->shaderRGBA[3] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 131
;131:	} else {
ADDRGP4 $114
JUMPV
LABELV $113
line 132
;132:		re->shaderRGBA[0] = le->color[0] * 0xff;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 24
CNSTF4 1325400064
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
LTF4 $120
ADDRLP4 16
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $121
JUMPV
LABELV $120
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $121
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 16
INDIRU4
CVUU1 4
ASGNU1
line 133
;133:		re->shaderRGBA[1] = le->color[1] * 0xff;
ADDRLP4 32
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $123
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $124
JUMPV
LABELV $123
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $124
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 134
;134:		re->shaderRGBA[2] = le->color[2] * 0xff;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $126
ADDRLP4 40
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $127
JUMPV
LABELV $126
ADDRLP4 40
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $127
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 40
INDIRU4
CVUU1 4
ASGNU1
line 135
;135:		re->shaderRGBA[3] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 136
;136:	}
LABELV $114
line 138
;137:
;138:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 139
;139:	re->radius = le->radius;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ASGNF4
line 141
;140:
;141:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $107
endproc CG_SmokePuff 52 4
export CG_SpawnEffect
proc CG_SpawnEffect 28 4
line 151
;142:}
;143:
;144:/*
;145:==================
;146:CG_SpawnEffect
;147:
;148:Player teleporting in or out
;149:==================
;150:*/
;151:void CG_SpawnEffect(const vec3_t origin) {
line 155
;152:	localEntity_t* le;
;153:	refEntity_t*   re;
;154:
;155:	le            = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 156
;156:	le->leFlags   = 0;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 157
;157:	le->leType    = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 6
ASGNI4
line 158
;158:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 159
;159:	le->endTime   = cg.time + 500;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 160
;160:	le->lifeRate  = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 162
;161:
;162:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
ADDRLP4 20
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 164
;163:
;164:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 166
;165:
;166:	re->reType = RT_MODEL;
ADDRLP4 4
INDIRP4
CNSTI4 0
ASGNI4
line 168
;167:
;168:	if (intShaderTime)
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $131
line 169
;169:		re->u.intShaderTime = cg.time;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $132
JUMPV
LABELV $131
line 171
;170:	else
;171:		re->u.shaderTime = cg.time / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $132
line 174
;172:
;173:#ifndef MISSIONPACK
;174:	re->customShader = cgs.media.teleportEffectShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+148692+472
INDIRI4
ASGNI4
line 176
;175:#endif
;176:	re->hModel = cgs.media.teleportEffectModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+148692+468
INDIRI4
ASGNI4
line 177
;177:	AxisClear(re->axis);
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 179
;178:
;179:	VectorCopy(origin, re->origin);
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 184
;180:
;181:#ifdef MISSIONPACK
;182:	re->origin[2] += 16;
;183:#else
;184:	re->origin[2] -= 24;
ADDRLP4 24
ADDRLP4 4
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1103101952
SUBF4
ASGNF4
line 186
;185:#endif
;186:}
LABELV $128
endproc CG_SpawnEffect 28 4
bss
align 4
LABELV $140
skip 12
export CG_ScorePlum
code
proc CG_ScorePlum 44 8
line 376
;187:
;188:#ifdef MISSIONPACK
;189:/*
;190:===============
;191:CG_LightningBoltBeam
;192:===============
;193:*/
;194:void CG_LightningBoltBeam(vec3_t start, vec3_t end) {
;195:	localEntity_t* le;
;196:	refEntity_t*   beam;
;197:
;198:	le            = CG_AllocLocalEntity();
;199:	le->leFlags   = 0;
;200:	le->leType    = LE_SHOWREFENTITY;
;201:	le->startTime = cg.time;
;202:	le->endTime   = cg.time + 50;
;203:
;204:	beam = &le->refEntity;
;205:
;206:	VectorCopy(start, beam->origin);
;207:	// this is the end point
;208:	VectorCopy(end, beam->oldorigin);
;209:
;210:	beam->reType       = RT_LIGHTNING;
;211:	beam->customShader = cgs.media.lightningShader;
;212:}
;213:
;214:/*
;215:==================
;216:CG_KamikazeEffect
;217:==================
;218:*/
;219:void CG_KamikazeEffect(vec3_t org) {
;220:	localEntity_t* le;
;221:	refEntity_t*   re;
;222:
;223:	le            = CG_AllocLocalEntity();
;224:	le->leFlags   = 0;
;225:	le->leType    = LE_KAMIKAZE;
;226:	le->startTime = cg.time;
;227:	le->endTime   = cg.time + 3000;  // 2250;
;228:	le->lifeRate  = 1.0 / (le->endTime - le->startTime);
;229:
;230:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
;231:
;232:	VectorClear(le->angles.trBase);
;233:
;234:	re = &le->refEntity;
;235:
;236:	re->reType = RT_MODEL;
;237:
;238:	if (intShaderTime)
;239:		re->intShaderTime = cg.time;
;240:	else
;241:		re->shaderTime = cg.time / 1000.0f;
;242:
;243:	re->hModel = cgs.media.kamikazeEffectModel;
;244:
;245:	VectorCopy(org, re->origin);
;246:}
;247:
;248:/*
;249:==================
;250:CG_ObeliskExplode
;251:==================
;252:*/
;253:void CG_ObeliskExplode(vec3_t org, int entityNum) {
;254:	localEntity_t* le;
;255:	vec3_t         origin;
;256:
;257:	// create an explosion
;258:	VectorCopy(org, origin);
;259:	origin[2] += 64;
;260:	le                = CG_MakeExplosion(origin, vec3_origin, cgs.media.dishFlashModel, cgs.media.rocketExplosionShader, 600, qtrue);
;261:	le->light         = 300;
;262:	le->lightColor[0] = 1;
;263:	le->lightColor[1] = 0.75;
;264:	le->lightColor[2] = 0.0;
;265:}
;266:
;267:/*
;268:==================
;269:CG_ObeliskPain
;270:==================
;271:*/
;272:void CG_ObeliskPain(vec3_t org) {
;273:	float       r;
;274:	sfxHandle_t sfx;
;275:
;276:	// hit sound
;277:	r = rand() & 3;
;278:	if (r < 2) {
;279:		sfx = cgs.media.obeliskHitSound1;
;280:	} else if (r == 2) {
;281:		sfx = cgs.media.obeliskHitSound2;
;282:	} else {
;283:		sfx = cgs.media.obeliskHitSound3;
;284:	}
;285:	trap_S_StartSound(org, ENTITYNUM_NONE, CHAN_BODY, sfx);
;286:}
;287:
;288:/*
;289:==================
;290:CG_InvulnerabilityImpact
;291:==================
;292:*/
;293:void CG_InvulnerabilityImpact(vec3_t org, vec3_t angles) {
;294:	localEntity_t* le;
;295:	refEntity_t*   re;
;296:	int            r;
;297:	sfxHandle_t    sfx;
;298:
;299:	le            = CG_AllocLocalEntity();
;300:	le->leFlags   = 0;
;301:	le->leType    = LE_INVULIMPACT;
;302:	le->startTime = cg.time;
;303:	le->endTime   = cg.time + 1000;
;304:	le->lifeRate  = 1.0 / (le->endTime - le->startTime);
;305:
;306:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
;307:
;308:	re = &le->refEntity;
;309:
;310:	re->reType = RT_MODEL;
;311:
;312:	if (intShaderTime)
;313:		re->u.intShaderTime = cg.time;
;314:	else
;315:		re->u.shaderTime = cg.time / 1000.0f;
;316:
;317:	re->hModel = cgs.media.invulnerabilityImpactModel;
;318:
;319:	VectorCopy(org, re->origin);
;320:	AnglesToAxis(angles, re->axis);
;321:
;322:	r = rand() & 3;
;323:	if (r < 2) {
;324:		sfx = cgs.media.invulnerabilityImpactSound1;
;325:	} else if (r == 2) {
;326:		sfx = cgs.media.invulnerabilityImpactSound2;
;327:	} else {
;328:		sfx = cgs.media.invulnerabilityImpactSound3;
;329:	}
;330:	trap_S_StartSound(org, ENTITYNUM_NONE, CHAN_BODY, sfx);
;331:}
;332:
;333:/*
;334:==================
;335:CG_InvulnerabilityJuiced
;336:==================
;337:*/
;338:void CG_InvulnerabilityJuiced(vec3_t org) {
;339:	localEntity_t* le;
;340:	refEntity_t*   re;
;341:	vec3_t         angles;
;342:
;343:	le            = CG_AllocLocalEntity();
;344:	le->leFlags   = 0;
;345:	le->leType    = LE_INVULJUICED;
;346:	le->startTime = cg.time;
;347:	le->endTime   = cg.time + 10000;
;348:	le->lifeRate  = 1.0 / (le->endTime - le->startTime);
;349:
;350:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
;351:
;352:	re = &le->refEntity;
;353:
;354:	re->reType = RT_MODEL;
;355:
;356:	if (intShaderTime)
;357:		re->u.intShaderTime = cg.time;
;358:	else
;359:		re->u.shaderTime = cg.time / 1000.0f;
;360:
;361:	re->hModel = cgs.media.invulnerabilityJuicedModel;
;362:
;363:	VectorCopy(org, re->origin);
;364:	VectorClear(angles);
;365:	AnglesToAxis(angles, re->axis);
;366:
;367:	trap_S_StartSound(org, ENTITYNUM_NONE, CHAN_BODY, cgs.media.invulnerabilityJuicedSound);
;368:}
;369:#endif
;370:
;371:/*
;372:==================
;373:CG_ScorePlum
;374:==================
;375:*/
;376:void CG_ScorePlum(int client, const vec3_t origin, int score) {
line 383
;377:	localEntity_t* le;
;378:	refEntity_t*   re;
;379:	vec3_t         angles;
;380:	static vec3_t  lastPos;
;381:
;382:	// only visualize for the client that scored
;383:	if (client != cg.predictedPlayerState.clientNum || cg_scorePlum.integer == 0) {
ADDRFP4 0
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
NEI4 $146
ADDRGP4 cg_scorePlum+12
INDIRI4
CNSTI4 0
NEI4 $141
LABELV $146
line 384
;384:		return;
ADDRGP4 $139
JUMPV
LABELV $141
line 387
;385:	}
;386:
;387:	le            = CG_AllocLocalEntity();
ADDRLP4 20
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 388
;388:	le->leFlags   = 0;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 389
;389:	le->leType    = LE_SCOREPLUM;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 8
ASGNI4
line 390
;390:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 391
;391:	le->endTime   = cg.time + 4000;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 4000
ADDI4
ASGNI4
line 392
;392:	le->lifeRate  = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 394
;393:
;394:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
ADDRLP4 32
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
line 395
;395:	le->radius                                                = score;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 397
;396:
;397:	VectorCopy(origin, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 398
;398:	if (origin[2] >= lastPos[2] - 20 && origin[2] <= lastPos[2] + 20) {
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 $140+8
INDIRF4
CNSTF4 1101004800
SUBF4
LTF4 $149
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 $140+8
INDIRF4
CNSTF4 1101004800
ADDF4
GTF4 $149
line 399
;399:		le->pos.trBase[2] -= 20;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
CNSTF4 1101004800
SUBF4
ASGNF4
line 400
;400:	}
LABELV $149
line 403
;401:
;402:	// CG_Printf( "Plum origin %i %i %i -- %i\n", (int)org[0], (int)org[1], (int)org[2], (int)Distance(org, lastPos));
;403:	VectorCopy(origin, lastPos);
ADDRGP4 $140
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 405
;404:
;405:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 407
;406:
;407:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 408
;408:	re->radius = 16;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1098907648
ASGNF4
line 410
;409:
;410:	VectorClear(angles);
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 8+4
CNSTF4 0
ASGNF4
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 411
;411:	AnglesToAxis(angles, re->axis);
ADDRLP4 8
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 412
;412:}
LABELV $139
endproc CG_ScorePlum 44 8
export CG_MakeExplosion
proc CG_MakeExplosion 64 8
line 419
;413:
;414:/*
;415:====================
;416:CG_MakeExplosion
;417:====================
;418:*/
;419:localEntity_t* CG_MakeExplosion(const vec3_t origin, const vec3_t dir, qhandle_t hModel, qhandle_t shader, int msec, qboolean isSprite) {
line 425
;420:	float          ang;
;421:	localEntity_t* ex;
;422:	int            offset;
;423:	vec3_t         tmpVec, newOrigin;
;424:
;425:	if (msec <= 0) {
ADDRFP4 16
INDIRI4
CNSTI4 0
GTI4 $156
line 426
;426:		CG_Error("CG_MakeExplosion: msec = %i", msec);
ADDRGP4 $158
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 427
;427:	}
LABELV $156
line 430
;428:
;429:	// skew the time a bit so they aren't all in sync
;430:	offset = rand() & 63;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 36
INDIRI4
CNSTI4 63
BANDI4
ASGNI4
line 432
;431:
;432:	ex = CG_AllocLocalEntity();
ADDRLP4 40
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
line 433
;433:	if (isSprite) {
ADDRFP4 20
INDIRI4
CNSTI4 0
EQI4 $159
line 434
;434:		ex->leType = LE_SPRITE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 2
ASGNI4
line 437
;435:
;436:		// randomly rotate sprite orientation
;437:		ex->refEntity.rotation = rand() % 360;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 438
;438:		VectorScale(dir, 16, tmpVec);
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 48
INDIRP4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
ADDRLP4 16+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
line 439
;439:		VectorAdd(tmpVec, origin, newOrigin);
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRF4
ADDRLP4 52
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 16+4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 16+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 440
;440:	} else {
ADDRGP4 $160
JUMPV
LABELV $159
line 441
;441:		ex->leType = LE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 1
ASGNI4
line 442
;442:		VectorCopy(origin, newOrigin);
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 445
;443:
;444:		// set axis with random rotate
;445:		if (!dir) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $167
line 446
;446:			AxisClear(ex->refEntity.axis);
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 447
;447:		} else {
ADDRGP4 $168
JUMPV
LABELV $167
line 448
;448:			ang = rand() % 360;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 44
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 449
;449:			VectorCopy(dir, ex->refEntity.axis[0]);
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 450
;450:			RotateAroundDirection(ex->refEntity.axis, ang);
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ARGP4
ADDRLP4 32
INDIRF4
ARGF4
ADDRGP4 RotateAroundDirection
CALLV
pop
line 451
;451:		}
LABELV $168
line 452
;452:	}
LABELV $160
line 454
;453:
;454:	ex->startTime = cg.time - offset;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
ASGNI4
line 455
;455:	ex->endTime   = ex->startTime + msec;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRFP4 16
INDIRI4
ADDI4
ASGNI4
line 458
;456:
;457:	// bias the time so all shader effects start correctly
;458:	if (intShaderTime)
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $170
line 459
;459:		ex->refEntity.u.intShaderTime = ex->startTime;
ADDRLP4 0
INDIRP4
CNSTI4 280
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $171
JUMPV
LABELV $170
line 461
;460:	else
;461:		ex->refEntity.u.shaderTime = ex->startTime / 1000.0f;
ADDRLP4 0
INDIRP4
CNSTI4 280
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
LABELV $171
line 463
;462:
;463:	ex->refEntity.hModel       = hModel;
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 464
;464:	ex->refEntity.customShader = shader;
ADDRLP4 0
INDIRP4
CNSTI4 264
ADDP4
ADDRFP4 12
INDIRI4
ASGNI4
line 467
;465:
;466:	// set origin
;467:	VectorCopy(newOrigin, ex->refEntity.origin);
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 468
;468:	VectorCopy(newOrigin, ex->refEntity.oldorigin);
ADDRLP4 0
INDIRP4
CNSTI4 236
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 470
;469:
;470:	ex->color[0] = ex->color[1] = ex->color[2] = 1.0;
ADDRLP4 60
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 60
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 60
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 60
INDIRF4
ASGNF4
line 472
;471:
;472:	return ex;
ADDRLP4 0
INDIRP4
RETP4
LABELV $155
endproc CG_MakeExplosion 64 8
export CG_Bleed
proc CG_Bleed 20 0
line 482
;473:}
;474:
;475:/*
;476:=================
;477:CG_Bleed
;478:
;479:This is the spurt of blood when a character gets hit
;480:=================
;481:*/
;482:void CG_Bleed(const vec3_t origin, int entityNum) {
line 485
;483:	localEntity_t* ex;
;484:
;485:	if (!cg_blood.integer) {
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $173
line 486
;486:		return;
ADDRGP4 $172
JUMPV
LABELV $173
line 489
;487:	}
;488:
;489:	ex         = CG_AllocLocalEntity();
ADDRLP4 4
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 490
;490:	ex->leType = LE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 1
ASGNI4
line 492
;491:
;492:	ex->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 493
;493:	ex->endTime   = ex->startTime + 500;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 495
;494:
;495:	VectorCopy(origin, ex->refEntity.origin);
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 496
;496:	ex->refEntity.reType   = RT_SPRITE;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 2
ASGNI4
line 497
;497:	ex->refEntity.rotation = rand() % 360;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 498
;498:	ex->refEntity.radius   = 24;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTF4 1103101952
ASGNF4
line 500
;499:
;500:	ex->refEntity.customShader = cgs.media.bloodExplosionShader;
ADDRLP4 0
INDIRP4
CNSTI4 264
ADDP4
ADDRGP4 cgs+148692+464
INDIRI4
ASGNI4
line 503
;501:
;502:	// don't show player's own blood in view
;503:	if (entityNum == cg.snap->ps.clientNum) {
ADDRFP4 4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $179
line 504
;504:		ex->refEntity.renderfx |= RF_THIRD_PERSON;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 505
;505:	}
LABELV $179
line 506
;506:}
LABELV $172
endproc CG_Bleed 20 0
proc CG_LaunchGib 20 8
line 513
;507:
;508:/*
;509:==================
;510:CG_LaunchGib
;511:==================
;512:*/
;513:static void CG_LaunchGib(const vec3_t origin, const vec3_t velocity, qhandle_t hModel) {
line 517
;514:	localEntity_t* le;
;515:	refEntity_t*   re;
;516:
;517:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 518
;518:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 520
;519:
;520:	le->leType    = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 521
;521:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 522
;522:	le->endTime   = le->startTime + 5000 + random() * 3000;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 5000
ADDI4
CVIF4 4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1035698551
MULF4
ADDF4
CVFI4 4
ASGNI4
line 524
;523:
;524:	VectorCopy(origin, re->origin);
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 525
;525:	AxisCopy(axisDefault, re->axis);
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 526
;526:	re->hModel = hModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 528
;527:
;528:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 529
;529:	VectorCopy(origin, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 530
;530:	VectorCopy(velocity, le->pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 531
;531:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 533
;532:
;533:	le->bounceFactor = 0.6f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1058642330
ASGNF4
line 535
;534:
;535:	le->leBounceSoundType = LEBS_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 1
ASGNI4
line 536
;536:	le->leMarkType        = LEMT_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 2
ASGNI4
line 537
;537:}
LABELV $182
endproc CG_LaunchGib 20 8
export CG_GibPlayer
proc CG_GibPlayer 148 12
line 548
;538:
;539:/*
;540:===================
;541:CG_GibPlayer
;542:
;543:Generated a bunch of gibs launching out from the bodies location
;544:===================
;545:*/
;546:#define GIB_VELOCITY 250
;547:#define GIB_JUMP     250
;548:void CG_GibPlayer(const vec3_t playerOrigin) {
line 551
;549:	vec3_t origin, velocity;
;550:
;551:	if (!cg_blood.integer) {
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $186
line 552
;552:		return;
ADDRGP4 $185
JUMPV
LABELV $186
line 555
;553:	}
;554:
;555:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 556
;556:	velocity[0] = crandom() * GIB_VELOCITY;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 557
;557:	velocity[1] = crandom() * GIB_VELOCITY;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 558
;558:	velocity[2] = GIB_JUMP + crandom() * GIB_VELOCITY;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 559
;559:	if (rand() & 1) {
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $191
line 560
;560:		CG_LaunchGib(origin, velocity, cgs.media.gibSkull);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+168
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 561
;561:	} else {
ADDRGP4 $192
JUMPV
LABELV $191
line 562
;562:		CG_LaunchGib(origin, velocity, cgs.media.gibBrain);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+172
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 563
;563:	}
LABELV $192
line 566
;564:
;565:	// allow gibs to be turned off for speed
;566:	if (!cg_gibs.integer) {
ADDRGP4 cg_gibs+12
INDIRI4
CNSTI4 0
NEI4 $197
line 567
;567:		return;
ADDRGP4 $185
JUMPV
LABELV $197
line 570
;568:	}
;569:
;570:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 571
;571:	velocity[0] = crandom() * GIB_VELOCITY;
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 572
;572:	velocity[1] = crandom() * GIB_VELOCITY;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 573
;573:	velocity[2] = GIB_JUMP + crandom() * GIB_VELOCITY;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 574
;574:	CG_LaunchGib(origin, velocity, cgs.media.gibAbdomen);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+136
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 576
;575:
;576:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 577
;577:	velocity[0] = crandom() * GIB_VELOCITY;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 578
;578:	velocity[1] = crandom() * GIB_VELOCITY;
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 579
;579:	velocity[2] = GIB_JUMP + crandom() * GIB_VELOCITY;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 580
;580:	CG_LaunchGib(origin, velocity, cgs.media.gibArm);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+140
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 582
;581:
;582:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 583
;583:	velocity[0] = crandom() * GIB_VELOCITY;
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 584
;584:	velocity[1] = crandom() * GIB_VELOCITY;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 585
;585:	velocity[2] = GIB_JUMP + crandom() * GIB_VELOCITY;
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 586
;586:	CG_LaunchGib(origin, velocity, cgs.media.gibChest);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+144
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 588
;587:
;588:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 589
;589:	velocity[0] = crandom() * GIB_VELOCITY;
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 590
;590:	velocity[1] = crandom() * GIB_VELOCITY;
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 591
;591:	velocity[2] = GIB_JUMP + crandom() * GIB_VELOCITY;
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 592
;592:	CG_LaunchGib(origin, velocity, cgs.media.gibFist);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+148
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 594
;593:
;594:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 595
;595:	velocity[0] = crandom() * GIB_VELOCITY;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 596
;596:	velocity[1] = crandom() * GIB_VELOCITY;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 597
;597:	velocity[2] = GIB_JUMP + crandom() * GIB_VELOCITY;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 598
;598:	CG_LaunchGib(origin, velocity, cgs.media.gibFoot);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+152
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 600
;599:
;600:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 601
;601:	velocity[0] = crandom() * GIB_VELOCITY;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 602
;602:	velocity[1] = crandom() * GIB_VELOCITY;
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 603
;603:	velocity[2] = GIB_JUMP + crandom() * GIB_VELOCITY;
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 604
;604:	CG_LaunchGib(origin, velocity, cgs.media.gibForearm);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+156
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 606
;605:
;606:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 607
;607:	velocity[0] = crandom() * GIB_VELOCITY;
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 608
;608:	velocity[1] = crandom() * GIB_VELOCITY;
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 609
;609:	velocity[2] = GIB_JUMP + crandom() * GIB_VELOCITY;
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 610
;610:	CG_LaunchGib(origin, velocity, cgs.media.gibIntestine);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+160
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 612
;611:
;612:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 613
;613:	velocity[0] = crandom() * GIB_VELOCITY;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 614
;614:	velocity[1] = crandom() * GIB_VELOCITY;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 615
;615:	velocity[2] = GIB_JUMP + crandom() * GIB_VELOCITY;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 616
;616:	CG_LaunchGib(origin, velocity, cgs.media.gibLeg);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+164
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 618
;617:
;618:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 619
;619:	velocity[0] = crandom() * GIB_VELOCITY;
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 620
;620:	velocity[1] = crandom() * GIB_VELOCITY;
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 621
;621:	velocity[2] = GIB_JUMP + crandom() * GIB_VELOCITY;
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 622
;622:	CG_LaunchGib(origin, velocity, cgs.media.gibLeg);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+164
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 623
;623:}
LABELV $185
endproc CG_GibPlayer 148 12
export CG_LaunchExplode
proc CG_LaunchExplode 20 8
line 630
;624:
;625:/*
;626:==================
;627:CG_LaunchExplode
;628:==================
;629:*/
;630:void CG_LaunchExplode(vec3_t origin, vec3_t velocity, qhandle_t hModel) {
line 634
;631:	localEntity_t* le;
;632:	refEntity_t*   re;
;633:
;634:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 635
;635:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 637
;636:
;637:	le->leType    = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 638
;638:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 639
;639:	le->endTime   = le->startTime + 10000 + random() * 6000;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 10000
ADDI4
CVIF4 4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1044087159
MULF4
ADDF4
CVFI4 4
ASGNI4
line 641
;640:
;641:	VectorCopy(origin, re->origin);
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 642
;642:	AxisCopy(axisDefault, re->axis);
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 643
;643:	re->hModel = hModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 645
;644:
;645:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 646
;646:	VectorCopy(origin, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 647
;647:	VectorCopy(velocity, le->pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 648
;648:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 650
;649:
;650:	le->bounceFactor = 0.1f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1036831949
ASGNF4
line 652
;651:
;652:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 653
;653:	le->leMarkType        = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 654
;654:}
LABELV $236
endproc CG_LaunchExplode 20 8
export CG_BigExplode
proc CG_BigExplode 84 12
line 665
;655:
;656:#define EXP_VELOCITY 100
;657:#define EXP_JUMP     150
;658:/*
;659:===================
;660:CG_BigExplode
;661:
;662:Generated a bunch of gibs launching out from the bodies location
;663:===================
;664:*/
;665:void CG_BigExplode(vec3_t playerOrigin) {
line 668
;666:	vec3_t origin, velocity;
;667:
;668:	if (!cg_blood.integer) {
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $240
line 669
;669:		return;
ADDRGP4 $239
JUMPV
LABELV $240
line 672
;670:	}
;671:
;672:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 673
;673:	velocity[0] = crandom() * EXP_VELOCITY;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
ASGNF4
line 674
;674:	velocity[1] = crandom() * EXP_VELOCITY;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
ASGNF4
line 675
;675:	velocity[2] = EXP_JUMP + crandom() * EXP_VELOCITY;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 676
;676:	CG_LaunchExplode(origin, velocity, cgs.media.smoke2);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+176
INDIRI4
ARGI4
ADDRGP4 CG_LaunchExplode
CALLV
pop
line 678
;677:
;678:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 679
;679:	velocity[0] = crandom() * EXP_VELOCITY;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
ASGNF4
line 680
;680:	velocity[1] = crandom() * EXP_VELOCITY;
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
ASGNF4
line 681
;681:	velocity[2] = EXP_JUMP + crandom() * EXP_VELOCITY;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 682
;682:	CG_LaunchExplode(origin, velocity, cgs.media.smoke2);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+176
INDIRI4
ARGI4
ADDRGP4 CG_LaunchExplode
CALLV
pop
line 684
;683:
;684:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 685
;685:	velocity[0] = crandom() * EXP_VELOCITY * 1.5;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1133903872
MULF4
ASGNF4
line 686
;686:	velocity[1] = crandom() * EXP_VELOCITY * 1.5;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1133903872
MULF4
ASGNF4
line 687
;687:	velocity[2] = EXP_JUMP + crandom() * EXP_VELOCITY;
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 688
;688:	CG_LaunchExplode(origin, velocity, cgs.media.smoke2);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+176
INDIRI4
ARGI4
ADDRGP4 CG_LaunchExplode
CALLV
pop
line 690
;689:
;690:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 691
;691:	velocity[0] = crandom() * EXP_VELOCITY * 2.0;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1137180672
MULF4
ASGNF4
line 692
;692:	velocity[1] = crandom() * EXP_VELOCITY * 2.0;
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1137180672
MULF4
ASGNF4
line 693
;693:	velocity[2] = EXP_JUMP + crandom() * EXP_VELOCITY;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 694
;694:	CG_LaunchExplode(origin, velocity, cgs.media.smoke2);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+176
INDIRI4
ARGI4
ADDRGP4 CG_LaunchExplode
CALLV
pop
line 696
;695:
;696:	VectorCopy(playerOrigin, origin);
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 697
;697:	velocity[0] = crandom() * EXP_VELOCITY * 2.5;
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 698
;698:	velocity[1] = crandom() * EXP_VELOCITY * 2.5;
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 699
;699:	velocity[2] = EXP_JUMP + crandom() * EXP_VELOCITY;
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 700
;700:	CG_LaunchExplode(origin, velocity, cgs.media.smoke2);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+148692+176
INDIRI4
ARGI4
ADDRGP4 CG_LaunchExplode
CALLV
pop
line 701
;701:}
LABELV $239
endproc CG_BigExplode 84 12
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import phy_movetype
import cg_timerBest_y
import cg_timerBest_x
import cg_timerActive_y
import cg_timerActive_x
import cg_timerSkim_y
import cg_timerSkim_x
import cg_speed_y
import cg_speed_x
import cg_followKiller
import cg_fovAdjust
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import cg_smoothClients
import cg_scorePlum
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_drawSpeed
import cg_drawAttacker
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailRadius
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_drawWeaponSelect
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import VectorMAM
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $158
byte 1 67
byte 1 71
byte 1 95
byte 1 77
byte 1 97
byte 1 107
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 109
byte 1 115
byte 1 101
byte 1 99
byte 1 32
byte 1 61
byte 1 32
byte 1 37
byte 1 105
byte 1 0
