export G_TestEntityPosition
code
proc G_TestEntityPosition 64 28
file "../../../../code/game/g_mover.c"
line 28
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:
;4:#include "g_local.h"
;5:
;6:/*
;7:===============================================================================
;8:
;9:PUSHMOVE
;10:
;11:===============================================================================
;12:*/
;13:
;14:typedef struct {
;15:	gentity_t* ent;
;16:	vec3_t     origin;
;17:	vec3_t     angles;
;18:	float      deltayaw;
;19:} pushed_t;
;20:pushed_t pushed[MAX_GENTITIES], *pushed_p;
;21:
;22:/*
;23:============
;24:G_TestEntityPosition
;25:
;26:============
;27:*/
;28:gentity_t* G_TestEntityPosition(gentity_t* ent) {
line 32
;29:	trace_t tr;
;30:	int     mask;
;31:
;32:	if (ent->clipmask) {
ADDRFP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
CNSTI4 0
EQI4 $56
line 33
;33:		mask = ent->clipmask;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
ASGNI4
line 34
;34:	} else {
ADDRGP4 $57
JUMPV
LABELV $56
line 35
;35:		mask = MASK_SOLID;
ADDRLP4 56
CNSTI4 1
ASGNI4
line 36
;36:	}
LABELV $57
line 37
;37:	if (ent->client) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $58
line 38
;38:		trap_Trace(&tr, ent->client->ps.origin, ent->r.mins, ent->r.maxs, ent->client->ps.origin, ent->s.number, mask);
ADDRLP4 0
ARGP4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
INDIRI4
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 39
;39:	} else {
ADDRGP4 $59
JUMPV
LABELV $58
line 40
;40:		trap_Trace(&tr, ent->s.pos.trBase, ent->r.mins, ent->r.maxs, ent->s.pos.trBase, ent->s.number, mask);
ADDRLP4 0
ARGP4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
INDIRI4
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 41
;41:	}
LABELV $59
line 43
;42:
;43:	if (tr.startsolid)
ADDRLP4 0+4
INDIRI4
CNSTI4 0
EQI4 $60
line 44
;44:		return &g_entities[tr.entityNum];
ADDRLP4 0+52
INDIRI4
CNSTI4 816
MULI4
ADDRGP4 g_entities
ADDP4
RETP4
ADDRGP4 $55
JUMPV
LABELV $60
line 46
;45:
;46:	return NULL;
CNSTP4 0
RETP4
LABELV $55
endproc G_TestEntityPosition 64 28
export G_CreateRotationMatrix
proc G_CreateRotationMatrix 4 16
line 54
;47:}
;48:
;49:/*
;50:================
;51:G_CreateRotationMatrix
;52:================
;53:*/
;54:void G_CreateRotationMatrix(vec3_t angles, vec3_t matrix[3]) {
line 55
;55:	AngleVectors(angles, matrix[0], matrix[1], matrix[2]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 56
;56:	VectorInverse(matrix[1]);
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 VectorInverse
CALLV
pop
line 57
;57:}
LABELV $64
endproc G_CreateRotationMatrix 4 16
export G_TransposeMatrix
proc G_TransposeMatrix 16 0
line 64
;58:
;59:/*
;60:================
;61:G_TransposeMatrix
;62:================
;63:*/
;64:void G_TransposeMatrix(vec3_t matrix[3], vec3_t transpose[3]) {
line 66
;65:	int i, j;
;66:	for (i = 0; i < 3; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $66
line 67
;67:		for (j = 0; j < 3; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $70
line 68
;68:			transpose[i][j] = matrix[j][i];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
ADDP4
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 0
INDIRP4
ADDP4
ADDP4
INDIRF4
ASGNF4
line 69
;69:		}
LABELV $71
line 67
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $70
line 70
;70:	}
LABELV $67
line 66
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $66
line 71
;71:}
LABELV $65
endproc G_TransposeMatrix 16 0
export G_RotatePoint
proc G_RotatePoint 24 0
line 78
;72:
;73:/*
;74:================
;75:G_RotatePoint
;76:================
;77:*/
;78:void G_RotatePoint(vec3_t point, vec3_t matrix[3]) {
line 81
;79:	vec3_t tvec;
;80:
;81:	VectorCopy(point, tvec);
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 82
;82:	point[0] = DotProduct(matrix[0], tvec);
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 0
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 83
;83:	point[1] = DotProduct(matrix[1], tvec);
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 84
;84:	point[2] = DotProduct(matrix[2], tvec);
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 85
;85:}
LABELV $74
endproc G_RotatePoint 24 0
export G_TryPushingEntity
proc G_TryPushingEntity 172 8
line 94
;86:
;87:/*
;88:==================
;89:G_TryPushingEntity
;90:
;91:Returns qfalse if the move is blocked
;92:==================
;93:*/
;94:qboolean G_TryPushingEntity(gentity_t* check, gentity_t* pusher, vec3_t move, vec3_t amove) {
line 101
;95:	vec3_t     matrix[3], transpose[3];
;96:	vec3_t     org, org2, move2;
;97:	gentity_t* block;
;98:
;99:	// EF_MOVER_STOP will just stop when contacting another entity
;100:	// instead of pushing it, but entities can still ride on top of it
;101:	if ((pusher->s.eFlags & EF_MOVER_STOP) && check->s.groundEntityNum != pusher->s.number) {
ADDRLP4 112
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $82
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ADDRLP4 112
INDIRP4
INDIRI4
EQI4 $82
line 102
;102:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $81
JUMPV
LABELV $82
line 106
;103:	}
;104:
;105:	// save off the old position
;106:	if (pushed_p > &pushed[MAX_GENTITIES]) {
ADDRGP4 pushed_p
INDIRP4
CVPU4 4
ADDRGP4 pushed+32768
CVPU4 4
LEU4 $84
line 107
;107:		G_Error("pushed_p > &pushed[MAX_GENTITIES]");
ADDRGP4 $87
ARGP4
ADDRGP4 G_Error
CALLV
pop
line 108
;108:	}
LABELV $84
line 109
;109:	pushed_p->ent = check;
ADDRGP4 pushed_p
INDIRP4
ADDRFP4 0
INDIRP4
ASGNP4
line 110
;110:	VectorCopy(check->s.pos.trBase, pushed_p->origin);
ADDRGP4 pushed_p
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 111
;111:	VectorCopy(check->s.apos.trBase, pushed_p->angles);
ADDRGP4 pushed_p
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRB
ASGNB 12
line 112
;112:	if (check->client) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $88
line 113
;113:		pushed_p->deltayaw = check->client->ps.delta_angles[YAW];
ADDRGP4 pushed_p
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 114
;114:		VectorCopy(check->client->ps.origin, pushed_p->origin);
ADDRGP4 pushed_p
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 115
;115:	}
LABELV $88
line 116
;116:	pushed_p++;
ADDRLP4 116
ADDRGP4 pushed_p
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
line 120
;117:
;118:	// try moving the contacted entity
;119:	// figure movement due to the pusher's amove
;120:	G_CreateRotationMatrix(amove, transpose);
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 76
ARGP4
ADDRGP4 G_CreateRotationMatrix
CALLV
pop
line 121
;121:	G_TransposeMatrix(transpose, matrix);
ADDRLP4 76
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 G_TransposeMatrix
CALLV
pop
line 122
;122:	if (check->client) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $90
line 123
;123:		VectorSubtract(check->client->ps.origin, pusher->r.currentOrigin, org);
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 124
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 120
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 124
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 120
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 124
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 124
;124:	} else {
ADDRGP4 $91
JUMPV
LABELV $90
line 125
;125:		VectorSubtract(check->s.pos.trBase, pusher->r.currentOrigin, org);
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 124
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 120
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 124
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 120
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 124
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 126
;126:	}
LABELV $91
line 127
;127:	VectorCopy(org, org2);
ADDRLP4 24
ADDRLP4 12
INDIRB
ASGNB 12
line 128
;128:	G_RotatePoint(org2, matrix);
ADDRLP4 24
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 G_RotatePoint
CALLV
pop
line 129
;129:	VectorSubtract(org2, org, move2);
ADDRLP4 0
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24+4
INDIRF4
ADDRLP4 12+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 24+8
INDIRF4
ADDRLP4 12+8
INDIRF4
SUBF4
ASGNF4
line 131
;130:	// add movement
;131:	VectorAdd(check->s.pos.trBase, move, check->s.pos.trBase);
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 120
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 124
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 124
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 128
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 132
;132:	VectorAdd(check->s.pos.trBase, move2, check->s.pos.trBase);
ADDRLP4 132
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 132
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 136
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 136
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 140
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 133
;133:	if (check->client) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $104
line 134
;134:		VectorAdd(check->client->ps.origin, move, check->client->ps.origin);
ADDRLP4 144
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 144
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 144
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 148
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 152
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 152
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 135
;135:		VectorAdd(check->client->ps.origin, move2, check->client->ps.origin);
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 156
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 156
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 160
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 160
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 164
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 164
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 137
;136:		// make sure the client's view rotates when on a rotating mover
;137:		check->client->ps.delta_angles[YAW] += ANGLE2SHORT(amove[YAW]);
ADDRLP4 168
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 168
INDIRP4
ADDRLP4 168
INDIRP4
INDIRI4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1127615329
MULF4
CVFI4 4
CNSTI4 65535
BANDI4
ADDI4
ASGNI4
line 138
;138:	}
LABELV $104
line 141
;139:
;140:	// may have pushed them off an edge
;141:	if (check->s.groundEntityNum != pusher->s.number) {
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ADDRFP4 4
INDIRP4
INDIRI4
EQI4 $108
line 142
;142:		check->s.groundEntityNum = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 1023
ASGNI4
line 143
;143:	}
LABELV $108
line 145
;144:
;145:	block = G_TestEntityPosition(check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 144
ADDRGP4 G_TestEntityPosition
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 144
INDIRP4
ASGNP4
line 146
;146:	if (!block) {
ADDRLP4 36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $110
line 148
;147:		// pushed ok
;148:		if (check->client) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $112
line 149
;149:			VectorCopy(check->client->ps.origin, check->r.currentOrigin);
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 148
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 150
;150:		} else {
ADDRGP4 $113
JUMPV
LABELV $112
line 151
;151:			VectorCopy(check->s.pos.trBase, check->r.currentOrigin);
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 148
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 152
;152:		}
LABELV $113
line 153
;153:		trap_LinkEntity(check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 154
;154:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $81
JUMPV
LABELV $110
line 160
;155:	}
;156:
;157:	// if it is ok to leave in the old position, do it
;158:	// this is only relevent for riding entities, not pushed
;159:	// Sliding trapdoors can cause this.
;160:	VectorCopy((pushed_p - 1)->origin, check->s.pos.trBase);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -28
ADDP4
INDIRB
ASGNB 12
line 161
;161:	if (check->client) {
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $114
line 162
;162:		VectorCopy((pushed_p - 1)->origin, check->client->ps.origin);
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -28
ADDP4
INDIRB
ASGNB 12
line 163
;163:	}
LABELV $114
line 164
;164:	VectorCopy((pushed_p - 1)->angles, check->s.apos.trBase);
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -16
ADDP4
INDIRB
ASGNB 12
line 165
;165:	block = G_TestEntityPosition(check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 148
ADDRGP4 G_TestEntityPosition
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 148
INDIRP4
ASGNP4
line 166
;166:	if (!block) {
ADDRLP4 36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $116
line 167
;167:		check->s.groundEntityNum = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 1023
ASGNI4
line 168
;168:		pushed_p--;
ADDRLP4 152
ADDRGP4 pushed_p
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRP4
CNSTI4 -32
ADDP4
ASGNP4
line 169
;169:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $81
JUMPV
LABELV $116
line 173
;170:	}
;171:
;172:	// blocked
;173:	return qfalse;
CNSTI4 0
RETI4
LABELV $81
endproc G_TryPushingEntity 172 8
export G_CheckProxMinePosition
proc G_CheckProxMinePosition 96 28
line 181
;174:}
;175:
;176:/*
;177:==================
;178:G_CheckProxMinePosition
;179:==================
;180:*/
;181:qboolean G_CheckProxMinePosition(gentity_t* check) {
line 185
;182:	vec3_t  start, end;
;183:	trace_t tr;
;184:
;185:	VectorMA(check->s.pos.trBase, 0.125, check->movedir, start);
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 80
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
CNSTF4 1040187392
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 80
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
CNSTF4 1040187392
MULF4
ADDF4
ASGNF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 84
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
CNSTF4 1040187392
MULF4
ADDF4
ASGNF4
line 186
;186:	VectorMA(check->s.pos.trBase, 2, check->movedir, end);
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 88
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 88
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ADDF4
ASGNF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 92
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ADDF4
ASGNF4
line 187
;187:	trap_Trace(&tr, start, NULL, NULL, end, check->s.number, MASK_SOLID);
ADDRLP4 24
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 189
;188:
;189:	if (tr.startsolid || tr.fraction < 1)
ADDRLP4 24+4
INDIRI4
CNSTI4 0
NEI4 $127
ADDRLP4 24+8
INDIRF4
CNSTF4 1065353216
GEF4 $123
LABELV $127
line 190
;190:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $118
JUMPV
LABELV $123
line 192
;191:
;192:	return qtrue;
CNSTI4 1
RETI4
LABELV $118
endproc G_CheckProxMinePosition 96 28
export G_TryPushingProxMine
proc G_TryPushingProxMine 120 16
line 200
;193:}
;194:
;195:/*
;196:==================
;197:G_TryPushingProxMine
;198:==================
;199:*/
;200:qboolean G_TryPushingProxMine(gentity_t* check, gentity_t* pusher, vec3_t move, vec3_t amove) {
line 206
;201:	vec3_t forward, right, up;
;202:	vec3_t org, org2, move2;
;203:	int    ret;
;204:
;205:	// we need this for pushing things later
;206:	VectorSubtract(vec3_origin, amove, org);
ADDRLP4 76
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 0
ADDRGP4 vec3_origin
INDIRF4
ADDRLP4 76
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRGP4 vec3_origin+4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRGP4 vec3_origin+8
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 207
;207:	AngleVectors(org, forward, right, up);
ADDRLP4 0
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 48
ARGP4
ADDRLP4 60
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 210
;208:
;209:	// try moving the contacted entity
;210:	VectorAdd(check->s.pos.trBase, move, check->s.pos.trBase);
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 80
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 84
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 88
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 213
;211:
;212:	// figure movement due to the pusher's amove
;213:	VectorSubtract(check->s.pos.trBase, pusher->r.currentOrigin, org);
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 92
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 92
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 214
;214:	org2[0] = DotProduct(org, forward);
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 36+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 36+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 215
;215:	org2[1] = -DotProduct(org, right);
ADDRLP4 12+4
ADDRLP4 0
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 48+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 48+8
INDIRF4
MULF4
ADDF4
NEGF4
ASGNF4
line 216
;216:	org2[2] = DotProduct(org, up);
ADDRLP4 12+8
ADDRLP4 0
INDIRF4
ADDRLP4 60
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 60+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 60+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 217
;217:	VectorSubtract(org2, org, move2);
ADDRLP4 24
ADDRLP4 12
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 0+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 24+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 0+8
INDIRF4
SUBF4
ASGNF4
line 218
;218:	VectorAdd(check->s.pos.trBase, move2, check->s.pos.trBase);
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 100
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
ADDF4
ASGNF4
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 104
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 24+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 108
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 24+8
INDIRF4
ADDF4
ASGNF4
line 220
;219:
;220:	ret = G_CheckProxMinePosition(check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 G_CheckProxMinePosition
CALLI4
ASGNI4
ADDRLP4 72
ADDRLP4 112
INDIRI4
ASGNI4
line 221
;221:	if (ret) {
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $157
line 222
;222:		VectorCopy(check->s.pos.trBase, check->r.currentOrigin);
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 116
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 223
;223:		trap_LinkEntity(check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 224
;224:	}
LABELV $157
line 225
;225:	return ret;
ADDRLP4 72
INDIRI4
RETI4
LABELV $128
endproc G_TryPushingProxMine 120 16
export G_MoverPush
proc G_MoverPush 4228 32
line 239
;226:}
;227:
;228:void G_ExplodeMissile(gentity_t* ent);
;229:
;230:/*
;231:============
;232:G_MoverPush
;233:
;234:Objects need to be moved back on a failed push,
;235:otherwise riders would continue to slide.
;236:If qfalse is returned, *obstacle will be the blocking entity
;237:============
;238:*/
;239:qboolean G_MoverPush(gentity_t* pusher, vec3_t move, vec3_t amove, gentity_t** obstacle) {
line 248
;240:	int        i, e;
;241:	gentity_t* check;
;242:	vec3_t     mins, maxs;
;243:	pushed_t*  p;
;244:	int        entityList[MAX_GENTITIES];
;245:	int        listedEntities;
;246:	vec3_t     totalMins, totalMaxs;
;247:
;248:	*obstacle = NULL;
ADDRFP4 12
INDIRP4
CNSTP4 0
ASGNP4
line 252
;249:
;250:	// mins/maxs are the bounds at the destination
;251:	// totalMins / totalMaxs are the bounds for the entire move
;252:	if (pusher->r.currentAngles[0] || pusher->r.currentAngles[1] || pusher->r.currentAngles[2] || amove[0] || amove[1] || amove[2]) {
ADDRLP4 4164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4164
INDIRP4
CNSTI4 500
ADDP4
INDIRF4
CNSTF4 0
NEF4 $166
ADDRLP4 4164
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
CNSTF4 0
NEF4 $166
ADDRLP4 4164
INDIRP4
CNSTI4 508
ADDP4
INDIRF4
CNSTF4 0
NEF4 $166
ADDRLP4 4168
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 4168
INDIRP4
INDIRF4
CNSTF4 0
NEF4 $166
ADDRLP4 4168
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 0
NEF4 $166
ADDRLP4 4168
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
EQF4 $160
LABELV $166
line 255
;253:		float radius;
;254:
;255:		radius = RadiusFromBounds(pusher->r.mins, pusher->r.maxs);
ADDRLP4 4176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4176
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 4176
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 4180
ADDRGP4 RadiusFromBounds
CALLF4
ASGNF4
ADDRLP4 4172
ADDRLP4 4180
INDIRF4
ASGNF4
line 256
;256:		for (i = 0; i < 3; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $167
line 257
;257:			mins[i]      = pusher->r.currentOrigin[i] + move[i] - radius;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ADDRLP4 4172
INDIRF4
SUBF4
ASGNF4
line 258
;258:			maxs[i]      = pusher->r.currentOrigin[i] + move[i] + radius;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ADDRLP4 4172
INDIRF4
ADDF4
ASGNF4
line 259
;259:			totalMins[i] = mins[i] - move[i];
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4140
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 260
;260:			totalMaxs[i] = maxs[i] - move[i];
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4152
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 261
;261:		}
LABELV $168
line 256
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $167
line 262
;262:	} else {
ADDRGP4 $161
JUMPV
LABELV $160
line 263
;263:		for (i = 0; i < 3; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $171
line 264
;264:			mins[i] = pusher->r.absmin[i] + move[i];
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 265
;265:			maxs[i] = pusher->r.absmax[i] + move[i];
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 266
;266:		}
LABELV $172
line 263
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $171
line 268
;267:
;268:		VectorCopy(pusher->r.absmin, totalMins);
ADDRLP4 4140
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
INDIRB
ASGNB 12
line 269
;269:		VectorCopy(pusher->r.absmax, totalMaxs);
ADDRLP4 4152
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRB
ASGNB 12
line 270
;270:		for (i = 0; i < 3; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $175
line 271
;271:			if (move[i] > 0) {
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
CNSTF4 0
LEF4 $179
line 272
;272:				totalMaxs[i] += move[i];
ADDRLP4 4176
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4152
ADDP4
ASGNP4
ADDRLP4 4176
INDIRP4
ADDRLP4 4176
INDIRP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 273
;273:			} else {
ADDRGP4 $180
JUMPV
LABELV $179
line 274
;274:				totalMins[i] += move[i];
ADDRLP4 4176
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4140
ADDP4
ASGNP4
ADDRLP4 4176
INDIRP4
ADDRLP4 4176
INDIRP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 275
;275:			}
LABELV $180
line 276
;276:		}
LABELV $176
line 270
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $175
line 277
;277:	}
LABELV $161
line 280
;278:
;279:	// unlink the pusher so we don't get it in the entityList
;280:	trap_UnlinkEntity(pusher);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_UnlinkEntity
CALLV
pop
line 282
;281:
;282:	listedEntities = trap_EntitiesInBox(totalMins, totalMaxs, entityList, MAX_GENTITIES);
ADDRLP4 4140
ARGP4
ADDRLP4 4152
ARGP4
ADDRLP4 40
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 4172
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 4136
ADDRLP4 4172
INDIRI4
ASGNI4
line 285
;283:
;284:	// move the pusher to its final position
;285:	VectorAdd(pusher->r.currentOrigin, move, pusher->r.currentOrigin);
ADDRLP4 4176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4176
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 4176
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4180
INDIRP4
CNSTI4 492
ADDP4
ADDRLP4 4180
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4184
INDIRP4
CNSTI4 496
ADDP4
ADDRLP4 4184
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 286
;286:	VectorAdd(pusher->r.currentAngles, amove, pusher->r.currentAngles);
ADDRLP4 4188
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4188
INDIRP4
CNSTI4 500
ADDP4
ADDRLP4 4188
INDIRP4
CNSTI4 500
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4192
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4192
INDIRP4
CNSTI4 504
ADDP4
ADDRLP4 4192
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4196
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4196
INDIRP4
CNSTI4 508
ADDP4
ADDRLP4 4196
INDIRP4
CNSTI4 508
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 287
;287:	trap_LinkEntity(pusher);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 290
;288:
;289:	// see if any solid entities are inside the final position
;290:	for (e = 0; e < listedEntities; e++) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $184
JUMPV
LABELV $181
line 291
;291:		check = &g_entities[entityList[e]];
ADDRLP4 8
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
INDIRI4
CNSTI4 816
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 329
;292:
;293:#ifdef MISSIONPACK
;294:		if (check->s.eType == ET_MISSILE) {
;295:			// if it is a prox mine
;296:			if (!strcmp(check->classname, "prox mine")) {
;297:				// if this prox mine is attached to this mover try to move it with the pusher
;298:				if (check->enemy == pusher) {
;299:					if (!G_TryPushingProxMine(check, pusher, move, amove)) {
;300:						// explode
;301:						check->s.loopSound = 0;
;302:						G_AddEvent(check, EV_PROXIMITY_MINE_TRIGGER, 0);
;303:						G_ExplodeMissile(check);
;304:						if (check->activator) {
;305:							G_FreeEntity(check->activator);
;306:							check->activator = NULL;
;307:						}
;308:						// G_Printf("prox mine explodes\n");
;309:					}
;310:				} else {
;311:					// check if the prox mine is crushed by the mover
;312:					if (!G_CheckProxMinePosition(check)) {
;313:						// explode
;314:						check->s.loopSound = 0;
;315:						G_AddEvent(check, EV_PROXIMITY_MINE_TRIGGER, 0);
;316:						G_ExplodeMissile(check);
;317:						if (check->activator) {
;318:							G_FreeEntity(check->activator);
;319:							check->activator = NULL;
;320:						}
;321:						// G_Printf("prox mine explodes\n");
;322:					}
;323:				}
;324:				continue;
;325:			}
;326:		}
;327:#endif
;328:		// only push items and players
;329:		if (check->s.eType != ET_ITEM && check->s.eType != ET_PLAYER && !check->physicsObject) {
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $185
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
EQI4 $185
ADDRLP4 8
INDIRP4
CNSTI4 564
ADDP4
INDIRI4
CNSTI4 0
NEI4 $185
line 330
;330:			continue;
ADDRGP4 $182
JUMPV
LABELV $185
line 334
;331:		}
;332:
;333:		// if the entity is standing on the pusher, it will definitely be moved
;334:		if (check->s.groundEntityNum != pusher->s.number) {
ADDRLP4 8
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
EQI4 $187
line 336
;335:			// see if the ent needs to be tested
;336:			if (check->r.absmin[0] >= maxs[0] || check->r.absmin[1] >= maxs[1] || check->r.absmin[2] >= maxs[2] || check->r.absmax[0] <= mins[0] ||
ADDRLP4 8
INDIRP4
CNSTI4 464
ADDP4
INDIRF4
ADDRLP4 28
INDIRF4
GEF4 $199
ADDRLP4 8
INDIRP4
CNSTI4 468
ADDP4
INDIRF4
ADDRLP4 28+4
INDIRF4
GEF4 $199
ADDRLP4 8
INDIRP4
CNSTI4 472
ADDP4
INDIRF4
ADDRLP4 28+8
INDIRF4
GEF4 $199
ADDRLP4 8
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
LEF4 $199
ADDRLP4 8
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
ADDRLP4 16+4
INDIRF4
LEF4 $199
ADDRLP4 8
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
ADDRLP4 16+8
INDIRF4
GTF4 $189
LABELV $199
line 337
;337:			    check->r.absmax[1] <= mins[1] || check->r.absmax[2] <= mins[2]) {
line 338
;338:				continue;
ADDRGP4 $182
JUMPV
LABELV $189
line 342
;339:			}
;340:			// see if the ent's bbox is inside the pusher's final position
;341:			// this does allow a fast moving object to pass through a thin entity...
;342:			if (!G_TestEntityPosition(check)) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 4208
ADDRGP4 G_TestEntityPosition
CALLP4
ASGNP4
ADDRLP4 4208
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $200
line 343
;343:				continue;
ADDRGP4 $182
JUMPV
LABELV $200
line 345
;344:			}
;345:		}
LABELV $187
line 348
;346:
;347:		// the entity needs to be pushed
;348:		if (G_TryPushingEntity(check, pusher, move, amove)) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4204
ADDRGP4 G_TryPushingEntity
CALLI4
ASGNI4
ADDRLP4 4204
INDIRI4
CNSTI4 0
EQI4 $202
line 349
;349:			continue;
ADDRGP4 $182
JUMPV
LABELV $202
line 355
;350:		}
;351:
;352:		// the move was blocked an entity
;353:
;354:		// bobbing entities are instant-kill and never get blocked
;355:		if (pusher->s.pos.trType == TR_SINE || pusher->s.apos.trType == TR_SINE) {
ADDRLP4 4208
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4208
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4
EQI4 $206
ADDRLP4 4208
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 4
NEI4 $204
LABELV $206
line 356
;356:			G_Damage(check, pusher, pusher, NULL, NULL, 99999, 0, MOD_CRUSH);
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 4212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4212
INDIRP4
ARGP4
ADDRLP4 4212
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 99999
ARGI4
CNSTI4 0
ARGI4
CNSTI4 17
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 357
;357:			continue;
ADDRGP4 $182
JUMPV
LABELV $204
line 361
;358:		}
;359:
;360:		// save off the obstacle so we can call the block function (crush, etc)
;361:		*obstacle = check;
ADDRFP4 12
INDIRP4
ADDRLP4 8
INDIRP4
ASGNP4
line 366
;362:
;363:		// move back any entities we already moved
;364:		// go backwards, so if the same entity was pushed
;365:		// twice, it goes back to the original position
;366:		for (p = pushed_p - 1; p >= pushed; p--) {
ADDRLP4 0
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -32
ADDP4
ASGNP4
ADDRGP4 $210
JUMPV
LABELV $207
line 367
;367:			VectorCopy(p->origin, p->ent->s.pos.trBase);
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRB
ASGNB 12
line 368
;368:			VectorCopy(p->angles, p->ent->s.apos.trBase);
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRB
ASGNB 12
line 369
;369:			if (p->ent->client) {
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $211
line 370
;370:				p->ent->client->ps.delta_angles[YAW] = p->deltayaw;
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 371
;371:				VectorCopy(p->origin, p->ent->client->ps.origin);
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRB
ASGNB 12
line 372
;372:			}
LABELV $211
line 373
;373:			trap_LinkEntity(p->ent);
ADDRLP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 374
;374:		}
LABELV $208
line 366
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 -32
ADDP4
ASGNP4
LABELV $210
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 pushed
CVPU4 4
GEU4 $207
line 375
;375:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $159
JUMPV
LABELV $182
line 290
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $184
ADDRLP4 12
INDIRI4
ADDRLP4 4136
INDIRI4
LTI4 $181
line 378
;376:	}
;377:
;378:	return qtrue;
CNSTI4 1
RETI4
LABELV $159
endproc G_MoverPush 4228 32
export G_MoverTeam
proc G_MoverTeam 72 16
line 386
;379:}
;380:
;381:/*
;382:=================
;383:G_MoverTeam
;384:=================
;385:*/
;386:void G_MoverTeam(gentity_t* ent) {
line 391
;387:	vec3_t     move, amove;
;388:	gentity_t *part, *obstacle;
;389:	vec3_t     origin, angles;
;390:
;391:	obstacle = NULL;
ADDRLP4 52
CNSTP4 0
ASGNP4
line 396
;392:
;393:	// make sure all team slaves can move before commiting
;394:	// any moves or calling any think functions
;395:	// if the move is blocked, all moved objects will be backed out
;396:	pushed_p = pushed;
ADDRGP4 pushed_p
ADDRGP4 pushed
ASGNP4
line 397
;397:	for (part = ent; part; part = part->teamchain) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $217
JUMPV
LABELV $214
line 399
;398:		// get current position
;399:		BG_EvaluateTrajectory(&part->s.pos, level.time, origin);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 28
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 400
;400:		BG_EvaluateTrajectory(&part->s.apos, level.time, angles);
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 40
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 401
;401:		VectorSubtract(origin, part->r.currentOrigin, move);
ADDRLP4 4
ADDRLP4 28
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 28+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 402
;402:		VectorSubtract(angles, part->r.currentAngles, amove);
ADDRLP4 16
ADDRLP4 40
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 500
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 40+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 40+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 508
ADDP4
INDIRF4
SUBF4
ASGNF4
line 403
;403:		if (!G_MoverPush(part, move, amove, &obstacle)) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 52
ARGP4
ADDRLP4 64
ADDRGP4 G_MoverPush
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
NEI4 $228
line 404
;404:			break;  // move was blocked
ADDRGP4 $216
JUMPV
LABELV $228
line 406
;405:		}
;406:	}
LABELV $215
line 397
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
LABELV $217
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $214
LABELV $216
line 408
;407:
;408:	if (part) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $230
line 410
;409:		// go back to the previous position
;410:		for (part = ent; part; part = part->teamchain) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $235
JUMPV
LABELV $232
line 411
;411:			part->s.pos.trTime += level.time - level.previousTime;
ADDRLP4 56
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
ADDI4
ASGNI4
line 412
;412:			part->s.apos.trTime += level.time - level.previousTime;
ADDRLP4 60
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRI4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
ADDI4
ASGNI4
line 413
;413:			BG_EvaluateTrajectory(&part->s.pos, level.time, part->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 414
;414:			BG_EvaluateTrajectory(&part->s.apos, level.time, part->r.currentAngles);
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 500
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 415
;415:			trap_LinkEntity(part);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 416
;416:		}
LABELV $233
line 410
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
LABELV $235
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $232
line 419
;417:
;418:		// if the pusher has a "blocked" function, call it
;419:		if (ent->blocked) {
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $213
line 420
;420:			ent->blocked(ent, obstacle);
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 56
INDIRP4
CNSTI4 700
ADDP4
INDIRP4
CALLV
pop
line 421
;421:		}
line 422
;422:		return;
ADDRGP4 $213
JUMPV
LABELV $230
line 426
;423:	}
;424:
;425:	// the move succeeded
;426:	for (part = ent; part; part = part->teamchain) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $247
JUMPV
LABELV $244
line 428
;427:		// call the reached function if time is at or past end point
;428:		if (part->s.pos.trType == TR_LINEAR_STOP) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 3
NEI4 $248
line 429
;429:			if (level.time >= part->s.pos.trTime + part->s.pos.trDuration) {
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDI4
LTI4 $250
line 430
;430:				if (part->reached) {
ADDRLP4 0
INDIRP4
CNSTI4 696
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $253
line 431
;431:					part->reached(part);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 696
ADDP4
INDIRP4
CALLV
pop
line 432
;432:				}
LABELV $253
line 433
;433:			}
LABELV $250
line 434
;434:		}
LABELV $248
line 435
;435:	}
LABELV $245
line 426
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
LABELV $247
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $244
line 436
;436:}
LABELV $213
endproc G_MoverTeam 72 16
export G_RunMover
proc G_RunMover 4 4
line 444
;437:
;438:/*
;439:================
;440:G_RunMover
;441:
;442:================
;443:*/
;444:void G_RunMover(gentity_t* ent) {
line 447
;445:	// if not a team captain, don't do anything, because
;446:	// the captain will handle everything
;447:	if (ent->flags & FL_TEAMSLAVE) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $256
line 448
;448:		return;
ADDRGP4 $255
JUMPV
LABELV $256
line 452
;449:	}
;450:
;451:	// if stationary at one of the positions, don't move anything
;452:	if (ent->s.pos.trType != TR_STATIONARY || ent->s.apos.trType != TR_STATIONARY) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $260
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 0
EQI4 $258
LABELV $260
line 453
;453:		G_MoverTeam(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_MoverTeam
CALLV
pop
line 454
;454:	}
LABELV $258
line 457
;455:
;456:	// check think function
;457:	G_RunThink(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 458
;458:}
LABELV $255
endproc G_RunMover 4 4
export SetMoverState
proc SetMoverState 56 12
line 475
;459:
;460:/*
;461:============================================================================
;462:
;463:GENERAL MOVERS
;464:
;465:Doors, plats, and buttons are all binary (two position) movers
;466:Pos1 is "at rest", pos2 is "activated"
;467:============================================================================
;468:*/
;469:
;470:/*
;471:===============
;472:SetMoverState
;473:===============
;474:*/
;475:void SetMoverState(gentity_t* ent, moverState_t moverState, int time) {
line 479
;476:	vec3_t delta;
;477:	float  f;
;478:
;479:	ent->moverState = moverState;
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 481
;480:
;481:	ent->s.pos.trTime = time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 482
;482:	switch (moverState) {
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
LTI4 $262
ADDRLP4 16
INDIRI4
CNSTI4 3
GTI4 $262
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $277
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $277
address $265
address $266
address $267
address $272
code
LABELV $265
line 484
;483:	case MOVER_POS1:
;484:		VectorCopy(ent->pos1, ent->s.pos.trBase);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 612
ADDP4
INDIRB
ASGNB 12
line 485
;485:		ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 486
;486:		break;
ADDRGP4 $263
JUMPV
LABELV $266
line 488
;487:	case MOVER_POS2:
;488:		VectorCopy(ent->pos2, ent->s.pos.trBase);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 624
ADDP4
INDIRB
ASGNB 12
line 489
;489:		ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 490
;490:		break;
ADDRGP4 $263
JUMPV
LABELV $267
line 492
;491:	case MOVER_1TO2:
;492:		VectorCopy(ent->pos1, ent->s.pos.trBase);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 612
ADDP4
INDIRB
ASGNB 12
line 493
;493:		VectorSubtract(ent->pos2, ent->pos1, delta);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 36
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 612
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 36
INDIRP4
CNSTI4 628
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 40
INDIRP4
CNSTI4 632
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
SUBF4
ASGNF4
line 494
;494:		f = 1000.0 / ent->s.pos.trDuration;
ADDRLP4 12
CNSTF4 1148846080
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 495
;495:		VectorScale(delta, f, ent->s.pos.trDelta);
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 496
;496:		ent->s.pos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 3
ASGNI4
line 497
;497:		break;
ADDRGP4 $263
JUMPV
LABELV $272
line 499
;498:	case MOVER_2TO1:
;499:		VectorCopy(ent->pos2, ent->s.pos.trBase);
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 624
ADDP4
INDIRB
ASGNB 12
line 500
;500:		VectorSubtract(ent->pos1, ent->pos2, delta);
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 48
INDIRP4
CNSTI4 612
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 48
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 628
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 52
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 632
ADDP4
INDIRF4
SUBF4
ASGNF4
line 501
;501:		f = 1000.0 / ent->s.pos.trDuration;
ADDRLP4 12
CNSTF4 1148846080
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 502
;502:		VectorScale(delta, f, ent->s.pos.trDelta);
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 503
;503:		ent->s.pos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 3
ASGNI4
line 504
;504:		break;
LABELV $262
LABELV $263
line 506
;505:	}
;506:	BG_EvaluateTrajectory(&ent->s.pos, level.time, ent->r.currentOrigin);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 24
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 507
;507:	trap_LinkEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 508
;508:}
LABELV $261
endproc SetMoverState 56 12
export MatchTeam
proc MatchTeam 4 12
line 518
;509:
;510:/*
;511:================
;512:MatchTeam
;513:
;514:All entities in a mover team will move from pos1 to pos2
;515:in the same amount of time
;516:================
;517:*/
;518:void MatchTeam(gentity_t* teamLeader, int moverState, int time) {
line 521
;519:	gentity_t* slave;
;520:
;521:	for (slave = teamLeader; slave; slave = slave->teamchain) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $283
JUMPV
LABELV $280
line 522
;522:		SetMoverState(slave, moverState, time);
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 523
;523:	}
LABELV $281
line 521
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
LABELV $283
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $280
line 524
;524:}
LABELV $279
endproc MatchTeam 4 12
export ReturnToPos1
proc ReturnToPos1 8 12
line 531
;525:
;526:/*
;527:================
;528:ReturnToPos1
;529:================
;530:*/
;531:void ReturnToPos1(gentity_t* ent) {
line 532
;532:	MatchTeam(ent, MOVER_2TO1, level.time);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 535
;533:
;534:	// looping sound
;535:	ent->s.loopSound = ent->soundLoop;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
ASGNI4
line 538
;536:
;537:	// starting sound
;538:	if (ent->sound2to1) {
ADDRFP4 0
INDIRP4
CNSTI4 588
ADDP4
INDIRI4
CNSTI4 0
EQI4 $286
line 539
;539:		G_AddEvent(ent, EV_GENERAL_SOUND, ent->sound2to1);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 588
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 540
;540:	}
LABELV $286
line 541
;541:}
LABELV $284
endproc ReturnToPos1 8 12
export Reached_BinaryMover
proc Reached_BinaryMover 12 12
line 548
;542:
;543:/*
;544:================
;545:Reached_BinaryMover
;546:================
;547:*/
;548:void Reached_BinaryMover(gentity_t* ent) {
line 551
;549:
;550:	// stop the looping sound
;551:	ent->s.loopSound = ent->soundLoop;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
ASGNI4
line 553
;552:
;553:	if (ent->moverState == MOVER_1TO2) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 2
NEI4 $289
line 555
;554:		// reached pos2
;555:		SetMoverState(ent, MOVER_POS2, level.time);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 558
;556:
;557:		// play sound
;558:		if (ent->soundPos2) {
ADDRFP4 0
INDIRP4
CNSTI4 592
ADDP4
INDIRI4
CNSTI4 0
EQI4 $292
line 559
;559:			G_AddEvent(ent, EV_GENERAL_SOUND, ent->soundPos2);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 592
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 560
;560:		}
LABELV $292
line 563
;561:
;562:		// return to pos1 after a delay
;563:		ent->think     = ReturnToPos1;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 ReturnToPos1
ASGNP4
line 564
;564:		ent->nextthink = level.time + ent->wait;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRP4
CNSTI4 796
ADDP4
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 567
;565:
;566:		// fire targets
;567:		if (!ent->activator) {
ADDRFP4 0
INDIRP4
CNSTI4 772
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $295
line 568
;568:			ent->activator = ent;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 772
ADDP4
ADDRLP4 8
INDIRP4
ASGNP4
line 569
;569:		}
LABELV $295
line 570
;570:		G_UseTargets(ent, ent->activator);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 772
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 571
;571:	} else if (ent->moverState == MOVER_2TO1) {
ADDRGP4 $290
JUMPV
LABELV $289
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 3
NEI4 $297
line 573
;572:		// reached pos1
;573:		SetMoverState(ent, MOVER_POS1, level.time);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 576
;574:
;575:		// play sound
;576:		if (ent->soundPos1) {
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 0
EQI4 $300
line 577
;577:			G_AddEvent(ent, EV_GENERAL_SOUND, ent->soundPos1);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 578
;578:		}
LABELV $300
line 581
;579:
;580:		// close areaportals
;581:		if (ent->teammaster == ent || !ent->teammaster) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
EQU4 $304
ADDRLP4 4
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $298
LABELV $304
line 582
;582:			trap_AdjustAreaPortalState(ent, qfalse);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 trap_AdjustAreaPortalState
CALLV
pop
line 583
;583:		}
line 584
;584:	} else {
ADDRGP4 $298
JUMPV
LABELV $297
line 585
;585:		G_Error("Reached_BinaryMover: bad moverState");
ADDRGP4 $305
ARGP4
ADDRGP4 G_Error
CALLV
pop
line 586
;586:	}
LABELV $298
LABELV $290
line 587
;587:}
LABELV $288
endproc Reached_BinaryMover 12 12
export Use_BinaryMover
proc Use_BinaryMover 16 12
line 594
;588:
;589:/*
;590:================
;591:Use_BinaryMover
;592:================
;593:*/
;594:void Use_BinaryMover(gentity_t* ent, gentity_t* other, gentity_t* activator) {
line 599
;595:	int total;
;596:	int partial;
;597:
;598:	// only the master should be used
;599:	if (ent->flags & FL_TEAMSLAVE) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $307
line 600
;600:		Use_BinaryMover(ent->teammaster, other, activator);
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 601
;601:		return;
ADDRGP4 $306
JUMPV
LABELV $307
line 604
;602:	}
;603:
;604:	ent->activator = activator;
ADDRFP4 0
INDIRP4
CNSTI4 772
ADDP4
ADDRFP4 8
INDIRP4
ASGNP4
line 606
;605:
;606:	if (ent->moverState == MOVER_POS1) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 0
NEI4 $309
line 609
;607:		// start moving 50 msec later, becase if this was player
;608:		// triggered, level.time hasn't been advanced yet
;609:		MatchTeam(ent, MOVER_1TO2, level.time + 50);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 612
;610:
;611:		// starting sound
;612:		if (ent->sound1to2) {
ADDRFP4 0
INDIRP4
CNSTI4 584
ADDP4
INDIRI4
CNSTI4 0
EQI4 $312
line 613
;613:			G_AddEvent(ent, EV_GENERAL_SOUND, ent->sound1to2);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 584
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 614
;614:		}
LABELV $312
line 617
;615:
;616:		// looping sound
;617:		ent->s.loopSound = ent->soundLoop;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
ASGNI4
line 620
;618:
;619:		// open areaportal
;620:		if (ent->teammaster == ent || !ent->teammaster) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 12
INDIRP4
CVPU4 4
EQU4 $316
ADDRLP4 12
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $306
LABELV $316
line 621
;621:			trap_AdjustAreaPortalState(ent, qtrue);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 trap_AdjustAreaPortalState
CALLV
pop
line 622
;622:		}
line 623
;623:		return;
ADDRGP4 $306
JUMPV
LABELV $309
line 627
;624:	}
;625:
;626:	// if all the way up, just delay before coming down
;627:	if (ent->moverState == MOVER_POS2) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 1
NEI4 $317
line 628
;628:		ent->nextthink = level.time + ent->wait;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRP4
CNSTI4 796
ADDP4
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 629
;629:		return;
ADDRGP4 $306
JUMPV
LABELV $317
line 633
;630:	}
;631:
;632:	// only partway down before reversing
;633:	if (ent->moverState == MOVER_2TO1) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 3
NEI4 $320
line 634
;634:		total   = ent->s.pos.trDuration;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 635
;635:		partial = level.time - ent->s.pos.trTime;
ADDRLP4 4
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
ASGNI4
line 636
;636:		if (partial > total) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $323
line 637
;637:			partial = total;
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
line 638
;638:		}
LABELV $323
line 640
;639:
;640:		MatchTeam(ent, MOVER_1TO2, level.time - (total - partial));
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
SUBI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 642
;641:
;642:		if (ent->sound1to2) {
ADDRFP4 0
INDIRP4
CNSTI4 584
ADDP4
INDIRI4
CNSTI4 0
EQI4 $306
line 643
;643:			G_AddEvent(ent, EV_GENERAL_SOUND, ent->sound1to2);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 584
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 644
;644:		}
line 645
;645:		return;
ADDRGP4 $306
JUMPV
LABELV $320
line 649
;646:	}
;647:
;648:	// only partway up before reversing
;649:	if (ent->moverState == MOVER_1TO2) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 2
NEI4 $328
line 650
;650:		total   = ent->s.pos.trDuration;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 651
;651:		partial = level.time - ent->s.pos.trTime;
ADDRLP4 4
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
ASGNI4
line 652
;652:		if (partial > total) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $331
line 653
;653:			partial = total;
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
line 654
;654:		}
LABELV $331
line 656
;655:
;656:		MatchTeam(ent, MOVER_2TO1, level.time - (total - partial));
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
SUBI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 658
;657:
;658:		if (ent->sound2to1) {
ADDRFP4 0
INDIRP4
CNSTI4 588
ADDP4
INDIRI4
CNSTI4 0
EQI4 $306
line 659
;659:			G_AddEvent(ent, EV_GENERAL_SOUND, ent->sound2to1);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 588
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 660
;660:		}
line 661
;661:		return;
LABELV $328
line 663
;662:	}
;663:}
LABELV $306
endproc Use_BinaryMover 16 12
export InitMover
proc InitMover 92 12
line 673
;664:
;665:/*
;666:================
;667:InitMover
;668:
;669:"pos1", "pos2", and "speed" should be set before calling,
;670:so the movement delta can be calculated
;671:================
;672:*/
;673:void InitMover(gentity_t* ent) {
line 683
;674:	vec3_t   move;
;675:	float    distance;
;676:	float    light;
;677:	vec3_t   color;
;678:	qboolean lightSet, colorSet;
;679:	char*    sound;
;680:
;681:	// if the "model2" key is set, use a seperate model
;682:	// for drawing, but clip against the brushes
;683:	if (ent->model2) {
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $337
line 684
;684:		ent->s.modelindex2 = G_ModelIndex(ent->model2);
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 544
ADDP4
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 G_ModelIndex
CALLI4
ASGNI4
ADDRLP4 44
INDIRP4
CNSTI4 164
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 685
;685:	}
LABELV $337
line 688
;686:
;687:	// if the "loopsound" key is set, use a constant looping sound when moving
;688:	if (G_SpawnString("noise", "100", &sound)) {
ADDRGP4 $341
ARGP4
ADDRGP4 $342
ARGP4
ADDRLP4 40
ARGP4
ADDRLP4 44
ADDRGP4 G_SpawnString
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $339
line 689
;689:		ent->s.loopSound = G_SoundIndex(sound);
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 690
;690:	}
LABELV $339
line 693
;691:
;692:	// if the "color" or "light" keys are set, setup constantLight
;693:	lightSet = G_SpawnFloat("light", "100", &light);
ADDRGP4 $343
ARGP4
ADDRGP4 $342
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 48
ADDRGP4 G_SpawnFloat
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 48
INDIRI4
ASGNI4
line 694
;694:	colorSet = G_SpawnVector("color", "1 1 1", color);
ADDRGP4 $344
ARGP4
ADDRGP4 $345
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 52
ADDRGP4 G_SpawnVector
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 52
INDIRI4
ASGNI4
line 695
;695:	if (lightSet || colorSet) {
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $348
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $346
LABELV $348
line 698
;696:		int r, g, b, i;
;697:
;698:		r = color[0] * 255;
ADDRLP4 56
ADDRLP4 12
INDIRF4
CNSTF4 1132396544
MULF4
CVFI4 4
ASGNI4
line 699
;699:		if (r > 255) {
ADDRLP4 56
INDIRI4
CNSTI4 255
LEI4 $349
line 700
;700:			r = 255;
ADDRLP4 56
CNSTI4 255
ASGNI4
line 701
;701:		}
LABELV $349
line 702
;702:		g = color[1] * 255;
ADDRLP4 60
ADDRLP4 12+4
INDIRF4
CNSTF4 1132396544
MULF4
CVFI4 4
ASGNI4
line 703
;703:		if (g > 255) {
ADDRLP4 60
INDIRI4
CNSTI4 255
LEI4 $352
line 704
;704:			g = 255;
ADDRLP4 60
CNSTI4 255
ASGNI4
line 705
;705:		}
LABELV $352
line 706
;706:		b = color[2] * 255;
ADDRLP4 64
ADDRLP4 12+8
INDIRF4
CNSTF4 1132396544
MULF4
CVFI4 4
ASGNI4
line 707
;707:		if (b > 255) {
ADDRLP4 64
INDIRI4
CNSTI4 255
LEI4 $355
line 708
;708:			b = 255;
ADDRLP4 64
CNSTI4 255
ASGNI4
line 709
;709:		}
LABELV $355
line 710
;710:		i = light / 4;
ADDRLP4 68
ADDRLP4 36
INDIRF4
CNSTF4 1048576000
MULF4
CVFI4 4
ASGNI4
line 711
;711:		if (i > 255) {
ADDRLP4 68
INDIRI4
CNSTI4 255
LEI4 $357
line 712
;712:			i = 255;
ADDRLP4 68
CNSTI4 255
ASGNI4
line 713
;713:		}
LABELV $357
line 714
;714:		ent->s.constantLight = r | (g << 8) | (b << 16) | (i << 24);
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
CNSTI4 8
LSHI4
BORI4
ADDRLP4 64
INDIRI4
CNSTI4 16
LSHI4
BORI4
ADDRLP4 68
INDIRI4
CNSTI4 24
LSHI4
BORI4
ASGNI4
line 715
;715:	}
LABELV $346
line 717
;716:
;717:	ent->use     = Use_BinaryMover;
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
ADDRGP4 Use_BinaryMover
ASGNP4
line 718
;718:	ent->reached = Reached_BinaryMover;
ADDRFP4 0
INDIRP4
CNSTI4 696
ADDP4
ADDRGP4 Reached_BinaryMover
ASGNP4
line 720
;719:
;720:	ent->moverState = MOVER_POS1;
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
CNSTI4 0
ASGNI4
line 721
;721:	ent->r.svFlags  = SVF_USE_CURRENT_ORIGIN;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 128
ASGNI4
line 722
;722:	ent->s.eType    = ET_MOVER;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 4
ASGNI4
line 723
;723:	VectorCopy(ent->pos1, ent->r.currentOrigin);
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 56
INDIRP4
CNSTI4 612
ADDP4
INDIRB
ASGNB 12
line 724
;724:	trap_LinkEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 726
;725:
;726:	ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 727
;727:	VectorCopy(ent->pos1, ent->s.pos.trBase);
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 612
ADDP4
INDIRB
ASGNB 12
line 730
;728:
;729:	// calculate time to reach second position from speed
;730:	VectorSubtract(ent->pos2, ent->pos1, move);
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 64
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 612
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 64
INDIRP4
CNSTI4 628
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 68
INDIRP4
CNSTI4 632
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
SUBF4
ASGNF4
line 731
;731:	distance = VectorLength(move);
ADDRLP4 0
ARGP4
ADDRLP4 72
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 72
INDIRF4
ASGNF4
line 732
;732:	if (!ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
NEF4 $361
line 733
;733:		ent->speed = 100;
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
CNSTF4 1120403456
ASGNF4
line 734
;734:	}
LABELV $361
line 735
;735:	VectorScale(move, ent->speed, ent->s.pos.trDelta);
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
MULF4
ASGNF4
line 736
;736:	ent->s.pos.trDuration = distance * 1000 / ent->speed;
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 24
INDIRF4
CNSTF4 1148846080
MULF4
ADDRLP4 88
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 737
;737:	if (ent->s.pos.trDuration <= 0) {
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
GTI4 $365
line 738
;738:		ent->s.pos.trDuration = 1;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTI4 1
ASGNI4
line 739
;739:	}
LABELV $365
line 740
;740:}
LABELV $336
endproc InitMover 92 12
export Blocked_Door
proc Blocked_Door 4 32
line 758
;741:
;742:/*
;743:===============================================================================
;744:
;745:DOOR
;746:
;747:A use can be triggered either by a touch function, by being shot, or by being
;748:targeted by another entity.
;749:
;750:===============================================================================
;751:*/
;752:
;753:/*
;754:================
;755:Blocked_Door
;756:================
;757:*/
;758:void Blocked_Door(gentity_t* ent, gentity_t* other) {
line 760
;759:	// remove anything other than a client
;760:	if (!other->client) {
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $368
line 762
;761:		// except CTF flags!!!!
;762:		if (other->s.eType == ET_ITEM && other->item->giType == IT_TEAM) {
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
NEI4 $370
ADDRLP4 0
INDIRP4
CNSTI4 804
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 8
NEI4 $370
line 763
;763:			Team_DroppedFlagThink(other);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Team_DroppedFlagThink
CALLV
pop
line 764
;764:			return;
ADDRGP4 $367
JUMPV
LABELV $370
line 766
;765:		}
;766:		G_TempEntity(other->s.origin, EV_ITEM_POP);
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
CNSTI4 41
ARGI4
ADDRGP4 G_TempEntity
CALLP4
pop
line 767
;767:		G_FreeEntity(other);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 768
;768:		return;
ADDRGP4 $367
JUMPV
LABELV $368
line 771
;769:	}
;770:
;771:	if (ent->damage) {
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
INDIRI4
CNSTI4 0
EQI4 $372
line 772
;772:		G_Damage(other, ent, ent, NULL, NULL, ent->damage, 0, MOD_CRUSH);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 17
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 773
;773:	}
LABELV $372
line 774
;774:	if (ent->spawnflags & 4) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $374
line 775
;775:		return;  // crushers don't reverse
ADDRGP4 $367
JUMPV
LABELV $374
line 779
;776:	}
;777:
;778:	// reverse direction
;779:	Use_BinaryMover(ent, ent, other);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 780
;780:}
LABELV $367
endproc Blocked_Door 4 32
proc Touch_DoorTriggerSpectator 48 12
line 787
;781:
;782:/*
;783:================
;784:Touch_DoorTriggerSpectator
;785:================
;786:*/
;787:static void Touch_DoorTriggerSpectator(gentity_t* ent, gentity_t* other, trace_t* trace) {
line 792
;788:	int    axis;
;789:	vec3_t origin;
;790:	float  len, doorMin, doorMax;
;791:
;792:	VectorCopy(other->s.origin, origin);
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 794
;793:
;794:	axis    = ent->count;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
line 795
;795:	doorMax = other->s.origin[axis] - ent->r.absmax[axis];
ADDRLP4 20
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 796
;796:	doorMin = other->s.origin[axis] - ent->r.absmin[axis];
ADDRLP4 16
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 798
;797:
;798:	if (fabs(doorMax) < fabs(doorMin)) {
ADDRLP4 20
INDIRF4
ARGF4
ADDRLP4 36
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 40
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 36
INDIRF4
ADDRLP4 40
INDIRF4
GEF4 $377
line 799
;799:		origin[axis] = ent->r.absmin[axis] - 1;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ADDP4
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 800
;800:		len          = doorMax + 120;
ADDRLP4 24
ADDRLP4 20
INDIRF4
CNSTF4 1123024896
ADDF4
ASGNF4
line 801
;801:	} else {
ADDRGP4 $378
JUMPV
LABELV $377
line 802
;802:		origin[axis] = ent->r.absmax[axis] + 1;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDP4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 803
;803:		len          = 120 - doorMin;
ADDRLP4 24
CNSTF4 1123024896
ADDRLP4 16
INDIRF4
SUBF4
ASGNF4
line 804
;804:	}
LABELV $378
line 806
;805:
;806:	if (len >= 40) {
ADDRLP4 24
INDIRF4
CNSTF4 1109393408
LTF4 $379
line 807
;807:		return;
ADDRGP4 $376
JUMPV
LABELV $379
line 810
;808:	}
;809:
;810:	TeleportPlayer(other, origin, NULL);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 TeleportPlayer
CALLV
pop
line 811
;811:}
LABELV $376
endproc Touch_DoorTriggerSpectator 48 12
export Touch_DoorTrigger
proc Touch_DoorTrigger 8 12
line 818
;812:
;813:/*
;814:================
;815:Touch_DoorTrigger
;816:================
;817:*/
;818:void Touch_DoorTrigger(gentity_t* ent, gentity_t* other, trace_t* trace) {
line 819
;819:	if (other->client && other->client->sess.sessionTeam == TEAM_SPECTATOR) {
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $382
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 3
NEI4 $382
line 821
;820:		// if the door is not open and not opening
;821:		if (ent->parent->moverState != MOVER_1TO2 && ent->parent->moverState != MOVER_POS2) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 600
ADDP4
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 2
EQI4 $383
ADDRLP4 4
INDIRP4
CNSTI4 600
ADDP4
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 1
EQI4 $383
line 822
;822:			Touch_DoorTriggerSpectator(ent, other, trace);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Touch_DoorTriggerSpectator
CALLV
pop
line 823
;823:		}
line 824
;824:	} else if (ent->parent->moverState != MOVER_1TO2) {
ADDRGP4 $383
JUMPV
LABELV $382
ADDRFP4 0
INDIRP4
CNSTI4 600
ADDP4
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 2
EQI4 $386
line 825
;825:		Use_BinaryMover(ent->parent, ent, other);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 600
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 826
;826:	}
LABELV $386
LABELV $383
line 827
;827:}
LABELV $381
endproc Touch_DoorTrigger 8 12
export Think_SpawnNewDoorTrigger
proc Think_SpawnNewDoorTrigger 52 12
line 837
;828:
;829:/*
;830:======================
;831:Think_SpawnNewDoorTrigger
;832:
;833:All of the parts of a door have been spawned, so create
;834:a trigger that encloses all of them
;835:======================
;836:*/
;837:void Think_SpawnNewDoorTrigger(gentity_t* ent) {
line 842
;838:	gentity_t* other;
;839:	vec3_t     mins, maxs;
;840:	int        i, best;
;841:
;842:	if (!ent) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $389
line 843
;843:		return;
ADDRGP4 $388
JUMPV
LABELV $389
line 847
;844:	}
;845:
;846:	// set all of the slaves as shootable
;847:	for (other = ent; other; other = other->teamchain) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $394
JUMPV
LABELV $391
line 848
;848:		other->takedamage = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 1
ASGNI4
line 849
;849:	}
LABELV $392
line 847
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
LABELV $394
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $391
line 852
;850:
;851:	// find the bounds of everything on the team
;852:	VectorCopy(ent->r.absmin, mins);
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
INDIRB
ASGNB 12
line 853
;853:	VectorCopy(ent->r.absmax, maxs);
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRB
ASGNB 12
line 855
;854:
;855:	for (other = ent->teamchain; other; other = other->teamchain) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $398
JUMPV
LABELV $395
line 856
;856:		AddPointToBounds(other->r.absmin, mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 AddPointToBounds
CALLV
pop
line 857
;857:		AddPointToBounds(other->r.absmax, mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 476
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 AddPointToBounds
CALLV
pop
line 858
;858:	}
LABELV $396
line 855
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ASGNP4
LABELV $398
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $395
line 861
;859:
;860:	// find the thinnest axis, which will be the one we expand
;861:	best = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 862
;862:	for (i = 1; i < 3; i++) {
ADDRLP4 4
CNSTI4 1
ASGNI4
LABELV $399
line 863
;863:		if (maxs[i] - mins[i] < maxs[best] - mins[best]) {
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRF4
SUBF4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
ADDP4
INDIRF4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRF4
SUBF4
GEF4 $403
line 864
;864:			best = i;
ADDRLP4 32
ADDRLP4 4
INDIRI4
ASGNI4
line 865
;865:		}
LABELV $403
line 866
;866:	}
LABELV $400
line 862
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $399
line 867
;867:	maxs[best] += 120;
ADDRLP4 36
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1123024896
ADDF4
ASGNF4
line 868
;868:	mins[best] -= 120;
ADDRLP4 40
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
CNSTF4 1123024896
SUBF4
ASGNF4
line 871
;869:
;870:	// create a trigger with this size
;871:	other            = G_Spawn();
ADDRLP4 44
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 44
INDIRP4
ASGNP4
line 872
;872:	other->classname = "door_trigger";
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $405
ASGNP4
line 873
;873:	VectorCopy(mins, other->r.mins);
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRLP4 8
INDIRB
ASGNB 12
line 874
;874:	VectorCopy(maxs, other->r.maxs);
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
ADDRLP4 20
INDIRB
ASGNB 12
line 875
;875:	other->parent     = ent;
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 876
;876:	other->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 1073741824
ASGNI4
line 877
;877:	other->touch      = Touch_DoorTrigger;
ADDRLP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 Touch_DoorTrigger
ASGNP4
line 879
;878:	// remember the thinnest axis
;879:	other->count = best;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 880
;880:	trap_LinkEntity(other);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 882
;881:
;882:	MatchTeam(ent, ent->moverState, level.time);
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 883
;883:}
LABELV $388
endproc Think_SpawnNewDoorTrigger 52 12
export Think_MatchTeam
proc Think_MatchTeam 4 12
line 885
;884:
;885:void Think_MatchTeam(gentity_t* ent) {
line 886
;886:	MatchTeam(ent, ent->moverState, level.time);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 887
;887:}
LABELV $407
endproc Think_MatchTeam 4 12
export SP_func_door
proc SP_func_door 96 12
line 905
;888:
;889:/*QUAKED func_door (0 .5 .8) ? START_OPEN x CRUSHER
;890:TOGGLE		wait in both the start and end states for a trigger event.
;891:START_OPEN	the door to moves to its destination when spawned, and operate in reverse.  It is used to temporarily or permanently close off an area when
;892:triggered (not useful for touch or takedamage doors). NOMONSTER	monsters will not trigger this door
;893:
;894:"model2"	.md3 model to also draw
;895:"angle"		determines the opening direction
;896:"targetname" if set, no touch field will be spawned and a remote button or trigger field activates the door.
;897:"speed"		movement speed (100 default)
;898:"wait"		wait before returning (3 default, -1 = never return)
;899:"lip"		lip remaining at end of move (8 default)
;900:"dmg"		damage to inflict when blocked (2 default)
;901:"color"		constantLight color
;902:"light"		constantLight radius
;903:"health"	if set, the door must be shot open
;904:*/
;905:void SP_func_door(gentity_t* ent) {
line 911
;906:	vec3_t abs_movedir;
;907:	float  distance;
;908:	vec3_t size;
;909:	float  lip;
;910:
;911:	if (ent->spawnflags & 32) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $410
line 912
;912:		ent->sound1to2 = ent->sound2to1 = 0;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRP4
CNSTI4 588
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
ADDRLP4 32
INDIRP4
CNSTI4 584
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
line 913
;913:		ent->soundPos1 = ent->soundPos2 = 0;
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 592
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 580
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 914
;914:	} else {
ADDRGP4 $411
JUMPV
LABELV $410
line 915
;915:		ent->sound1to2 = ent->sound2to1 = G_SoundIndex("sound/movers/doors/dr1_strt.wav");
ADDRGP4 $412
ARGP4
ADDRLP4 32
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 588
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
ADDRLP4 36
INDIRP4
CNSTI4 584
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 916
;916:		ent->soundPos1 = ent->soundPos2 = G_SoundIndex("sound/movers/doors/dr1_end.wav");
ADDRGP4 $413
ARGP4
ADDRLP4 40
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 592
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
ADDRLP4 44
INDIRP4
CNSTI4 580
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 917
;917:	}
LABELV $411
line 919
;918:
;919:	ent->blocked = Blocked_Door;
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
ADDRGP4 Blocked_Door
ASGNP4
line 922
;920:
;921:	// default speed of 400
;922:	if (!ent->speed)
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
NEF4 $414
line 923
;923:		ent->speed = 400;
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
CNSTF4 1137180672
ASGNF4
LABELV $414
line 926
;924:
;925:	// default wait of 2 seconds
;926:	if (!ent->wait)
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRF4
CNSTF4 0
NEF4 $416
line 927
;927:		ent->wait = 2;
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
CNSTF4 1073741824
ASGNF4
LABELV $416
line 928
;928:	ent->wait *= 1000;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1148846080
MULF4
ASGNF4
line 931
;929:
;930:	// default lip of 8 units
;931:	G_SpawnFloat("lip", "8", &lip);
ADDRGP4 $418
ARGP4
ADDRGP4 $419
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 934
;932:
;933:	// default damage of 2 points
;934:	G_SpawnInt("dmg", "2", &ent->damage);
ADDRGP4 $420
ARGP4
ADDRGP4 $421
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 937
;935:
;936:	// first position at start
;937:	VectorCopy(ent->s.origin, ent->pos1);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 612
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 940
;938:
;939:	// calculate second position
;940:	trap_SetBrushModel(ent, ent->model);
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 540
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 941
;941:	G_SetMovedir(ent->s.angles, ent->movedir);
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 116
ADDP4
ARGP4
ADDRLP4 44
INDIRP4
CNSTI4 676
ADDP4
ARGP4
ADDRGP4 G_SetMovedir
CALLV
pop
line 942
;942:	abs_movedir[0] = fabs(ent->movedir[0]);
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ARGF4
ADDRLP4 48
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 48
INDIRF4
ASGNF4
line 943
;943:	abs_movedir[1] = fabs(ent->movedir[1]);
ADDRFP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
ARGF4
ADDRLP4 52
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 52
INDIRF4
ASGNF4
line 944
;944:	abs_movedir[2] = fabs(ent->movedir[2]);
ADDRFP4 0
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
ARGF4
ADDRLP4 56
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 56
INDIRF4
ASGNF4
line 945
;945:	VectorSubtract(ent->r.maxs, ent->r.mins, size);
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 60
INDIRP4
CNSTI4 448
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
CNSTI4 436
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 60
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
CNSTI4 440
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 64
INDIRP4
CNSTI4 456
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 444
ADDP4
INDIRF4
SUBF4
ASGNF4
line 946
;946:	distance = DotProduct(abs_movedir, size) - lip;
ADDRLP4 24
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 28
INDIRF4
SUBF4
ASGNF4
line 947
;947:	VectorMA(ent->pos1, distance, ent->movedir, ent->pos2);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 612
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 632
ADDP4
ADDRLP4 76
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
line 950
;948:
;949:	// if "start_open", reverse position 1 and 2
;950:	if (ent->spawnflags & 1) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $430
line 953
;951:		vec3_t temp;
;952:
;953:		VectorCopy(ent->pos2, temp);
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRB
ASGNB 12
line 954
;954:		VectorCopy(ent->s.origin, ent->pos2);
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 92
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 955
;955:		VectorCopy(temp, ent->pos1);
ADDRFP4 0
INDIRP4
CNSTI4 612
ADDP4
ADDRLP4 80
INDIRB
ASGNB 12
line 956
;956:	}
LABELV $430
line 958
;957:
;958:	InitMover(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 960
;959:
;960:	ent->nextthink = level.time + FRAMETIME;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 962
;961:
;962:	if (!(ent->flags & FL_TEAMSLAVE)) {
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $433
line 965
;963:		int health;
;964:
;965:		G_SpawnInt("health", "0", &health);
ADDRGP4 $435
ARGP4
ADDRGP4 $436
ARGP4
ADDRLP4 80
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 966
;966:		if (health) {
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $437
line 967
;967:			ent->takedamage = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 1
ASGNI4
line 968
;968:		}
LABELV $437
line 969
;969:		if (ent->targetname || health) {
ADDRFP4 0
INDIRP4
CNSTI4 652
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $441
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $439
LABELV $441
line 971
;970:			// non touch/shoot doors
;971:			ent->think = Think_MatchTeam;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 Think_MatchTeam
ASGNP4
line 972
;972:		} else {
ADDRGP4 $440
JUMPV
LABELV $439
line 973
;973:			ent->think = Think_SpawnNewDoorTrigger;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 Think_SpawnNewDoorTrigger
ASGNP4
line 974
;974:		}
LABELV $440
line 975
;975:	}
LABELV $433
line 976
;976:}
LABELV $409
endproc SP_func_door 96 12
export Touch_Plat
proc Touch_Plat 4 0
line 993
;977:
;978:/*
;979:===============================================================================
;980:
;981:PLAT
;982:
;983:===============================================================================
;984:*/
;985:
;986:/*
;987:==============
;988:Touch_Plat
;989:
;990:Don't allow decent if a living player is on it
;991:===============
;992:*/
;993:void Touch_Plat(gentity_t* ent, gentity_t* other, trace_t* trace) {
line 994
;994:	if (!other->client || other->client->ps.stats[STAT_HEALTH] <= 0) {
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $445
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $443
LABELV $445
line 995
;995:		return;
ADDRGP4 $442
JUMPV
LABELV $443
line 999
;996:	}
;997:
;998:	// delay return-to-pos1 by one second
;999:	if (ent->moverState == MOVER_POS2) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 1
NEI4 $446
line 1000
;1000:		ent->nextthink = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1001
;1001:	}
LABELV $446
line 1002
;1002:}
LABELV $442
endproc Touch_Plat 4 0
export Touch_PlatCenterTrigger
proc Touch_PlatCenterTrigger 4 12
line 1011
;1003:
;1004:/*
;1005:==============
;1006:Touch_PlatCenterTrigger
;1007:
;1008:If the plat is at the bottom position, start it going up
;1009:===============
;1010:*/
;1011:void Touch_PlatCenterTrigger(gentity_t* ent, gentity_t* other, trace_t* trace) {
line 1012
;1012:	if (!other->client) {
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $450
line 1013
;1013:		return;
ADDRGP4 $449
JUMPV
LABELV $450
line 1016
;1014:	}
;1015:
;1016:	if (ent->parent->moverState == MOVER_POS1) {
ADDRFP4 0
INDIRP4
CNSTI4 600
ADDP4
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 0
NEI4 $452
line 1017
;1017:		Use_BinaryMover(ent->parent, ent, other);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 1018
;1018:	}
LABELV $452
line 1019
;1019:}
LABELV $449
endproc Touch_PlatCenterTrigger 4 12
export SpawnPlatTrigger
proc SpawnPlatTrigger 60 4
line 1030
;1020:
;1021:/*
;1022:================
;1023:SpawnPlatTrigger
;1024:
;1025:Spawn a trigger in the middle of the plat's low position
;1026:Elevator cars require that the trigger extend through the entire low position,
;1027:not just sit on top of it.
;1028:================
;1029:*/
;1030:void SpawnPlatTrigger(gentity_t* ent) {
line 1036
;1031:	gentity_t* trigger;
;1032:	vec3_t     tmin, tmax;
;1033:
;1034:	// the middle trigger will be a thin trigger just
;1035:	// above the starting position
;1036:	trigger             = G_Spawn();
ADDRLP4 28
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 1037
;1037:	trigger->classname  = "plat_trigger";
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $455
ASGNP4
line 1038
;1038:	trigger->touch      = Touch_PlatCenterTrigger;
ADDRLP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 Touch_PlatCenterTrigger
ASGNP4
line 1039
;1039:	trigger->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 1073741824
ASGNI4
line 1040
;1040:	trigger->parent     = ent;
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1042
;1041:
;1042:	tmin[0] = ent->pos1[0] + ent->r.mins[0] + 33;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 32
INDIRP4
CNSTI4 612
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 436
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
ADDF4
ASGNF4
line 1043
;1043:	tmin[1] = ent->pos1[1] + ent->r.mins[1] + 33;
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+4
ADDRLP4 36
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 440
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
ADDF4
ASGNF4
line 1044
;1044:	tmin[2] = ent->pos1[2] + ent->r.mins[2];
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+8
ADDRLP4 40
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 444
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1046
;1045:
;1046:	tmax[0] = ent->pos1[0] + ent->r.maxs[0] - 33;
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 44
INDIRP4
CNSTI4 612
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 448
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
SUBF4
ASGNF4
line 1047
;1047:	tmax[1] = ent->pos1[1] + ent->r.maxs[1] - 33;
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16+4
ADDRLP4 48
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
SUBF4
ASGNF4
line 1048
;1048:	tmax[2] = ent->pos1[2] + ent->r.maxs[2] + 8;
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16+8
ADDRLP4 52
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 456
ADDP4
INDIRF4
ADDF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 1050
;1049:
;1050:	if (tmax[0] <= tmin[0]) {
ADDRLP4 16
INDIRF4
ADDRLP4 4
INDIRF4
GTF4 $460
line 1051
;1051:		tmin[0] = ent->pos1[0] + (ent->r.mins[0] + ent->r.maxs[0]) * 0.5;
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 56
INDIRP4
CNSTI4 612
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 436
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 448
ADDP4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 1052
;1052:		tmax[0] = tmin[0] + 1;
ADDRLP4 16
ADDRLP4 4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1053
;1053:	}
LABELV $460
line 1054
;1054:	if (tmax[1] <= tmin[1]) {
ADDRLP4 16+4
INDIRF4
ADDRLP4 4+4
INDIRF4
GTF4 $462
line 1055
;1055:		tmin[1] = ent->pos1[1] + (ent->r.mins[1] + ent->r.maxs[1]) * 0.5;
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+4
ADDRLP4 56
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 440
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 1056
;1056:		tmax[1] = tmin[1] + 1;
ADDRLP4 16+4
ADDRLP4 4+4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1057
;1057:	}
LABELV $462
line 1059
;1058:
;1059:	VectorCopy(tmin, trigger->r.mins);
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 1060
;1060:	VectorCopy(tmax, trigger->r.maxs);
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
ADDRLP4 16
INDIRB
ASGNB 12
line 1062
;1061:
;1062:	trap_LinkEntity(trigger);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1063
;1063:}
LABELV $454
endproc SpawnPlatTrigger 60 4
export SP_func_plat
proc SP_func_plat 48 12
line 1076
;1064:
;1065:/*QUAKED func_plat (0 .5 .8) ?
;1066:Plats are always drawn in the extended position so they will light correctly.
;1067:
;1068:"lip"		default 8, protrusion above rest position
;1069:"height"	total height of movement, defaults to model height
;1070:"speed"		overrides default 200.
;1071:"dmg"		overrides default 2
;1072:"model2"	.md3 model to also draw
;1073:"color"		constantLight color
;1074:"light"		constantLight radius
;1075:*/
;1076:void SP_func_plat(gentity_t* ent) {
line 1079
;1077:	float lip, height;
;1078:
;1079:	ent->sound1to2 = ent->sound2to1 = G_SoundIndex("sound/movers/plats/pt1_strt.wav");
ADDRGP4 $470
ARGP4
ADDRLP4 8
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 588
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 584
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 1080
;1080:	ent->soundPos1 = ent->soundPos2 = G_SoundIndex("sound/movers/plats/pt1_end.wav");
ADDRGP4 $471
ARGP4
ADDRLP4 16
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 592
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
ADDRLP4 20
INDIRP4
CNSTI4 580
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1082
;1081:
;1082:	VectorClear(ent->s.angles);
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 0
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 0
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTF4 0
ASGNF4
line 1084
;1083:
;1084:	G_SpawnFloat("speed", "200", &ent->speed);
ADDRGP4 $472
ARGP4
ADDRGP4 $473
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1085
;1085:	G_SpawnInt("dmg", "2", &ent->damage);
ADDRGP4 $420
ARGP4
ADDRGP4 $421
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1086
;1086:	G_SpawnFloat("wait", "1", &ent->wait);
ADDRGP4 $474
ARGP4
ADDRGP4 $475
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1087
;1087:	G_SpawnFloat("lip", "8", &lip);
ADDRGP4 $418
ARGP4
ADDRGP4 $419
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1089
;1088:
;1089:	ent->wait = 1000;
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
CNSTF4 1148846080
ASGNF4
line 1092
;1090:
;1091:	// create second position
;1092:	trap_SetBrushModel(ent, ent->model);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
CNSTI4 540
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1094
;1093:
;1094:	if (!G_SpawnFloat("height", "0", &height)) {
ADDRGP4 $478
ARGP4
ADDRGP4 $436
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 28
ADDRGP4 G_SpawnFloat
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $476
line 1095
;1095:		height = (ent->r.maxs[2] - ent->r.mins[2]) - lip;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
CNSTI4 456
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 444
ADDP4
INDIRF4
SUBF4
ADDRLP4 4
INDIRF4
SUBF4
ASGNF4
line 1096
;1096:	}
LABELV $476
line 1099
;1097:
;1098:	// pos1 is the rest (bottom) position, pos2 is the top
;1099:	VectorCopy(ent->s.origin, ent->pos2);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1100
;1100:	VectorCopy(ent->pos2, ent->pos1);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 612
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 624
ADDP4
INDIRB
ASGNB 12
line 1101
;1101:	ent->pos1[2] -= height;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 620
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
line 1103
;1102:
;1103:	InitMover(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1107
;1104:
;1105:	// touch function keeps the plat from returning while
;1106:	// a live player is standing on it
;1107:	ent->touch = Touch_Plat;
ADDRFP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 Touch_Plat
ASGNP4
line 1109
;1108:
;1109:	ent->blocked = Blocked_Door;
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
ADDRGP4 Blocked_Door
ASGNP4
line 1111
;1110:
;1111:	ent->parent = ent;  // so it can be treated as a door
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 600
ADDP4
ADDRLP4 44
INDIRP4
ASGNP4
line 1114
;1112:
;1113:	// spawn the trigger if one hasn't been custom made
;1114:	if (!ent->targetname) {
ADDRFP4 0
INDIRP4
CNSTI4 652
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $479
line 1115
;1115:		SpawnPlatTrigger(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 SpawnPlatTrigger
CALLV
pop
line 1116
;1116:	}
LABELV $479
line 1117
;1117:}
LABELV $469
endproc SP_func_plat 48 12
export Touch_Button
proc Touch_Button 4 12
line 1133
;1118:
;1119:/*
;1120:===============================================================================
;1121:
;1122:BUTTON
;1123:
;1124:===============================================================================
;1125:*/
;1126:
;1127:/*
;1128:==============
;1129:Touch_Button
;1130:
;1131:===============
;1132:*/
;1133:void Touch_Button(gentity_t* ent, gentity_t* other, trace_t* trace) {
line 1134
;1134:	if (!other->client) {
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $482
line 1135
;1135:		return;
ADDRGP4 $481
JUMPV
LABELV $482
line 1138
;1136:	}
;1137:
;1138:	if (ent->moverState == MOVER_POS1) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 0
NEI4 $484
line 1139
;1139:		Use_BinaryMover(ent, other, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 1140
;1140:	}
LABELV $484
line 1141
;1141:}
LABELV $481
endproc Touch_Button 4 12
export SP_func_button
proc SP_func_button 84 12
line 1157
;1142:
;1143:/*QUAKED func_button (0 .5 .8) ?
;1144:When a button is touched, it moves some distance in the direction of its angle, triggers all of its targets, waits some time, then returns to its original
;1145:position where it can be triggered again.
;1146:
;1147:"model2"	.md3 model to also draw
;1148:"angle"		determines the opening direction
;1149:"target"	all entities with a matching targetname will be used
;1150:"speed"		override the default 40 speed
;1151:"wait"		override the default 1 second wait (-1 = never return)
;1152:"lip"		override the default 4 pixel lip remaining at end of move
;1153:"health"	if set, the button must be killed instead of touched
;1154:"color"		constantLight color
;1155:"light"		constantLight radius
;1156:*/
;1157:void SP_func_button(gentity_t* ent) {
line 1163
;1158:	vec3_t abs_movedir;
;1159:	float  distance;
;1160:	vec3_t size;
;1161:	float  lip;
;1162:
;1163:	ent->sound1to2 = G_SoundIndex("sound/movers/switches/butn2.wav");
ADDRGP4 $487
ARGP4
ADDRLP4 32
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 584
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 1165
;1164:
;1165:	if (!ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
NEF4 $488
line 1166
;1166:		ent->speed = 40;
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
CNSTF4 1109393408
ASGNF4
line 1167
;1167:	}
LABELV $488
line 1169
;1168:
;1169:	if (!ent->wait) {
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRF4
CNSTF4 0
NEF4 $490
line 1170
;1170:		ent->wait = 1;
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
CNSTF4 1065353216
ASGNF4
line 1171
;1171:	}
LABELV $490
line 1172
;1172:	ent->wait *= 1000;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1148846080
MULF4
ASGNF4
line 1175
;1173:
;1174:	// first position
;1175:	VectorCopy(ent->s.origin, ent->pos1);
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 612
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1178
;1176:
;1177:	// calculate second position
;1178:	trap_SetBrushModel(ent, ent->model);
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
ARGP4
ADDRLP4 44
INDIRP4
CNSTI4 540
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1180
;1179:
;1180:	G_SpawnFloat("lip", "4", &lip);
ADDRGP4 $418
ARGP4
ADDRGP4 $492
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1182
;1181:
;1182:	G_SetMovedir(ent->s.angles, ent->movedir);
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 116
ADDP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 676
ADDP4
ARGP4
ADDRGP4 G_SetMovedir
CALLV
pop
line 1183
;1183:	abs_movedir[0] = fabs(ent->movedir[0]);
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ARGF4
ADDRLP4 52
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 52
INDIRF4
ASGNF4
line 1184
;1184:	abs_movedir[1] = fabs(ent->movedir[1]);
ADDRFP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
ARGF4
ADDRLP4 56
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 56
INDIRF4
ASGNF4
line 1185
;1185:	abs_movedir[2] = fabs(ent->movedir[2]);
ADDRFP4 0
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
ARGF4
ADDRLP4 60
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 60
INDIRF4
ASGNF4
line 1186
;1186:	VectorSubtract(ent->r.maxs, ent->r.mins, size);
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 64
INDIRP4
CNSTI4 448
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 436
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 64
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 440
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 68
INDIRP4
CNSTI4 456
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 444
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1187
;1187:	distance = abs_movedir[0] * size[0] + abs_movedir[1] * size[1] + abs_movedir[2] * size[2] - lip;
ADDRLP4 24
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 28
INDIRF4
SUBF4
ASGNF4
line 1188
;1188:	VectorMA(ent->pos1, distance, ent->movedir, ent->pos2);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 612
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 76
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 632
ADDP4
ADDRLP4 80
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
line 1190
;1189:
;1190:	if (ent->health) {
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRI4
CNSTI4 0
EQI4 $501
line 1192
;1191:		// shootable button
;1192:		ent->takedamage = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 1
ASGNI4
line 1193
;1193:	} else {
ADDRGP4 $502
JUMPV
LABELV $501
line 1195
;1194:		// touchable button
;1195:		ent->touch = Touch_Button;
ADDRFP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 Touch_Button
ASGNP4
line 1196
;1196:	}
LABELV $502
line 1198
;1197:
;1198:	InitMover(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1199
;1199:}
LABELV $486
endproc SP_func_button 84 12
export Think_BeginMoving
proc Think_BeginMoving 0 0
line 1220
;1200:
;1201:/*
;1202:===============================================================================
;1203:
;1204:TRAIN
;1205:
;1206:===============================================================================
;1207:*/
;1208:
;1209:#define TRAIN_START_ON    1
;1210:#define TRAIN_TOGGLE      2
;1211:#define TRAIN_BLOCK_STOPS 4
;1212:
;1213:/*
;1214:===============
;1215:Think_BeginMoving
;1216:
;1217:The wait time at a corner has completed, so start moving again
;1218:===============
;1219:*/
;1220:void Think_BeginMoving(gentity_t* ent) {
line 1221
;1221:	ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1222
;1222:	ent->s.pos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 3
ASGNI4
line 1223
;1223:}
LABELV $503
endproc Think_BeginMoving 0 0
export Reached_Train
proc Reached_Train 40 12
line 1230
;1224:
;1225:/*
;1226:===============
;1227:Reached_Train
;1228:===============
;1229:*/
;1230:void Reached_Train(gentity_t* ent) {
line 1237
;1231:	gentity_t* next;
;1232:	float      speed;
;1233:	vec3_t     move;
;1234:	float      length;
;1235:
;1236:	// copy the apropriate values
;1237:	next = ent->nextTrain;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
ASGNP4
line 1238
;1238:	if (!next || !next->nextTrain) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $508
ADDRLP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $506
LABELV $508
line 1239
;1239:		return;  // just stop
ADDRGP4 $505
JUMPV
LABELV $506
line 1243
;1240:	}
;1241:
;1242:	// fire all other targets
;1243:	G_UseTargets(next, NULL);
ADDRLP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 1246
;1244:
;1245:	// set the new trajectory
;1246:	ent->nextTrain = next->nextTrain;
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
ASGNP4
line 1247
;1247:	VectorCopy(next->s.origin, ent->pos1);
ADDRFP4 0
INDIRP4
CNSTI4 612
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1248
;1248:	VectorCopy(next->nextTrain->s.origin, ent->pos2);
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1251
;1249:
;1250:	// if the path_corner has a speed, use that
;1251:	if (next->speed) {
ADDRLP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
EQF4 $509
line 1252
;1252:		speed = next->speed;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
ASGNF4
line 1253
;1253:	} else {
ADDRGP4 $510
JUMPV
LABELV $509
line 1255
;1254:		// otherwise use the train's speed
;1255:		speed = ent->speed;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
ASGNF4
line 1256
;1256:	}
LABELV $510
line 1257
;1257:	if (speed < 1) {
ADDRLP4 16
INDIRF4
CNSTF4 1065353216
GEF4 $511
line 1258
;1258:		speed = 1;
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
line 1259
;1259:	}
LABELV $511
line 1262
;1260:
;1261:	// calculate duration
;1262:	VectorSubtract(ent->pos2, ent->pos1, move);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 28
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 612
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 28
INDIRP4
CNSTI4 628
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+8
ADDRLP4 32
INDIRP4
CNSTI4 632
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1263
;1263:	length = VectorLength(move);
ADDRLP4 4
ARGP4
ADDRLP4 36
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 36
INDIRF4
ASGNF4
line 1265
;1264:
;1265:	ent->s.pos.trDuration = length * 1000 / speed;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 20
INDIRF4
CNSTF4 1148846080
MULF4
ADDRLP4 16
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 1268
;1266:
;1267:	// looping sound
;1268:	ent->s.loopSound = next->soundLoop;
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
ASGNI4
line 1271
;1269:
;1270:	// start it going
;1271:	SetMoverState(ent, MOVER_1TO2, level.time);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 1274
;1272:
;1273:	// if there is a "wait" value on the target, don't start moving yet
;1274:	if (next->wait) {
ADDRLP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRF4
CNSTF4 0
EQF4 $516
line 1275
;1275:		ent->nextthink    = level.time + next->wait * 1000;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRF4
CNSTF4 1148846080
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1276
;1276:		ent->think        = Think_BeginMoving;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 Think_BeginMoving
ASGNP4
line 1277
;1277:		ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 1278
;1278:	}
LABELV $516
line 1279
;1279:}
LABELV $505
endproc Reached_Train 40 12
export Think_SetupTrainTargets
proc Think_SetupTrainTargets 28 12
line 1288
;1280:
;1281:/*
;1282:===============
;1283:Think_SetupTrainTargets
;1284:
;1285:Link all the corners together
;1286:===============
;1287:*/
;1288:void Think_SetupTrainTargets(gentity_t* ent) {
line 1291
;1289:	gentity_t *path, *next, *start;
;1290:
;1291:	ent->nextTrain = G_Find(NULL, FOFS(targetname), ent->target);
CNSTP4 0
ARGP4
CNSTI4 652
ARGI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 604
ADDP4
ADDRLP4 16
INDIRP4
ASGNP4
line 1292
;1292:	if (!ent->nextTrain) {
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $520
line 1293
;1293:		G_Printf("func_train at %s with an unfound target\n", vtos(ent->r.absmin));
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $522
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1294
;1294:		return;
ADDRGP4 $519
JUMPV
LABELV $520
line 1297
;1295:	}
;1296:
;1297:	start = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 1298
;1298:	for (path = ent->nextTrain; path != start; path = next) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $526
JUMPV
LABELV $523
line 1299
;1299:		if (!start) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $527
line 1300
;1300:			start = path;
ADDRLP4 8
ADDRLP4 4
INDIRP4
ASGNP4
line 1301
;1301:		}
LABELV $527
line 1303
;1302:
;1303:		if (!path->target) {
ADDRLP4 4
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $529
line 1304
;1304:			G_Printf("Train corner at %s without a target\n", vtos(path->s.origin));
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $531
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1305
;1305:			return;
ADDRGP4 $519
JUMPV
LABELV $529
line 1311
;1306:		}
;1307:
;1308:		// find a path_corner among the targets
;1309:		// there may also be other targets that get fired when the corner
;1310:		// is reached
;1311:		next = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
LABELV $532
line 1312
;1312:		do {
line 1313
;1313:			next = G_Find(next, FOFS(targetname), path->target);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 652
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 1314
;1314:			if (!next) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $535
line 1315
;1315:				G_Printf("Train corner at %s without a target path_corner\n", vtos(path->s.origin));
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 24
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $537
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1316
;1316:				return;
ADDRGP4 $519
JUMPV
LABELV $535
line 1318
;1317:			}
;1318:		} while (strcmp(next->classname, "path_corner"));
LABELV $533
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $538
ARGP4
ADDRLP4 20
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $532
line 1320
;1319:
;1320:		path->nextTrain = next;
ADDRLP4 4
INDIRP4
CNSTI4 604
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1321
;1321:	}
LABELV $524
line 1298
ADDRLP4 4
ADDRLP4 0
INDIRP4
ASGNP4
LABELV $526
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
NEU4 $523
line 1324
;1322:
;1323:	// start the train moving from the first corner
;1324:	Reached_Train(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Reached_Train
CALLV
pop
line 1325
;1325:}
LABELV $519
endproc Think_SetupTrainTargets 28 12
export SP_path_corner
proc SP_path_corner 4 8
line 1333
;1326:
;1327:/*QUAKED path_corner (.5 .3 0) (-8 -8 -8) (8 8 8)
;1328:Train path corners.
;1329:Target: next path corner and other targets to fire
;1330:"speed" speed to move to the next corner
;1331:"wait" seconds to wait before behining move to next corner
;1332:*/
;1333:void SP_path_corner(gentity_t* self) {
line 1334
;1334:	if (!self->targetname) {
ADDRFP4 0
INDIRP4
CNSTI4 652
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $540
line 1335
;1335:		G_Printf("path_corner with no targetname at %s\n", vtos(self->s.origin));
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 0
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $542
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1336
;1336:		G_FreeEntity(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1337
;1337:		return;
LABELV $540
line 1340
;1338:	}
;1339:	// path corners don't need to be linked in
;1340:}
LABELV $539
endproc SP_path_corner 4 8
export SP_func_train
proc SP_func_train 4 8
line 1354
;1341:
;1342:/*QUAKED func_train (0 .5 .8) ? START_ON TOGGLE BLOCK_STOPS
;1343:A train is a mover that moves between path_corner target points.
;1344:Trains MUST HAVE AN ORIGIN BRUSH.
;1345:The train spawns at the first target it is pointing at.
;1346:"model2"	.md3 model to also draw
;1347:"speed"		default 100
;1348:"dmg"		default	2
;1349:"noise"		looping sound to play when the train is in motion
;1350:"target"	next path corner
;1351:"color"		constantLight color
;1352:"light"		constantLight radius
;1353:*/
;1354:void SP_func_train(gentity_t* self) {
line 1355
;1355:	VectorClear(self->s.angles);
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 0
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 0
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTF4 0
ASGNF4
line 1357
;1356:
;1357:	if (self->spawnflags & TRAIN_BLOCK_STOPS) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $544
line 1358
;1358:		self->damage = 0;
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTI4 0
ASGNI4
line 1359
;1359:	} else {
ADDRGP4 $545
JUMPV
LABELV $544
line 1360
;1360:		if (!self->damage) {
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
INDIRI4
CNSTI4 0
NEI4 $546
line 1361
;1361:			self->damage = 2;
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTI4 2
ASGNI4
line 1362
;1362:		}
LABELV $546
line 1363
;1363:	}
LABELV $545
line 1365
;1364:
;1365:	if (!self->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
NEF4 $548
line 1366
;1366:		self->speed = 100;
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
CNSTF4 1120403456
ASGNF4
line 1367
;1367:	}
LABELV $548
line 1369
;1368:
;1369:	if (!self->target) {
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $550
line 1370
;1370:		G_Printf("func_train without a target at %s\n", vtos(self->r.absmin));
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ARGP4
ADDRLP4 0
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $552
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1371
;1371:		G_FreeEntity(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1372
;1372:		return;
ADDRGP4 $543
JUMPV
LABELV $550
line 1375
;1373:	}
;1374:
;1375:	trap_SetBrushModel(self, self->model);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 540
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1376
;1376:	InitMover(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1378
;1377:
;1378:	self->reached = Reached_Train;
ADDRFP4 0
INDIRP4
CNSTI4 696
ADDP4
ADDRGP4 Reached_Train
ASGNP4
line 1382
;1379:
;1380:	// start trains on the second frame, to make sure their targets have had
;1381:	// a chance to spawn
;1382:	self->nextthink = level.time + FRAMETIME;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1383
;1383:	self->think     = Think_SetupTrainTargets;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 Think_SetupTrainTargets
ASGNP4
line 1384
;1384:}
LABELV $543
endproc SP_func_train 4 8
export SP_func_static
proc SP_func_static 12 8
line 1400
;1385:
;1386:/*
;1387:===============================================================================
;1388:
;1389:STATIC
;1390:
;1391:===============================================================================
;1392:*/
;1393:
;1394:/*QUAKED func_static (0 .5 .8) ?
;1395:A bmodel that just sits there, doing nothing.  Can be used for conditional walls and models.
;1396:"model2"	.md3 model to also draw
;1397:"color"		constantLight color
;1398:"light"		constantLight radius
;1399:*/
;1400:void SP_func_static(gentity_t* ent) {
line 1401
;1401:	trap_SetBrushModel(ent, ent->model);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 540
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1402
;1402:	InitMover(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1403
;1403:	VectorCopy(ent->s.origin, ent->s.pos.trBase);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1404
;1404:	VectorCopy(ent->s.origin, ent->r.currentOrigin);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1405
;1405:}
LABELV $554
endproc SP_func_static 12 8
export SP_func_rotating
proc SP_func_rotating 16 8
line 1426
;1406:
;1407:/*
;1408:===============================================================================
;1409:
;1410:ROTATING
;1411:
;1412:===============================================================================
;1413:*/
;1414:
;1415:/*QUAKED func_rotating (0 .5 .8) ? START_ON - X_AXIS Y_AXIS
;1416:You need to have an origin brush as part of this entity.  The center of that brush will be
;1417:the point around which it is rotated. It will rotate around the Z axis by default.  You can
;1418:check either the X_AXIS or Y_AXIS box to change that.
;1419:
;1420:"model2"	.md3 model to also draw
;1421:"speed"		determines how fast it moves; default value is 100.
;1422:"dmg"		damage to inflict when blocked (2 default)
;1423:"color"		constantLight color
;1424:"light"		constantLight radius
;1425:*/
;1426:void SP_func_rotating(gentity_t* ent) {
line 1427
;1427:	if (!ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 0
NEF4 $556
line 1428
;1428:		ent->speed = 100;
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
CNSTF4 1120403456
ASGNF4
line 1429
;1429:	}
LABELV $556
line 1432
;1430:
;1431:	// set the axis of rotation
;1432:	ent->s.apos.trType = TR_LINEAR;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
line 1433
;1433:	if (ent->spawnflags & 4) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $558
line 1434
;1434:		ent->s.apos.trDelta[2] = ent->speed;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
ASGNF4
line 1435
;1435:	} else if (ent->spawnflags & 8) {
ADDRGP4 $559
JUMPV
LABELV $558
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $560
line 1436
;1436:		ent->s.apos.trDelta[0] = ent->speed;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
ASGNF4
line 1437
;1437:	} else {
ADDRGP4 $561
JUMPV
LABELV $560
line 1438
;1438:		ent->s.apos.trDelta[1] = ent->speed;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
ASGNF4
line 1439
;1439:	}
LABELV $561
LABELV $559
line 1441
;1440:
;1441:	if (!ent->damage) {
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
INDIRI4
CNSTI4 0
NEI4 $562
line 1442
;1442:		ent->damage = 2;
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTI4 2
ASGNI4
line 1443
;1443:	}
LABELV $562
line 1445
;1444:
;1445:	trap_SetBrushModel(ent, ent->model);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 540
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1446
;1446:	InitMover(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1448
;1447:
;1448:	VectorCopy(ent->s.origin, ent->s.pos.trBase);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1449
;1449:	VectorCopy(ent->s.pos.trBase, ent->r.currentOrigin);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1450
;1450:	VectorCopy(ent->s.apos.trBase, ent->r.currentAngles);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 500
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
INDIRB
ASGNB 12
line 1452
;1451:
;1452:	trap_LinkEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1453
;1453:}
LABELV $555
endproc SP_func_rotating 16 8
export SP_func_bobbing
proc SP_func_bobbing 28 12
line 1473
;1454:
;1455:/*
;1456:===============================================================================
;1457:
;1458:BOBBING
;1459:
;1460:===============================================================================
;1461:*/
;1462:
;1463:/*QUAKED func_bobbing (0 .5 .8) ? X_AXIS Y_AXIS
;1464:Normally bobs on the Z axis
;1465:"model2"	.md3 model to also draw
;1466:"height"	amplitude of bob (32 default)
;1467:"speed"		seconds to complete a bob cycle (4 default)
;1468:"phase"		the 0.0 to 1.0 offset in the cycle to start at
;1469:"dmg"		damage to inflict when blocked (2 default)
;1470:"color"		constantLight color
;1471:"light"		constantLight radius
;1472:*/
;1473:void SP_func_bobbing(gentity_t* ent) {
line 1477
;1474:	float height;
;1475:	float phase;
;1476:
;1477:	G_SpawnFloat("speed", "4", &ent->speed);
ADDRGP4 $472
ARGP4
ADDRGP4 $492
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1478
;1478:	G_SpawnFloat("height", "32", &height);
ADDRGP4 $478
ARGP4
ADDRGP4 $565
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1479
;1479:	G_SpawnInt("dmg", "2", &ent->damage);
ADDRGP4 $420
ARGP4
ADDRGP4 $421
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1480
;1480:	G_SpawnFloat("phase", "0", &phase);
ADDRGP4 $566
ARGP4
ADDRGP4 $436
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1482
;1481:
;1482:	trap_SetBrushModel(ent, ent->model);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 540
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1483
;1483:	InitMover(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1485
;1484:
;1485:	VectorCopy(ent->s.origin, ent->s.pos.trBase);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1486
;1486:	VectorCopy(ent->s.origin, ent->r.currentOrigin);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1488
;1487:
;1488:	ent->s.pos.trDuration = ent->speed * 1000;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
CNSTF4 1148846080
MULF4
CVFI4 4
ASGNI4
line 1489
;1489:	ent->s.pos.trTime     = ent->s.pos.trDuration * phase;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1490
;1490:	ent->s.pos.trType     = TR_SINE;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 4
ASGNI4
line 1493
;1491:
;1492:	// set the axis of bobbing
;1493:	if (ent->spawnflags & 1) {
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $567
line 1494
;1494:		ent->s.pos.trDelta[0] = height;
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ASGNF4
line 1495
;1495:	} else if (ent->spawnflags & 2) {
ADDRGP4 $568
JUMPV
LABELV $567
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $569
line 1496
;1496:		ent->s.pos.trDelta[1] = height;
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0
INDIRF4
ASGNF4
line 1497
;1497:	} else {
ADDRGP4 $570
JUMPV
LABELV $569
line 1498
;1498:		ent->s.pos.trDelta[2] = height;
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0
INDIRF4
ASGNF4
line 1499
;1499:	}
LABELV $570
LABELV $568
line 1500
;1500:}
LABELV $564
endproc SP_func_bobbing 28 12
export SP_func_pendulum
proc SP_func_pendulum 44 12
line 1521
;1501:
;1502:/*
;1503:===============================================================================
;1504:
;1505:PENDULUM
;1506:
;1507:===============================================================================
;1508:*/
;1509:
;1510:/*QUAKED func_pendulum (0 .5 .8) ?
;1511:You need to have an origin brush as part of this entity.
;1512:Pendulums always swing north / south on unrotated models.  Add an angles field to the model to allow rotation in other directions.
;1513:Pendulum frequency is a physical constant based on the length of the beam and gravity.
;1514:"model2"	.md3 model to also draw
;1515:"speed"		the number of degrees each way the pendulum swings, (30 default)
;1516:"phase"		the 0.0 to 1.0 offset in the cycle to start at
;1517:"dmg"		damage to inflict when blocked (2 default)
;1518:"color"		constantLight color
;1519:"light"		constantLight radius
;1520:*/
;1521:void SP_func_pendulum(gentity_t* ent) {
line 1527
;1522:	float freq;
;1523:	float length;
;1524:	float phase;
;1525:	float speed;
;1526:
;1527:	G_SpawnFloat("speed", "30", &speed);
ADDRGP4 $472
ARGP4
ADDRGP4 $572
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1528
;1528:	G_SpawnInt("dmg", "2", &ent->damage);
ADDRGP4 $420
ARGP4
ADDRGP4 $421
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1529
;1529:	G_SpawnFloat("phase", "0", &phase);
ADDRGP4 $566
ARGP4
ADDRGP4 $436
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1531
;1530:
;1531:	trap_SetBrushModel(ent, ent->model);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 540
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1534
;1532:
;1533:	// find pendulum length
;1534:	length = fabs(ent->r.mins[2]);
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 20
INDIRF4
ASGNF4
line 1535
;1535:	if (length < 8) {
ADDRLP4 0
INDIRF4
CNSTF4 1090519040
GEF4 $573
line 1536
;1536:		length = 8;
ADDRLP4 0
CNSTF4 1090519040
ASGNF4
line 1537
;1537:	}
LABELV $573
line 1539
;1538:
;1539:	freq = 1 / (M_PI * 2) * sqrt(g_gravity.value / (3 * length));
ADDRGP4 g_gravity+8
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1077936128
MULF4
DIVF4
ARGF4
ADDRLP4 24
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 24
INDIRF4
CNSTF4 1042479491
MULF4
ASGNF4
line 1541
;1540:
;1541:	ent->s.pos.trDuration = (1000 / freq);
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTF4 1148846080
ADDRLP4 4
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 1543
;1542:
;1543:	InitMover(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1545
;1544:
;1545:	VectorCopy(ent->s.origin, ent->s.pos.trBase);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1546
;1546:	VectorCopy(ent->s.origin, ent->r.currentOrigin);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1548
;1547:
;1548:	VectorCopy(ent->s.angles, ent->s.apos.trBase);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 116
ADDP4
INDIRB
ASGNB 12
line 1550
;1549:
;1550:	ent->s.apos.trDuration = 1000 / freq;
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1148846080
ADDRLP4 4
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 1551
;1551:	ent->s.apos.trTime     = ent->s.apos.trDuration * phase;
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1552
;1552:	ent->s.apos.trType     = TR_SINE;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 4
ASGNI4
line 1553
;1553:	ent->s.apos.trDelta[2] = speed;
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 1554
;1554:}
LABELV $571
endproc SP_func_pendulum 44 12
import G_ExplodeMissile
bss
export pushed_p
align 4
LABELV pushed_p
skip 4
export pushed
align 4
LABELV pushed
skip 32768
import svf_self_portal2
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_TraceCapsule
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Print
import phy_movetype
import g_proxMineTimeout
import g_singlePlayer
import g_enableBreath
import g_enableDust
import g_predictPVS
import g_unlagged
import g_rotation
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_blueteam
import g_redteam
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_autoJoin
import g_allowVote
import g_blood
import g_warmup
import g_motd
import g_synchronousClients
import g_weaponTeamRespawn
import g_weaponRespawn
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_inactivity
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_gravity
import g_needpass
import g_password
import g_friendlyFire
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_dmflags
import g_maxGameClients
import g_cheats
import g_dedicated
import sv_fps
import g_mapname
import g_gametype
import g_entities
import level
import AddTeamScore
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import G_MapExist
import G_LoadMap
import ParseMapRotation
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import Svcmd_AbortPodium_f
import SpawnModelsOnVictoryPads
import UpdateTournamentInfo
import G_ClearClientSessionData
import G_WriteClientSessionData
import G_ReadClientSessionData
import G_InitSessionData
import G_WriteSessionData
import G_InitWorldSession
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import Team_ResetFlags
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_RunClient
import ClientEndFrame
import ClientThink
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_BroadcastServerCommand
import G_Error
import G_Printf
import G_LogPrintf
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import MoveClientToIntermission
import DeathmatchScoreboardMessage
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import BeginIntermission
import respawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import TeamConnectedCount
import TeamCount
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import TeleportPlayer
import trigger_teleporter_touch
import fire_grapple
import fire_bfg
import fire_rocket
import fire_grenade
import fire_plasma
import fire_blaster
import G_RunMissile
import TossClientCubes
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_Damage
import CanDamage
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vectoyaw
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_Sound
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import SpawnTime
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import G_RevertVote
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import VectorMAM
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $572
byte 1 51
byte 1 48
byte 1 0
align 1
LABELV $566
byte 1 112
byte 1 104
byte 1 97
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $565
byte 1 51
byte 1 50
byte 1 0
align 1
LABELV $552
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $542
byte 1 112
byte 1 97
byte 1 116
byte 1 104
byte 1 95
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 110
byte 1 111
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $538
byte 1 112
byte 1 97
byte 1 116
byte 1 104
byte 1 95
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $537
byte 1 84
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 32
byte 1 112
byte 1 97
byte 1 116
byte 1 104
byte 1 95
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 10
byte 1 0
align 1
LABELV $531
byte 1 84
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $522
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 97
byte 1 110
byte 1 32
byte 1 117
byte 1 110
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $492
byte 1 52
byte 1 0
align 1
LABELV $487
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 105
byte 1 116
byte 1 99
byte 1 104
byte 1 101
byte 1 115
byte 1 47
byte 1 98
byte 1 117
byte 1 116
byte 1 110
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $478
byte 1 104
byte 1 101
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 0
align 1
LABELV $475
byte 1 49
byte 1 0
align 1
LABELV $474
byte 1 119
byte 1 97
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $473
byte 1 50
byte 1 48
byte 1 48
byte 1 0
align 1
LABELV $472
byte 1 115
byte 1 112
byte 1 101
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $471
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 116
byte 1 115
byte 1 47
byte 1 112
byte 1 116
byte 1 49
byte 1 95
byte 1 101
byte 1 110
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $470
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 116
byte 1 115
byte 1 47
byte 1 112
byte 1 116
byte 1 49
byte 1 95
byte 1 115
byte 1 116
byte 1 114
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $455
byte 1 112
byte 1 108
byte 1 97
byte 1 116
byte 1 95
byte 1 116
byte 1 114
byte 1 105
byte 1 103
byte 1 103
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $436
byte 1 48
byte 1 0
align 1
LABELV $435
byte 1 104
byte 1 101
byte 1 97
byte 1 108
byte 1 116
byte 1 104
byte 1 0
align 1
LABELV $421
byte 1 50
byte 1 0
align 1
LABELV $420
byte 1 100
byte 1 109
byte 1 103
byte 1 0
align 1
LABELV $419
byte 1 56
byte 1 0
align 1
LABELV $418
byte 1 108
byte 1 105
byte 1 112
byte 1 0
align 1
LABELV $413
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 114
byte 1 49
byte 1 95
byte 1 101
byte 1 110
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $412
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 114
byte 1 49
byte 1 95
byte 1 115
byte 1 116
byte 1 114
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $405
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 95
byte 1 116
byte 1 114
byte 1 105
byte 1 103
byte 1 103
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $345
byte 1 49
byte 1 32
byte 1 49
byte 1 32
byte 1 49
byte 1 0
align 1
LABELV $344
byte 1 99
byte 1 111
byte 1 108
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $343
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 0
align 1
LABELV $342
byte 1 49
byte 1 48
byte 1 48
byte 1 0
align 1
LABELV $341
byte 1 110
byte 1 111
byte 1 105
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $305
byte 1 82
byte 1 101
byte 1 97
byte 1 99
byte 1 104
byte 1 101
byte 1 100
byte 1 95
byte 1 66
byte 1 105
byte 1 110
byte 1 97
byte 1 114
byte 1 121
byte 1 77
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 98
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 83
byte 1 116
byte 1 97
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $87
byte 1 112
byte 1 117
byte 1 115
byte 1 104
byte 1 101
byte 1 100
byte 1 95
byte 1 112
byte 1 32
byte 1 62
byte 1 32
byte 1 38
byte 1 112
byte 1 117
byte 1 115
byte 1 104
byte 1 101
byte 1 100
byte 1 91
byte 1 77
byte 1 65
byte 1 88
byte 1 95
byte 1 71
byte 1 69
byte 1 78
byte 1 84
byte 1 73
byte 1 84
byte 1 73
byte 1 69
byte 1 83
byte 1 93
byte 1 0
