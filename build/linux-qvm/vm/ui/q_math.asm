data
export vec3_origin
align 4
LABELV vec3_origin
byte 4 0
byte 4 0
byte 4 0
export axisDefault
align 4
LABELV axisDefault
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 0
byte 4 1065353216
export colorBlack
align 4
LABELV colorBlack
byte 4 0
byte 4 0
byte 4 0
byte 4 1065353216
export colorRed
align 4
LABELV colorRed
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1065353216
export colorGreen
align 4
LABELV colorGreen
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 1065353216
export colorBlue
align 4
LABELV colorBlue
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 1065353216
export colorYellow
align 4
LABELV colorYellow
byte 4 1065353216
byte 4 1065353216
byte 4 0
byte 4 1065353216
export colorMagenta
align 4
LABELV colorMagenta
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 1065353216
export colorCyan
align 4
LABELV colorCyan
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export colorWhite
align 4
LABELV colorWhite
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export colorLtGrey
align 4
LABELV colorLtGrey
byte 4 1061158912
byte 4 1061158912
byte 4 1061158912
byte 4 1065353216
export colorMdGrey
align 4
LABELV colorMdGrey
byte 4 1056964608
byte 4 1056964608
byte 4 1056964608
byte 4 1065353216
export colorDkGrey
align 4
LABELV colorDkGrey
byte 4 1048576000
byte 4 1048576000
byte 4 1048576000
byte 4 1065353216
export g_color_table
align 4
LABELV g_color_table
byte 4 0
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export bytedirs
align 4
LABELV bytedirs
byte 4 3204879951
byte 4 0
byte 4 1062847556
byte 4 3202531056
byte 4 1047828139
byte 4 1063074669
byte 4 3197577718
byte 4 0
byte 4 1064605338
byte 4 3198039930
byte 4 1056964608
byte 4 1062149053
byte 4 3190184938
byte 4 1049007711
byte 4 1064532072
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 1062847556
byte 4 1057396303
byte 4 3189189110
byte 4 1060597999
byte 4 1060013330
byte 4 1041705462
byte 4 1060597999
byte 4 1060013330
byte 4 0
byte 4 1057396303
byte 4 1062847556
byte 4 1050556282
byte 4 1056964608
byte 4 1062149053
byte 4 1057396303
byte 4 0
byte 4 1062847556
byte 4 1050094070
byte 4 0
byte 4 1064605338
byte 4 1055047408
byte 4 1047828139
byte 4 1063074669
byte 4 1042701290
byte 4 1049007711
byte 4 1064532072
byte 4 3207496978
byte 4 1041705462
byte 4 1060597999
byte 4 3209632701
byte 4 1050556282
byte 4 1056964608
byte 4 3205921044
byte 4 1054458931
byte 4 1060121929
byte 4 3210331204
byte 4 1057396303
byte 4 0
byte 4 3210558317
byte 4 1055047408
byte 4 1047828139
byte 4 3208081647
byte 4 1060013330
byte 4 1041705462
byte 4 3207605577
byte 4 1058437396
byte 4 1054458931
byte 4 3204448256
byte 4 1062149053
byte 4 1050556282
byte 4 3195311787
byte 4 1063074669
byte 4 1055047408
byte 4 3201942579
byte 4 1060121929
byte 4 1058437396
byte 4 3208081647
byte 4 1060013330
byte 4 3189189110
byte 4 3204448256
byte 4 1062149053
byte 4 3198039930
byte 4 3204879951
byte 4 1062847556
byte 4 0
byte 4 0
byte 4 1062847556
byte 4 3204879951
byte 4 3195311787
byte 4 1063074669
byte 4 3202531056
byte 4 0
byte 4 1064605338
byte 4 3197577718
byte 4 3196491359
byte 4 1064532072
byte 4 3190184938
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1064605338
byte 4 1050094070
byte 4 3196491359
byte 4 1064532072
byte 4 1042701290
byte 4 1047828139
byte 4 1063074669
byte 4 1055047408
byte 4 1049007711
byte 4 1064532072
byte 4 1042701290
byte 4 1056964608
byte 4 1062149053
byte 4 1050556282
byte 4 1047828139
byte 4 1063074669
byte 4 3202531056
byte 4 1049007711
byte 4 1064532072
byte 4 3190184938
byte 4 1056964608
byte 4 1062149053
byte 4 3198039930
byte 4 1062847556
byte 4 1057396303
byte 4 0
byte 4 1060597999
byte 4 1060013330
byte 4 1041705462
byte 4 1060597999
byte 4 1060013330
byte 4 3189189110
byte 4 1057396303
byte 4 1062847556
byte 4 0
byte 4 1054458931
byte 4 1060121929
byte 4 1058437396
byte 4 1063074669
byte 4 1055047408
byte 4 1047828139
byte 4 1060121929
byte 4 1058437396
byte 4 1054458931
byte 4 1062149053
byte 4 1050556282
byte 4 1056964608
byte 4 1060013330
byte 4 1041705462
byte 4 1060597999
byte 4 1058437396
byte 4 1054458931
byte 4 1060121929
byte 4 1064605338
byte 4 1050094070
byte 4 0
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1064532072
byte 4 1042701290
byte 4 1049007711
byte 4 1062847556
byte 4 3204879951
byte 4 0
byte 4 1064605338
byte 4 3197577718
byte 4 0
byte 4 1063074669
byte 4 3202531056
byte 4 1047828139
byte 4 1064532072
byte 4 3190184938
byte 4 1049007711
byte 4 1062149053
byte 4 3198039930
byte 4 1056964608
byte 4 1060013330
byte 4 3189189110
byte 4 1060597999
byte 4 1062847556
byte 4 0
byte 4 1057396303
byte 4 1063074669
byte 4 1055047408
byte 4 3195311787
byte 4 1062149053
byte 4 1050556282
byte 4 3204448256
byte 4 1064532072
byte 4 1042701290
byte 4 3196491359
byte 4 1057396303
byte 4 0
byte 4 3210331204
byte 4 1060013330
byte 4 1041705462
byte 4 3208081647
byte 4 1060013330
byte 4 3189189110
byte 4 3208081647
byte 4 1062847556
byte 4 0
byte 4 3204879951
byte 4 1062149053
byte 4 3198039930
byte 4 3204448256
byte 4 1063074669
byte 4 3202531056
byte 4 3195311787
byte 4 1064532072
byte 4 3190184938
byte 4 3196491359
byte 4 1041705462
byte 4 1060597999
byte 4 3207496978
byte 4 1050556282
byte 4 1056964608
byte 4 3209632701
byte 4 1054458931
byte 4 1060121929
byte 4 3205921044
byte 4 1055047408
byte 4 1047828139
byte 4 3210558317
byte 4 1058437396
byte 4 1054458931
byte 4 3207605577
byte 4 1060121929
byte 4 1058437396
byte 4 3201942579
byte 4 3189189110
byte 4 1060597999
byte 4 3207496978
byte 4 3198039930
byte 4 1056964608
byte 4 3209632701
byte 4 0
byte 4 1057396303
byte 4 3210331204
byte 4 3204879951
byte 4 0
byte 4 3210331204
byte 4 3202531056
byte 4 1047828139
byte 4 3210558317
byte 4 3197577718
byte 4 0
byte 4 3212088986
byte 4 3190184938
byte 4 1049007711
byte 4 3212015720
byte 4 0
byte 4 0
byte 4 3212836864
byte 4 1050094070
byte 4 0
byte 4 3212088986
byte 4 1042701290
byte 4 1049007711
byte 4 3212015720
byte 4 3202531056
byte 4 3195311787
byte 4 3210558317
byte 4 3198039930
byte 4 3204448256
byte 4 3209632701
byte 4 3190184938
byte 4 3196491359
byte 4 3212015720
byte 4 0
byte 4 3210331204
byte 4 3204879951
byte 4 3189189110
byte 4 3208081647
byte 4 3207496978
byte 4 1041705462
byte 4 3208081647
byte 4 3207496978
byte 4 0
byte 4 3204879951
byte 4 3210331204
byte 4 1050556282
byte 4 3204448256
byte 4 3209632701
byte 4 1055047408
byte 4 3195311787
byte 4 3210558317
byte 4 1042701290
byte 4 3196491359
byte 4 3212015720
byte 4 1047828139
byte 4 3210558317
byte 4 3202531056
byte 4 1056964608
byte 4 3209632701
byte 4 3198039930
byte 4 1054458931
byte 4 3207605577
byte 4 3205921044
byte 4 1060597999
byte 4 3207496978
byte 4 3189189110
byte 4 1060121929
byte 4 3205921044
byte 4 3201942579
byte 4 1058437396
byte 4 3201942579
byte 4 3207605577
byte 4 0
byte 4 3212088986
byte 4 3197577718
byte 4 0
byte 4 3212836864
byte 4 0
byte 4 1049007711
byte 4 3212015720
byte 4 3190184938
byte 4 0
byte 4 3210331204
byte 4 1057396303
byte 4 0
byte 4 3212088986
byte 4 1050094070
byte 4 1047828139
byte 4 3210558317
byte 4 1055047408
byte 4 1049007711
byte 4 3212015720
byte 4 1042701290
byte 4 1056964608
byte 4 3209632701
byte 4 1050556282
byte 4 1060597999
byte 4 3207496978
byte 4 1041705462
byte 4 1057396303
byte 4 3210331204
byte 4 0
byte 4 3195311787
byte 4 3210558317
byte 4 3202531056
byte 4 3204448256
byte 4 3209632701
byte 4 3198039930
byte 4 3196491359
byte 4 3212015720
byte 4 3190184938
byte 4 3210331204
byte 4 3204879951
byte 4 0
byte 4 3208081647
byte 4 3207496978
byte 4 3189189110
byte 4 3208081647
byte 4 3207496978
byte 4 1041705462
byte 4 3204879951
byte 4 3210331204
byte 4 0
byte 4 3204448256
byte 4 3209632701
byte 4 1050556282
byte 4 3195311787
byte 4 3210558317
byte 4 1055047408
byte 4 3196491359
byte 4 3212015720
byte 4 1042701290
byte 4 3210558317
byte 4 3202531056
byte 4 1047828139
byte 4 3209632701
byte 4 3198039930
byte 4 1056964608
byte 4 3207605577
byte 4 3205921044
byte 4 1054458931
byte 4 3207496978
byte 4 3189189110
byte 4 1060597999
byte 4 3202531056
byte 4 3195311787
byte 4 1063074669
byte 4 3205921044
byte 4 3201942579
byte 4 1060121929
byte 4 3198039930
byte 4 3204448256
byte 4 1062149053
byte 4 3189189110
byte 4 3208081647
byte 4 1060013330
byte 4 3201942579
byte 4 3207605577
byte 4 1058437396
byte 4 3190184938
byte 4 3196491359
byte 4 1064532072
byte 4 1055047408
byte 4 3195311787
byte 4 1063074669
byte 4 1042701290
byte 4 3196491359
byte 4 1064532072
byte 4 1050556282
byte 4 3204448256
byte 4 1062149053
byte 4 1041705462
byte 4 3208081647
byte 4 1060013330
byte 4 0
byte 4 3204879951
byte 4 1062847556
byte 4 1054458931
byte 4 3207605577
byte 4 1058437396
byte 4 1058437396
byte 4 3201942579
byte 4 1060121929
byte 4 1060121929
byte 4 3205921044
byte 4 1054458931
byte 4 3212088986
byte 4 1050094070
byte 4 0
byte 4 3212015720
byte 4 1042701290
byte 4 1049007711
byte 4 3212836864
byte 4 0
byte 4 0
byte 4 3210331204
byte 4 0
byte 4 1057396303
byte 4 3212088986
byte 4 3197577718
byte 4 0
byte 4 3212015720
byte 4 3190184938
byte 4 1049007711
byte 4 3210558317
byte 4 1055047408
byte 4 3195311787
byte 4 3212015720
byte 4 1042701290
byte 4 3196491359
byte 4 3209632701
byte 4 1050556282
byte 4 3204448256
byte 4 3210558317
byte 4 3202531056
byte 4 3195311787
byte 4 3212015720
byte 4 3190184938
byte 4 3196491359
byte 4 3209632701
byte 4 3198039930
byte 4 3204448256
byte 4 3207496978
byte 4 1041705462
byte 4 3208081647
byte 4 3207496978
byte 4 3189189110
byte 4 3208081647
byte 4 3210331204
byte 4 0
byte 4 3204879951
byte 4 3207605577
byte 4 1058437396
byte 4 3201942579
byte 4 3205921044
byte 4 1054458931
byte 4 3207605577
byte 4 3201942579
byte 4 1060121929
byte 4 3205921044
byte 4 3201942579
byte 4 3207605577
byte 4 3205921044
byte 4 3205921044
byte 4 3201942579
byte 4 3207605577
byte 4 3207605577
byte 4 3205921044
byte 4 3201942579
export Q_rand
code
proc Q_rand 4 0
file "../../../../code/game/q_math.c"
line 203
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// q_math.c -- stateless support routines that are included in each code module
;4:#include "q_shared.h"
;5:
;6:vec3_t vec3_origin    = {0, 0, 0};
;7:vec3_t axisDefault[3] = {
;8:	{1, 0, 0},
;9:    {0, 1, 0},
;10:    {0, 0, 1}
;11:};
;12:
;13:vec4_t colorBlack   = {0, 0, 0, 1};
;14:vec4_t colorRed     = {1, 0, 0, 1};
;15:vec4_t colorGreen   = {0, 1, 0, 1};
;16:vec4_t colorBlue    = {0, 0, 1, 1};
;17:vec4_t colorYellow  = {1, 1, 0, 1};
;18:vec4_t colorMagenta = {1, 0, 1, 1};
;19:vec4_t colorCyan    = {0, 1, 1, 1};
;20:vec4_t colorWhite   = {1, 1, 1, 1};
;21:vec4_t colorLtGrey  = {0.75, 0.75, 0.75, 1};
;22:vec4_t colorMdGrey  = {0.5, 0.5, 0.5, 1};
;23:vec4_t colorDkGrey  = {0.25, 0.25, 0.25, 1};
;24:
;25:vec4_t g_color_table[8] = {
;26:	{0.0, 0.0, 0.0, 1.0},
;27:    {1.0, 0.0, 0.0, 1.0},
;28:    {0.0, 1.0, 0.0, 1.0},
;29:    {1.0, 1.0, 0.0, 1.0},
;30:	{0.0, 0.0, 1.0, 1.0},
;31:    {0.0, 1.0, 1.0, 1.0},
;32:    {1.0, 0.0, 1.0, 1.0},
;33:    {1.0, 1.0, 1.0, 1.0},
;34:};
;35:
;36:vec3_t bytedirs[NUMVERTEXNORMALS] = {
;37:	{-0.525731f, 0.000000f,  0.850651f },
;38:    {-0.442863f, 0.238856f,  0.864188f },
;39:    {-0.295242f, 0.000000f,  0.955423f },
;40:    {-0.309017f, 0.500000f,  0.809017f },
;41:	{-0.162460f, 0.262866f,  0.951056f },
;42:    {0.000000f,  0.000000f,  1.000000f },
;43:    {0.000000f,  0.850651f,  0.525731f },
;44:    {-0.147621f, 0.716567f,  0.681718f },
;45:	{0.147621f,  0.716567f,  0.681718f },
;46:    {0.000000f,  0.525731f,  0.850651f },
;47:    {0.309017f,  0.500000f,  0.809017f },
;48:    {0.525731f,  0.000000f,  0.850651f },
;49:	{0.295242f,  0.000000f,  0.955423f },
;50:    {0.442863f,  0.238856f,  0.864188f },
;51:    {0.162460f,  0.262866f,  0.951056f },
;52:    {-0.681718f, 0.147621f,  0.716567f },
;53:	{-0.809017f, 0.309017f,  0.500000f },
;54:    {-0.587785f, 0.425325f,  0.688191f },
;55:    {-0.850651f, 0.525731f,  0.000000f },
;56:    {-0.864188f, 0.442863f,  0.238856f },
;57:	{-0.716567f, 0.681718f,  0.147621f },
;58:    {-0.688191f, 0.587785f,  0.425325f },
;59:    {-0.500000f, 0.809017f,  0.309017f },
;60:    {-0.238856f, 0.864188f,  0.442863f },
;61:	{-0.425325f, 0.688191f,  0.587785f },
;62:    {-0.716567f, 0.681718f,  -0.147621f},
;63:    {-0.500000f, 0.809017f,  -0.309017f},
;64:    {-0.525731f, 0.850651f,  0.000000f },
;65:	{0.000000f,  0.850651f,  -0.525731f},
;66:    {-0.238856f, 0.864188f,  -0.442863f},
;67:    {0.000000f,  0.955423f,  -0.295242f},
;68:    {-0.262866f, 0.951056f,  -0.162460f},
;69:	{0.000000f,  1.000000f,  0.000000f },
;70:    {0.000000f,  0.955423f,  0.295242f },
;71:    {-0.262866f, 0.951056f,  0.162460f },
;72:    {0.238856f,  0.864188f,  0.442863f },
;73:	{0.262866f,  0.951056f,  0.162460f },
;74:    {0.500000f,  0.809017f,  0.309017f },
;75:    {0.238856f,  0.864188f,  -0.442863f},
;76:    {0.262866f,  0.951056f,  -0.162460f},
;77:	{0.500000f,  0.809017f,  -0.309017f},
;78:    {0.850651f,  0.525731f,  0.000000f },
;79:    {0.716567f,  0.681718f,  0.147621f },
;80:    {0.716567f,  0.681718f,  -0.147621f},
;81:	{0.525731f,  0.850651f,  0.000000f },
;82:    {0.425325f,  0.688191f,  0.587785f },
;83:    {0.864188f,  0.442863f,  0.238856f },
;84:    {0.688191f,  0.587785f,  0.425325f },
;85:	{0.809017f,  0.309017f,  0.500000f },
;86:    {0.681718f,  0.147621f,  0.716567f },
;87:    {0.587785f,  0.425325f,  0.688191f },
;88:    {0.955423f,  0.295242f,  0.000000f },
;89:	{1.000000f,  0.000000f,  0.000000f },
;90:    {0.951056f,  0.162460f,  0.262866f },
;91:    {0.850651f,  -0.525731f, 0.000000f },
;92:    {0.955423f,  -0.295242f, 0.000000f },
;93:	{0.864188f,  -0.442863f, 0.238856f },
;94:    {0.951056f,  -0.162460f, 0.262866f },
;95:    {0.809017f,  -0.309017f, 0.500000f },
;96:    {0.681718f,  -0.147621f, 0.716567f },
;97:	{0.850651f,  0.000000f,  0.525731f },
;98:    {0.864188f,  0.442863f,  -0.238856f},
;99:    {0.809017f,  0.309017f,  -0.500000f},
;100:    {0.951056f,  0.162460f,  -0.262866f},
;101:	{0.525731f,  0.000000f,  -0.850651f},
;102:    {0.681718f,  0.147621f,  -0.716567f},
;103:    {0.681718f,  -0.147621f, -0.716567f},
;104:    {0.850651f,  0.000000f,  -0.525731f},
;105:	{0.809017f,  -0.309017f, -0.500000f},
;106:    {0.864188f,  -0.442863f, -0.238856f},
;107:    {0.951056f,  -0.162460f, -0.262866f},
;108:    {0.147621f,  0.716567f,  -0.681718f},
;109:	{0.309017f,  0.500000f,  -0.809017f},
;110:    {0.425325f,  0.688191f,  -0.587785f},
;111:    {0.442863f,  0.238856f,  -0.864188f},
;112:    {0.587785f,  0.425325f,  -0.688191f},
;113:	{0.688191f,  0.587785f,  -0.425325f},
;114:    {-0.147621f, 0.716567f,  -0.681718f},
;115:    {-0.309017f, 0.500000f,  -0.809017f},
;116:    {0.000000f,  0.525731f,  -0.850651f},
;117:	{-0.525731f, 0.000000f,  -0.850651f},
;118:    {-0.442863f, 0.238856f,  -0.864188f},
;119:    {-0.295242f, 0.000000f,  -0.955423f},
;120:    {-0.162460f, 0.262866f,  -0.951056f},
;121:	{0.000000f,  0.000000f,  -1.000000f},
;122:    {0.295242f,  0.000000f,  -0.955423f},
;123:    {0.162460f,  0.262866f,  -0.951056f},
;124:    {-0.442863f, -0.238856f, -0.864188f},
;125:	{-0.309017f, -0.500000f, -0.809017f},
;126:    {-0.162460f, -0.262866f, -0.951056f},
;127:    {0.000000f,  -0.850651f, -0.525731f},
;128:    {-0.147621f, -0.716567f, -0.681718f},
;129:	{0.147621f,  -0.716567f, -0.681718f},
;130:    {0.000000f,  -0.525731f, -0.850651f},
;131:    {0.309017f,  -0.500000f, -0.809017f},
;132:    {0.442863f,  -0.238856f, -0.864188f},
;133:	{0.162460f,  -0.262866f, -0.951056f},
;134:    {0.238856f,  -0.864188f, -0.442863f},
;135:    {0.500000f,  -0.809017f, -0.309017f},
;136:    {0.425325f,  -0.688191f, -0.587785f},
;137:	{0.716567f,  -0.681718f, -0.147621f},
;138:    {0.688191f,  -0.587785f, -0.425325f},
;139:    {0.587785f,  -0.425325f, -0.688191f},
;140:    {0.000000f,  -0.955423f, -0.295242f},
;141:	{0.000000f,  -1.000000f, 0.000000f },
;142:    {0.262866f,  -0.951056f, -0.162460f},
;143:    {0.000000f,  -0.850651f, 0.525731f },
;144:    {0.000000f,  -0.955423f, 0.295242f },
;145:	{0.238856f,  -0.864188f, 0.442863f },
;146:    {0.262866f,  -0.951056f, 0.162460f },
;147:    {0.500000f,  -0.809017f, 0.309017f },
;148:    {0.716567f,  -0.681718f, 0.147621f },
;149:	{0.525731f,  -0.850651f, 0.000000f },
;150:    {-0.238856f, -0.864188f, -0.442863f},
;151:    {-0.500000f, -0.809017f, -0.309017f},
;152:    {-0.262866f, -0.951056f, -0.162460f},
;153:	{-0.850651f, -0.525731f, 0.000000f },
;154:    {-0.716567f, -0.681718f, -0.147621f},
;155:    {-0.716567f, -0.681718f, 0.147621f },
;156:    {-0.525731f, -0.850651f, 0.000000f },
;157:	{-0.500000f, -0.809017f, 0.309017f },
;158:    {-0.238856f, -0.864188f, 0.442863f },
;159:    {-0.262866f, -0.951056f, 0.162460f },
;160:    {-0.864188f, -0.442863f, 0.238856f },
;161:	{-0.809017f, -0.309017f, 0.500000f },
;162:    {-0.688191f, -0.587785f, 0.425325f },
;163:    {-0.681718f, -0.147621f, 0.716567f },
;164:    {-0.442863f, -0.238856f, 0.864188f },
;165:	{-0.587785f, -0.425325f, 0.688191f },
;166:    {-0.309017f, -0.500000f, 0.809017f },
;167:    {-0.147621f, -0.716567f, 0.681718f },
;168:    {-0.425325f, -0.688191f, 0.587785f },
;169:	{-0.162460f, -0.262866f, 0.951056f },
;170:    {0.442863f,  -0.238856f, 0.864188f },
;171:    {0.162460f,  -0.262866f, 0.951056f },
;172:    {0.309017f,  -0.500000f, 0.809017f },
;173:	{0.147621f,  -0.716567f, 0.681718f },
;174:    {0.000000f,  -0.525731f, 0.850651f },
;175:    {0.425325f,  -0.688191f, 0.587785f },
;176:    {0.587785f,  -0.425325f, 0.688191f },
;177:	{0.688191f,  -0.587785f, 0.425325f },
;178:    {-0.955423f, 0.295242f,  0.000000f },
;179:    {-0.951056f, 0.162460f,  0.262866f },
;180:    {-1.000000f, 0.000000f,  0.000000f },
;181:	{-0.850651f, 0.000000f,  0.525731f },
;182:    {-0.955423f, -0.295242f, 0.000000f },
;183:    {-0.951056f, -0.162460f, 0.262866f },
;184:    {-0.864188f, 0.442863f,  -0.238856f},
;185:	{-0.951056f, 0.162460f,  -0.262866f},
;186:    {-0.809017f, 0.309017f,  -0.500000f},
;187:    {-0.864188f, -0.442863f, -0.238856f},
;188:    {-0.951056f, -0.162460f, -0.262866f},
;189:	{-0.809017f, -0.309017f, -0.500000f},
;190:    {-0.681718f, 0.147621f,  -0.716567f},
;191:    {-0.681718f, -0.147621f, -0.716567f},
;192:    {-0.850651f, 0.000000f,  -0.525731f},
;193:	{-0.688191f, 0.587785f,  -0.425325f},
;194:    {-0.587785f, 0.425325f,  -0.688191f},
;195:    {-0.425325f, 0.688191f,  -0.587785f},
;196:    {-0.425325f, -0.688191f, -0.587785f},
;197:	{-0.587785f, -0.425325f, -0.688191f},
;198:    {-0.688191f, -0.587785f, -0.425325f}
;199:};
;200:
;201://==============================================================
;202:
;203:int Q_rand(int* seed) {
line 204
;204:	*seed = (69069 * *seed + 1);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 69069
MULI4
CNSTI4 1
ADDI4
ASGNI4
line 205
;205:	return *seed;
ADDRFP4 0
INDIRP4
INDIRI4
RETI4
LABELV $21
endproc Q_rand 4 0
export Q_random
proc Q_random 4 4
line 208
;206:}
;207:
;208:float Q_random(int* seed) {
line 209
;209:	return (Q_rand(seed) & 0xffff) / (float)0x10000;
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 Q_rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 65535
BANDI4
CVIF4 4
CNSTF4 931135488
MULF4
RETF4
LABELV $22
endproc Q_random 4 4
export Q_crandom
proc Q_crandom 4 4
line 212
;210:}
;211:
;212:float Q_crandom(int* seed) {
line 213
;213:	return 2.0 * (Q_random(seed) - 0.5);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 0
INDIRF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
RETF4
LABELV $23
endproc Q_crandom 4 4
export VectorCompare
proc VectorCompare 8 0
line 218
;214:}
;215:
;216:#ifdef __LCC__
;217:
;218:int VectorCompare(const vec3_t v1, const vec3_t v2) {
line 219
;219:	if (v1[0] != v2[0] || v1[1] != v2[1] || v1[2] != v2[2]) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
INDIRF4
NEF4 $28
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
NEF4 $28
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
EQF4 $25
LABELV $28
line 220
;220:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $24
JUMPV
LABELV $25
line 222
;221:	}
;222:	return 1;
CNSTI4 1
RETI4
LABELV $24
endproc VectorCompare 8 0
export VectorLength
proc VectorLength 12 4
line 225
;223:}
;224:
;225:vec_t VectorLength(const vec3_t v) {
line 226
;226:	return (vec_t)sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 8
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 8
INDIRF4
RETF4
LABELV $29
endproc VectorLength 12 4
export VectorLengthSquared
proc VectorLengthSquared 8 0
line 229
;227:}
;228:
;229:vec_t VectorLengthSquared(const vec3_t v) {
line 230
;230:	return (v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
RETF4
LABELV $30
endproc VectorLengthSquared 8 0
export Distance
proc Distance 24 4
line 233
;231:}
;232:
;233:vec_t Distance(const vec3_t p1, const vec3_t p2) {
line 236
;234:	vec3_t v;
;235:
;236:	VectorSubtract(p2, p1, v);
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 16
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 237
;237:	return VectorLength(v);
ADDRLP4 0
ARGP4
ADDRLP4 20
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
INDIRF4
RETF4
LABELV $31
endproc Distance 24 4
export DistanceSquared
proc DistanceSquared 24 0
line 240
;238:}
;239:
;240:vec_t DistanceSquared(const vec3_t p1, const vec3_t p2) {
line 243
;241:	vec3_t v;
;242:
;243:	VectorSubtract(p2, p1, v);
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 16
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 244
;244:	return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
ADDRLP4 20
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
RETF4
LABELV $34
endproc DistanceSquared 24 0
export VectorNormalizeFast
proc VectorNormalizeFast 28 4
line 249
;245:}
;246:
;247:// fast vector normalize routine that does not check to make sure
;248:// that length != 0, nor does it return length, uses rsqrt approximation
;249:void VectorNormalizeFast(vec3_t v) {
line 252
;250:	float ilength;
;251:
;252:	ilength = Q_rsqrt(DotProduct(v, v));
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 4
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 8
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 12
ADDRGP4 Q_rsqrt
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 254
;253:
;254:	v[0] *= ilength;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 255
;255:	v[1] *= ilength;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 256
;256:	v[2] *= ilength;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 257
;257:}
LABELV $41
endproc VectorNormalizeFast 28 4
export VectorInverse
proc VectorInverse 12 0
line 259
;258:
;259:void VectorInverse(vec3_t v) {
line 260
;260:	v[0] = -v[0];
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRF4
NEGF4
ASGNF4
line 261
;261:	v[1] = -v[1];
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
NEGF4
ASGNF4
line 262
;262:	v[2] = -v[2];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
NEGF4
ASGNF4
line 263
;263:}
LABELV $42
endproc VectorInverse 12 0
export CrossProduct
proc CrossProduct 24 0
line 265
;264:
;265:void CrossProduct(const vec3_t v1, const vec3_t v2, vec3_t cross) {
line 266
;266:	cross[0] = v1[1] * v2[2] - v1[2] * v2[1];
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 267
;267:	cross[1] = v1[2] * v2[0] - v1[0] * v2[2];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
INDIRF4
MULF4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 268
;268:	cross[2] = v1[0] * v2[1] - v1[1] * v2[0];
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 269
;269:}
LABELV $43
endproc CrossProduct 24 0
export ClampChar
proc ClampChar 0 0
line 274
;270:#endif
;271:
;272://=======================================================
;273:
;274:signed char ClampChar(int i) {
line 275
;275:	if (i < -128) {
ADDRFP4 0
INDIRI4
CNSTI4 -128
GEI4 $45
line 276
;276:		return -128;
CNSTI4 -128
RETI4
ADDRGP4 $44
JUMPV
LABELV $45
line 278
;277:	}
;278:	if (i > 127) {
ADDRFP4 0
INDIRI4
CNSTI4 127
LEI4 $47
line 279
;279:		return 127;
CNSTI4 127
RETI4
ADDRGP4 $44
JUMPV
LABELV $47
line 281
;280:	}
;281:	return i;
ADDRFP4 0
INDIRI4
CVII1 4
CVII4 1
RETI4
LABELV $44
endproc ClampChar 0 0
export ClampShort
proc ClampShort 0 0
line 284
;282:}
;283:
;284:signed short ClampShort(int i) {
line 285
;285:	if (i < -32768) {
ADDRFP4 0
INDIRI4
CNSTI4 -32768
GEI4 $50
line 286
;286:		return -32768;
CNSTI4 -32768
RETI4
ADDRGP4 $49
JUMPV
LABELV $50
line 288
;287:	}
;288:	if (i > 0x7fff) {
ADDRFP4 0
INDIRI4
CNSTI4 32767
LEI4 $52
line 289
;289:		return 0x7fff;
CNSTI4 32767
RETI4
ADDRGP4 $49
JUMPV
LABELV $52
line 291
;290:	}
;291:	return i;
ADDRFP4 0
INDIRI4
CVII2 4
CVII4 2
RETI4
LABELV $49
endproc ClampShort 0 0
export DirToByte
proc DirToByte 24 0
line 295
;292:}
;293:
;294:// this isn't a real cheap function to call!
;295:int DirToByte(vec3_t dir) {
line 299
;296:	int   i, best;
;297:	float d, bestd;
;298:
;299:	if (!dir) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $55
line 300
;300:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $54
JUMPV
LABELV $55
line 303
;301:	}
;302:
;303:	bestd = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
line 304
;304:	best  = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 305
;305:	for (i = 0; i < NUMVERTEXNORMALS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $57
line 306
;306:		d = DotProduct(dir, bytedirs[i]);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bytedirs
ADDP4
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bytedirs+4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bytedirs+8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 307
;307:		if (d > bestd) {
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
LEF4 $63
line 308
;308:			bestd = d;
ADDRLP4 8
ADDRLP4 4
INDIRF4
ASGNF4
line 309
;309:			best  = i;
ADDRLP4 12
ADDRLP4 0
INDIRI4
ASGNI4
line 310
;310:		}
LABELV $63
line 311
;311:	}
LABELV $58
line 305
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 162
LTI4 $57
line 313
;312:
;313:	return best;
ADDRLP4 12
INDIRI4
RETI4
LABELV $54
endproc DirToByte 24 0
export ByteToDir
proc ByteToDir 4 0
line 316
;314:}
;315:
;316:void ByteToDir(int b, vec3_t dir) {
line 317
;317:	if (b < 0 || b >= NUMVERTEXNORMALS) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $68
ADDRLP4 0
INDIRI4
CNSTI4 162
LTI4 $66
LABELV $68
line 318
;318:		VectorCopy(vec3_origin, dir);
ADDRFP4 4
INDIRP4
ADDRGP4 vec3_origin
INDIRB
ASGNB 12
line 319
;319:		return;
ADDRGP4 $65
JUMPV
LABELV $66
line 321
;320:	}
;321:	VectorCopy(bytedirs[b], dir);
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 bytedirs
ADDP4
INDIRB
ASGNB 12
line 322
;322:}
LABELV $65
endproc ByteToDir 4 0
export ColorBytes3
proc ColorBytes3 40 0
line 324
;323:
;324:unsigned ColorBytes3(float r, float g, float b) {
line 327
;325:	unsigned i;
;326:
;327:	((byte*)&i)[0] = r * 255;
ADDRLP4 8
ADDRFP4 0
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 12
CNSTF4 1325400064
ASGNF4
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
LTF4 $71
ADDRLP4 4
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $72
JUMPV
LABELV $71
ADDRLP4 4
ADDRLP4 8
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $72
ADDRLP4 0
ADDRLP4 4
INDIRU4
CVUU1 4
ASGNU1
line 328
;328:	((byte*)&i)[1] = g * 255;
ADDRLP4 20
ADDRFP4 4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 24
CNSTF4 1325400064
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
LTF4 $75
ADDRLP4 16
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $76
JUMPV
LABELV $75
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $76
ADDRLP4 0+1
ADDRLP4 16
INDIRU4
CVUU1 4
ASGNU1
line 329
;329:	((byte*)&i)[2] = b * 255;
ADDRLP4 32
ADDRFP4 8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $79
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $80
JUMPV
LABELV $79
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $80
ADDRLP4 0+2
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 331
;330:
;331:	return i;
ADDRLP4 0
INDIRU4
RETU4
LABELV $69
endproc ColorBytes3 40 0
export ColorBytes4
proc ColorBytes4 52 0
line 334
;332:}
;333:
;334:unsigned ColorBytes4(float r, float g, float b, float a) {
line 337
;335:	unsigned i;
;336:
;337:	((byte*)&i)[0] = r * 255;
ADDRLP4 8
ADDRFP4 0
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 12
CNSTF4 1325400064
ASGNF4
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
LTF4 $83
ADDRLP4 4
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $84
JUMPV
LABELV $83
ADDRLP4 4
ADDRLP4 8
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $84
ADDRLP4 0
ADDRLP4 4
INDIRU4
CVUU1 4
ASGNU1
line 338
;338:	((byte*)&i)[1] = g * 255;
ADDRLP4 20
ADDRFP4 4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 24
CNSTF4 1325400064
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
LTF4 $87
ADDRLP4 16
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $88
JUMPV
LABELV $87
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $88
ADDRLP4 0+1
ADDRLP4 16
INDIRU4
CVUU1 4
ASGNU1
line 339
;339:	((byte*)&i)[2] = b * 255;
ADDRLP4 32
ADDRFP4 8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $91
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $92
JUMPV
LABELV $91
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $92
ADDRLP4 0+2
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 340
;340:	((byte*)&i)[3] = a * 255;
ADDRLP4 44
ADDRFP4 12
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $95
ADDRLP4 40
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $96
JUMPV
LABELV $95
ADDRLP4 40
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $96
ADDRLP4 0+3
ADDRLP4 40
INDIRU4
CVUU1 4
ASGNU1
line 342
;341:
;342:	return i;
ADDRLP4 0
INDIRU4
RETU4
LABELV $81
endproc ColorBytes4 52 0
export NormalizeColor
proc NormalizeColor 4 0
line 345
;343:}
;344:
;345:float NormalizeColor(const vec3_t in, vec3_t out) {
line 348
;346:	float max;
;347:
;348:	max = in[0];
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 349
;349:	if (in[1] > max) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
LEF4 $98
line 350
;350:		max = in[1];
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 351
;351:	}
LABELV $98
line 352
;352:	if (in[2] > max) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
LEF4 $100
line 353
;353:		max = in[2];
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 354
;354:	}
LABELV $100
line 356
;355:
;356:	if (!max) {
ADDRLP4 0
INDIRF4
CNSTF4 0
NEF4 $102
line 357
;357:		VectorClear(out);
ADDRFP4 4
INDIRP4
CNSTF4 0
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 0
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 0
ASGNF4
line 358
;358:	} else {
ADDRGP4 $103
JUMPV
LABELV $102
line 359
;359:		out[0] = in[0] / max;
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 360
;360:		out[1] = in[1] / max;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 361
;361:		out[2] = in[2] / max;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 362
;362:	}
LABELV $103
line 363
;363:	return max;
ADDRLP4 0
INDIRF4
RETF4
LABELV $97
endproc NormalizeColor 4 0
export PlaneFromPoints
proc PlaneFromPoints 52 12
line 374
;364:}
;365:
;366:/*
;367:=====================
;368:PlaneFromPoints
;369:
;370:Returns false if the triangle is degenrate.
;371:The normal will point out of the clock for clockwise ordered points
;372:=====================
;373:*/
;374:qboolean PlaneFromPoints(vec4_t plane, const vec3_t a, const vec3_t b, const vec3_t c) {
line 377
;375:	vec3_t d1, d2;
;376:
;377:	VectorSubtract(b, a, d1);
ADDRLP4 24
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 28
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 378
;378:	VectorSubtract(c, a, d2);
ADDRLP4 32
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 379
;379:	CrossProduct(d2, d1, plane);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 380
;380:	if (VectorNormalize(plane) == 0) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 40
INDIRF4
CNSTF4 0
NEF4 $109
line 381
;381:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $104
JUMPV
LABELV $109
line 384
;382:	}
;383:
;384:	plane[3] = DotProduct(a, plane);
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 44
INDIRP4
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 385
;385:	return qtrue;
CNSTI4 1
RETI4
LABELV $104
endproc PlaneFromPoints 52 12
export RotatePointAroundVector
proc RotatePointAroundVector 252 12
line 395
;386:}
;387:
;388:/*
;389:===============
;390:RotatePointAroundVector
;391:
;392:This is not implemented very well...
;393:===============
;394:*/
;395:void RotatePointAroundVector(vec3_t dst, const vec3_t dir, const vec3_t point, float degrees) {
line 405
;396:	float  m[3][3];
;397:	float  im[3][3];
;398:	float  zrot[3][3];
;399:	float  tmpmat[3][3];
;400:	float  rot[3][3];
;401:	int    i;
;402:	vec3_t vr, vup, vf;
;403:	float  rad;
;404:
;405:	vf[0] = dir[0];
ADDRLP4 148
ADDRFP4 4
INDIRP4
INDIRF4
ASGNF4
line 406
;406:	vf[1] = dir[1];
ADDRLP4 148+4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 407
;407:	vf[2] = dir[2];
ADDRLP4 148+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 409
;408:
;409:	PerpendicularVector(vr, dir);
ADDRLP4 160
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 410
;410:	CrossProduct(vr, vf, vup);
ADDRLP4 160
ARGP4
ADDRLP4 148
ARGP4
ADDRLP4 176
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 412
;411:
;412:	m[0][0] = vr[0];
ADDRLP4 40
ADDRLP4 160
INDIRF4
ASGNF4
line 413
;413:	m[1][0] = vr[1];
ADDRLP4 40+12
ADDRLP4 160+4
INDIRF4
ASGNF4
line 414
;414:	m[2][0] = vr[2];
ADDRLP4 40+24
ADDRLP4 160+8
INDIRF4
ASGNF4
line 416
;415:
;416:	m[0][1] = vup[0];
ADDRLP4 40+4
ADDRLP4 176
INDIRF4
ASGNF4
line 417
;417:	m[1][1] = vup[1];
ADDRLP4 40+12+4
ADDRLP4 176+4
INDIRF4
ASGNF4
line 418
;418:	m[2][1] = vup[2];
ADDRLP4 40+24+4
ADDRLP4 176+8
INDIRF4
ASGNF4
line 420
;419:
;420:	m[0][2] = vf[0];
ADDRLP4 40+8
ADDRLP4 148
INDIRF4
ASGNF4
line 421
;421:	m[1][2] = vf[1];
ADDRLP4 40+12+8
ADDRLP4 148+4
INDIRF4
ASGNF4
line 422
;422:	m[2][2] = vf[2];
ADDRLP4 40+24+8
ADDRLP4 148+8
INDIRF4
ASGNF4
line 424
;423:
;424:	memcpy(im, m, sizeof(im));
ADDRLP4 112
ARGP4
ADDRLP4 40
ARGP4
CNSTI4 36
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 426
;425:
;426:	im[0][1] = m[1][0];
ADDRLP4 112+4
ADDRLP4 40+12
INDIRF4
ASGNF4
line 427
;427:	im[0][2] = m[2][0];
ADDRLP4 112+8
ADDRLP4 40+24
INDIRF4
ASGNF4
line 428
;428:	im[1][0] = m[0][1];
ADDRLP4 112+12
ADDRLP4 40+4
INDIRF4
ASGNF4
line 429
;429:	im[1][2] = m[2][1];
ADDRLP4 112+12+8
ADDRLP4 40+24+4
INDIRF4
ASGNF4
line 430
;430:	im[2][0] = m[0][2];
ADDRLP4 112+24
ADDRLP4 40+8
INDIRF4
ASGNF4
line 431
;431:	im[2][1] = m[1][2];
ADDRLP4 112+24+4
ADDRLP4 40+12+8
INDIRF4
ASGNF4
line 433
;432:
;433:	memset(zrot, 0, sizeof(zrot));
ADDRLP4 76
ARGP4
CNSTI4 0
ARGI4
CNSTI4 36
ARGI4
ADDRGP4 memset
CALLP4
pop
line 434
;434:	zrot[0][0] = zrot[1][1] = zrot[2][2] = 1.0F;
ADDRLP4 224
CNSTF4 1065353216
ASGNF4
ADDRLP4 76+24+8
ADDRLP4 224
INDIRF4
ASGNF4
ADDRLP4 76+12+4
ADDRLP4 224
INDIRF4
ASGNF4
ADDRLP4 76
ADDRLP4 224
INDIRF4
ASGNF4
line 436
;435:
;436:	rad        = DEG2RAD(degrees);
ADDRLP4 172
ADDRFP4 12
INDIRF4
CNSTF4 1016003125
MULF4
ASGNF4
line 437
;437:	zrot[0][0] = cos(rad);
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 228
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 76
ADDRLP4 228
INDIRF4
ASGNF4
line 438
;438:	zrot[0][1] = sin(rad);
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 232
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 76+4
ADDRLP4 232
INDIRF4
ASGNF4
line 439
;439:	zrot[1][0] = -sin(rad);
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 236
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 76+12
ADDRLP4 236
INDIRF4
NEGF4
ASGNF4
line 440
;440:	zrot[1][1] = cos(rad);
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 240
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 76+12+4
ADDRLP4 240
INDIRF4
ASGNF4
line 442
;441:
;442:	MatrixMultiply(m, zrot, tmpmat);
ADDRLP4 40
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 188
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 443
;443:	MatrixMultiply(tmpmat, im, rot);
ADDRLP4 188
ARGP4
ADDRLP4 112
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 445
;444:
;445:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $156
line 446
;446:		dst[i] = rot[i][0] * point[0] + rot[i][1] * point[1] + rot[i][2] * point[2];
ADDRLP4 248
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
INDIRF4
MULF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4+4
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4+8
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 447
;447:	}
LABELV $157
line 445
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $156
line 448
;448:}
LABELV $111
endproc RotatePointAroundVector 252 12
export RotateAroundDirection
proc RotateAroundDirection 20 16
line 455
;449:
;450:/*
;451:===============
;452:RotateAroundDirection
;453:===============
;454:*/
;455:void RotateAroundDirection(vec3_t axis[3], float yaw) {
line 458
;456:
;457:	// create an arbitrary axis[1]
;458:	PerpendicularVector(axis[1], axis[0]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 461
;459:
;460:	// rotate it around axis[0] by yaw
;461:	if (yaw) {
ADDRFP4 4
INDIRF4
CNSTF4 0
EQF4 $163
line 464
;462:		vec3_t temp;
;463:
;464:		VectorCopy(axis[1], temp);
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 465
;465:		RotatePointAroundVector(axis[1], axis[0], temp, yaw);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 466
;466:	}
LABELV $163
line 469
;467:
;468:	// cross to get axis[2]
;469:	CrossProduct(axis[0], axis[1], axis[2]);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 470
;470:}
LABELV $162
endproc RotateAroundDirection 20 16
export vectoangles
proc vectoangles 32 8
line 472
;471:
;472:void vectoangles(const vec3_t value1, vec3_t angles) {
line 476
;473:	float forward;
;474:	float yaw, pitch;
;475:
;476:	if (value1[1] == 0 && value1[0] == 0) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 0
NEF4 $166
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 0
NEF4 $166
line 477
;477:		yaw = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 478
;478:		if (value1[2] > 0) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
LEF4 $168
line 479
;479:			pitch = 90;
ADDRLP4 4
CNSTF4 1119092736
ASGNF4
line 480
;480:		} else {
ADDRGP4 $167
JUMPV
LABELV $168
line 481
;481:			pitch = 270;
ADDRLP4 4
CNSTF4 1132920832
ASGNF4
line 482
;482:		}
line 483
;483:	} else {
ADDRGP4 $167
JUMPV
LABELV $166
line 484
;484:		if (value1[0]) {
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 0
EQF4 $170
line 485
;485:			yaw = (atan2(value1[1], value1[0]) * 180 / M_PI);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 atan2
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 20
INDIRF4
CNSTF4 1113927393
MULF4
ASGNF4
line 486
;486:		} else if (value1[1] > 0) {
ADDRGP4 $171
JUMPV
LABELV $170
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 0
LEF4 $172
line 487
;487:			yaw = 90;
ADDRLP4 0
CNSTF4 1119092736
ASGNF4
line 488
;488:		} else {
ADDRGP4 $173
JUMPV
LABELV $172
line 489
;489:			yaw = 270;
ADDRLP4 0
CNSTF4 1132920832
ASGNF4
line 490
;490:		}
LABELV $173
LABELV $171
line 491
;491:		if (yaw < 0) {
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $174
line 492
;492:			yaw += 360;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 493
;493:		}
LABELV $174
line 495
;494:
;495:		forward = sqrt(value1[0] * value1[0] + value1[1] * value1[1]);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 24
INDIRF4
ASGNF4
line 496
;496:		pitch   = (atan2(value1[2], forward) * 180 / M_PI);
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 28
ADDRGP4 atan2
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 28
INDIRF4
CNSTF4 1113927393
MULF4
ASGNF4
line 497
;497:		if (pitch < 0) {
ADDRLP4 4
INDIRF4
CNSTF4 0
GEF4 $176
line 498
;498:			pitch += 360;
ADDRLP4 4
ADDRLP4 4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 499
;499:		}
LABELV $176
line 500
;500:	}
LABELV $167
line 502
;501:
;502:	angles[PITCH] = -pitch;
ADDRFP4 4
INDIRP4
ADDRLP4 4
INDIRF4
NEGF4
ASGNF4
line 503
;503:	angles[YAW]   = yaw;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRF4
ASGNF4
line 504
;504:	angles[ROLL]  = 0;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 0
ASGNF4
line 505
;505:}
LABELV $165
endproc vectoangles 32 8
export AnglesToAxis
proc AnglesToAxis 16 16
line 512
;506:
;507:/*
;508:=================
;509:AnglesToAxis
;510:=================
;511:*/
;512:void AnglesToAxis(const vec3_t angles, vec3_t axis[3]) {
line 516
;513:	vec3_t right;
;514:
;515:	// angle vectors returns "right" instead of "y axis"
;516:	AngleVectors(angles, axis[0], right, axis[2]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 517
;517:	VectorSubtract(vec3_origin, right, axis[1]);
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 vec3_origin
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 vec3_origin+4
INDIRF4
ADDRLP4 0+4
INDIRF4
SUBF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 vec3_origin+8
INDIRF4
ADDRLP4 0+8
INDIRF4
SUBF4
ASGNF4
line 518
;518:}
LABELV $178
endproc AnglesToAxis 16 16
export AxisClear
proc AxisClear 0 0
line 520
;519:
;520:void AxisClear(vec3_t axis[3]) {
line 521
;521:	axis[0][0] = 1;
ADDRFP4 0
INDIRP4
CNSTF4 1065353216
ASGNF4
line 522
;522:	axis[0][1] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 0
ASGNF4
line 523
;523:	axis[0][2] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 0
ASGNF4
line 524
;524:	axis[1][0] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 0
ASGNF4
line 525
;525:	axis[1][1] = 1;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 1065353216
ASGNF4
line 526
;526:	axis[1][2] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTF4 0
ASGNF4
line 527
;527:	axis[2][0] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 528
;528:	axis[2][1] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 529
;529:	axis[2][2] = 1;
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1065353216
ASGNF4
line 530
;530:}
LABELV $183
endproc AxisClear 0 0
export AxisCopy
proc AxisCopy 0 0
line 532
;531:
;532:void AxisCopy(vec3_t in[3], vec3_t out[3]) {
line 533
;533:	VectorCopy(in[0], out[0]);
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 534
;534:	VectorCopy(in[1], out[1]);
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 535
;535:	VectorCopy(in[2], out[2]);
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 536
;536:}
LABELV $184
endproc AxisCopy 0 0
export ProjectPointOnPlane
proc ProjectPointOnPlane 40 4
line 538
;537:
;538:void ProjectPointOnPlane(vec3_t dst, const vec3_t p, const vec3_t normal) {
line 543
;539:	float  d;
;540:	vec3_t n;
;541:	float  inv_denom;
;542:
;543:	inv_denom = DotProduct(normal, normal);
ADDRLP4 20
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 24
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 544
;544:	if (Q_fabs(inv_denom) == 0.0f) {
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 28
ADDRGP4 Q_fabs
CALLF4
ASGNF4
ADDRLP4 28
INDIRF4
CNSTF4 0
NEF4 $186
line 545
;545:		VectorCopy(p, dst);
ADDRFP4 0
INDIRP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 546
;546:		return;
ADDRGP4 $185
JUMPV
LABELV $186
line 551
;547:	}
;548:#ifndef Q3_VM
;549:	// assert( Q_fabs(inv_denom) != 0.0f ); // zero vectors get here
;550:#endif
;551:	inv_denom = 1.0f / inv_denom;
ADDRLP4 0
CNSTF4 1065353216
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 553
;552:
;553:	d = DotProduct(normal, p) * inv_denom;
ADDRLP4 32
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRF4
MULF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 555
;554:
;555:	n[0] = normal[0] * inv_denom;
ADDRLP4 4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 556
;556:	n[1] = normal[1] * inv_denom;
ADDRLP4 4+4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 557
;557:	n[2] = normal[2] * inv_denom;
ADDRLP4 4+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 559
;558:
;559:	dst[0] = p[0] - d * n[0];
ADDRFP4 0
INDIRP4
ADDRFP4 4
INDIRP4
INDIRF4
ADDRLP4 16
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
SUBF4
ASGNF4
line 560
;560:	dst[1] = p[1] - d * n[1];
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
SUBF4
ASGNF4
line 561
;561:	dst[2] = p[2] - d * n[2];
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
SUBF4
ASGNF4
line 562
;562:}
LABELV $185
endproc ProjectPointOnPlane 40 4
export MakeNormalVectors
proc MakeNormalVectors 24 12
line 572
;563:
;564:/*
;565:================
;566:MakeNormalVectors
;567:
;568:Given a normalized forward vector, create two
;569:other perpendicular vectors
;570:================
;571:*/
;572:void MakeNormalVectors(const vec3_t forward, vec3_t right, vec3_t up) {
line 577
;573:	float d;
;574:
;575:	// this rotate and negate guarantees a vector
;576:	// not colinear with the original
;577:	right[1] = -forward[0];
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
INDIRF4
NEGF4
ASGNF4
line 578
;578:	right[2] = forward[1];
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 579
;579:	right[0] = forward[2];
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 581
;580:
;581:	d = DotProduct(right, forward);
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 8
INDIRP4
INDIRF4
MULF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 582
;582:	VectorMA(right, -d, forward, right);
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 583
;583:	VectorNormalize(right);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 584
;584:	CrossProduct(right, forward, up);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 585
;585:}
LABELV $192
endproc MakeNormalVectors 24 12
export VectorRotate
proc VectorRotate 24 0
line 587
;586:
;587:void VectorRotate(vec3_t in, vec3_t matrix[3], vec3_t out) {
line 588
;588:	out[0] = DotProduct(in, matrix[0]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
ADDRLP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 589
;589:	out[1] = DotProduct(in, matrix[1]);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 590
;590:	out[2] = DotProduct(in, matrix[2]);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 591
;591:}
LABELV $193
endproc VectorRotate 24 0
export Q_rsqrt
proc Q_rsqrt 20 0
line 599
;592:
;593://============================================================================
;594:
;595:#if !idppc
;596:/*
;597:** float q_rsqrt( float number )
;598:*/
;599:float Q_rsqrt(float number) {
line 602
;600:	long        i;
;601:	float       x2, y;
;602:	const float threehalfs = 1.5F;
ADDRLP4 12
CNSTF4 1069547520
ASGNF4
line 604
;603:
;604:	x2 = number * 0.5F;
ADDRLP4 8
ADDRFP4 0
INDIRF4
CNSTF4 1056964608
MULF4
ASGNF4
line 605
;605:	y  = number;
ADDRLP4 0
ADDRFP4 0
INDIRF4
ASGNF4
line 606
;606:	i  = *(long*)&y;             // evil floating point bit level hacking
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
line 607
;607:	i  = 0x5f3759df - (i >> 1);  // what the fuck?
ADDRLP4 4
CNSTI4 1597463007
ADDRLP4 4
INDIRI4
CNSTI4 1
RSHI4
SUBI4
ASGNI4
line 608
;608:	y  = *(float*)&i;
ADDRLP4 0
ADDRLP4 4
INDIRF4
ASGNF4
line 609
;609:	y  = y * (threehalfs - (x2 * y * y));  // 1st iteration
ADDRLP4 16
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 16
INDIRF4
ADDRLP4 12
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 16
INDIRF4
MULF4
SUBF4
MULF4
ASGNF4
line 612
;610:	                                       //	y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed
;611:
;612:	return y;
ADDRLP4 0
INDIRF4
RETF4
LABELV $194
endproc Q_rsqrt 20 0
export Q_fabs
proc Q_fabs 4 0
line 615
;613:}
;614:
;615:float Q_fabs(float f) {
line 616
;616:	int tmp = *(int*)&f;
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
line 617
;617:	tmp &= 0x7FFFFFFF;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 2147483647
BANDI4
ASGNI4
line 618
;618:	return *(float*)&tmp;
ADDRLP4 0
INDIRF4
RETF4
LABELV $195
endproc Q_fabs 4 0
export LerpAngle
proc LerpAngle 8 0
line 630
;619:}
;620:#endif
;621:
;622://============================================================
;623:
;624:/*
;625:===============
;626:LerpAngle
;627:
;628:===============
;629:*/
;630:float LerpAngle(float from, float to, float frac) {
line 633
;631:	float a;
;632:
;633:	if (to - from > 180) {
ADDRFP4 4
INDIRF4
ADDRFP4 0
INDIRF4
SUBF4
CNSTF4 1127481344
LEF4 $197
line 634
;634:		to -= 360;
ADDRFP4 4
ADDRFP4 4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 635
;635:	}
LABELV $197
line 636
;636:	if (to - from < -180) {
ADDRFP4 4
INDIRF4
ADDRFP4 0
INDIRF4
SUBF4
CNSTF4 3274964992
GEF4 $199
line 637
;637:		to += 360;
ADDRFP4 4
ADDRFP4 4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 638
;638:	}
LABELV $199
line 639
;639:	a = from + frac * (to - from);
ADDRLP4 4
ADDRFP4 0
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 4
INDIRF4
ADDRFP4 8
INDIRF4
ADDRFP4 4
INDIRF4
ADDRLP4 4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 641
;640:
;641:	return a;
ADDRLP4 0
INDIRF4
RETF4
LABELV $196
endproc LerpAngle 8 0
export AngleSubtract
proc AngleSubtract 4 0
line 651
;642:}
;643:
;644:/*
;645:=================
;646:AngleSubtract
;647:
;648:Always returns a value from -180 to 180
;649:=================
;650:*/
;651:float AngleSubtract(float a1, float a2) {
line 654
;652:	float a;
;653:
;654:	a = a1 - a2;
ADDRLP4 0
ADDRFP4 0
INDIRF4
ADDRFP4 4
INDIRF4
SUBF4
ASGNF4
ADDRGP4 $203
JUMPV
LABELV $202
line 655
;655:	while (a > 180) {
line 656
;656:		a -= 360;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 657
;657:	}
LABELV $203
line 655
ADDRLP4 0
INDIRF4
CNSTF4 1127481344
GTF4 $202
ADDRGP4 $206
JUMPV
LABELV $205
line 658
;658:	while (a < -180) {
line 659
;659:		a += 360;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 660
;660:	}
LABELV $206
line 658
ADDRLP4 0
INDIRF4
CNSTF4 3274964992
LTF4 $205
line 661
;661:	return a;
ADDRLP4 0
INDIRF4
RETF4
LABELV $201
endproc AngleSubtract 4 0
export AnglesSubtract
proc AnglesSubtract 12 8
line 664
;662:}
;663:
;664:void AnglesSubtract(vec3_t v1, vec3_t v2, vec3_t v3) {
line 665
;665:	v3[0] = AngleSubtract(v1[0], v2[0]);
ADDRFP4 0
INDIRP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRFP4 8
INDIRP4
ADDRLP4 0
INDIRF4
ASGNF4
line 666
;666:	v3[1] = AngleSubtract(v1[1], v2[1]);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 4
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 667
;667:	v3[2] = AngleSubtract(v1[2], v2[2]);
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 8
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 668
;668:}
LABELV $208
endproc AnglesSubtract 12 8
export AngleMod
proc AngleMod 0 0
line 670
;669:
;670:float AngleMod(float a) {
line 671
;671:	a = (360.0 / 65536) * ((int)(a * (65536 / 360.0)) & 65535);
ADDRFP4 0
ADDRFP4 0
INDIRF4
CNSTF4 1127615329
MULF4
CVFI4 4
CNSTI4 65535
BANDI4
CVIF4 4
CNSTF4 1001652224
MULF4
ASGNF4
line 672
;672:	return a;
ADDRFP4 0
INDIRF4
RETF4
LABELV $209
endproc AngleMod 0 0
export AngleNormalize360
proc AngleNormalize360 0 0
line 682
;673:}
;674:
;675:/*
;676:=================
;677:AngleNormalize360
;678:
;679:returns angle normalized to the range [0 <= angle < 360]
;680:=================
;681:*/
;682:float AngleNormalize360(float angle) {
line 683
;683:	return (360.0 / 65536) * ((int)(angle * (65536 / 360.0)) & 65535);
ADDRFP4 0
INDIRF4
CNSTF4 1127615329
MULF4
CVFI4 4
CNSTI4 65535
BANDI4
CVIF4 4
CNSTF4 1001652224
MULF4
RETF4
LABELV $210
endproc AngleNormalize360 0 0
export AngleNormalize180
proc AngleNormalize180 4 4
line 693
;684:}
;685:
;686:/*
;687:=================
;688:AngleNormalize180
;689:
;690:returns angle normalized to the range [-180 < angle <= 180]
;691:=================
;692:*/
;693:float AngleNormalize180(float angle) {
line 694
;694:	angle = AngleNormalize360(angle);
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 0
ADDRGP4 AngleNormalize360
CALLF4
ASGNF4
ADDRFP4 0
ADDRLP4 0
INDIRF4
ASGNF4
line 695
;695:	if (angle > 180.0) {
ADDRFP4 0
INDIRF4
CNSTF4 1127481344
LEF4 $212
line 696
;696:		angle -= 360.0;
ADDRFP4 0
ADDRFP4 0
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 697
;697:	}
LABELV $212
line 698
;698:	return angle;
ADDRFP4 0
INDIRF4
RETF4
LABELV $211
endproc AngleNormalize180 4 4
export AngleDelta
proc AngleDelta 4 4
line 708
;699:}
;700:
;701:/*
;702:=================
;703:AngleDelta
;704:
;705:returns the normalized delta from angle1 to angle2
;706:=================
;707:*/
;708:float AngleDelta(float angle1, float angle2) {
line 709
;709:	return AngleNormalize180(angle1 - angle2);
ADDRFP4 0
INDIRF4
ADDRFP4 4
INDIRF4
SUBF4
ARGF4
ADDRLP4 0
ADDRGP4 AngleNormalize180
CALLF4
ASGNF4
ADDRLP4 0
INDIRF4
RETF4
LABELV $214
endproc AngleDelta 4 4
export SetPlaneSignbits
proc SetPlaneSignbits 8 0
line 719
;710:}
;711:
;712://============================================================
;713:
;714:/*
;715:=================
;716:SetPlaneSignbits
;717:=================
;718:*/
;719:void SetPlaneSignbits(cplane_t* out) {
line 723
;720:	int bits, j;
;721:
;722:	// for fast box on planeside test
;723:	bits = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 724
;724:	for (j = 0; j < 3; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $216
line 725
;725:		if (out->normal[j] < 0) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
CNSTF4 0
GEF4 $220
line 726
;726:			bits |= 1 << j;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BORI4
ASGNI4
line 727
;727:		}
LABELV $220
line 728
;728:	}
LABELV $217
line 724
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $216
line 729
;729:	out->signbits = bits;
ADDRFP4 0
INDIRP4
CNSTI4 17
ADDP4
ADDRLP4 4
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 730
;730:}
LABELV $215
endproc SetPlaneSignbits 8 0
export BoxOnPlaneSide
proc BoxOnPlaneSide 152 0
line 777
;731:
;732:/*
;733:==================
;734:BoxOnPlaneSide
;735:
;736:Returns 1, 2, or 1 + 2
;737:
;738:// this is the slow, general version
;739:int BoxOnPlaneSide2 (vec3_t emins, vec3_t emaxs, struct cplane_s *p)
;740:{
;741:    int		i;
;742:    float	dist1, dist2;
;743:    int		sides;
;744:    vec3_t	corners[2];
;745:
;746:    for (i=0 ; i<3 ; i++)
;747:    {
;748:        if (p->normal[i] < 0)
;749:        {
;750:            corners[0][i] = emins[i];
;751:            corners[1][i] = emaxs[i];
;752:        }
;753:        else
;754:        {
;755:            corners[1][i] = emins[i];
;756:            corners[0][i] = emaxs[i];
;757:        }
;758:    }
;759:    dist1 = DotProduct (p->normal, corners[0]) - p->dist;
;760:    dist2 = DotProduct (p->normal, corners[1]) - p->dist;
;761:    sides = 0;
;762:    if (dist1 >= 0)
;763:        sides = 1;
;764:    if (dist2 < 0)
;765:        sides |= 2;
;766:
;767:    return sides;
;768:}
;769:
;770:==================
;771:*/
;772:
;773:#if !((defined __linux__ || __FreeBSD__) && (defined __i386__) && (!defined C_ONLY))  // rb010123
;774:
;775:#if defined __LCC__ || defined C_ONLY || !id386 || defined __VECTORC
;776:
;777:int                                                        BoxOnPlaneSide(vec3_t emins, vec3_t emaxs, struct cplane_s* p) {
line 782
;778:														   float dist1, dist2;
;779:														   int   sides;
;780:
;781:														   // fast axial cases
;782:														   if (p->type < 3) {
ADDRFP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRU1
CVUI4 1
CNSTI4 3
GEI4 $223
line 783
;783:															   if (p->dist <= emins[p->type])
ADDRLP4 12
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
INDIRU1
CVUI4 1
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
GTF4 $225
line 784
;784:            return 1;
CNSTI4 1
RETI4
ADDRGP4 $222
JUMPV
LABELV $225
line 785
;785:        if (p->dist >= emaxs[p->type])
ADDRLP4 16
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 16
ADDP4
INDIRU1
CVUI4 1
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
LTF4 $227
line 786
;786:            return 2;
CNSTI4 2
RETI4
ADDRGP4 $222
JUMPV
LABELV $227
line 787
;787:        return 3;
CNSTI4 3
RETI4
ADDRGP4 $222
JUMPV
LABELV $223
line 791
;788:    }
;789:
;790:														   // general case
;791:														   switch (p->signbits) {
ADDRLP4 12
ADDRFP4 8
INDIRP4
CNSTI4 17
ADDP4
INDIRU1
CVUI4 1
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
LTI4 $229
ADDRLP4 12
INDIRI4
CNSTI4 7
GTI4 $229
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $240
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $240
address $232
address $233
address $234
address $235
address $236
address $237
address $238
address $239
code
LABELV $232
line 793
;792:														   case 0:
;793:        dist1 = p->normal[0] * emaxs[0] + p->normal[1] * emaxs[1] + p->normal[2] * emaxs[2];
ADDRLP4 20
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
INDIRF4
MULF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 794
;794:        dist2 = p->normal[0] * emins[0] + p->normal[1] * emins[1] + p->normal[2] * emins[2];
ADDRLP4 28
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
INDIRF4
MULF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 795
;795:        break;
ADDRGP4 $230
JUMPV
LABELV $233
line 797
;796:														   case 1:
;797:        dist1 = p->normal[0] * emins[0] + p->normal[1] * emaxs[1] + p->normal[2] * emaxs[2];
ADDRLP4 36
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 40
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
INDIRF4
MULF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 798
;798:        dist2 = p->normal[0] * emaxs[0] + p->normal[1] * emins[1] + p->normal[2] * emins[2];
ADDRLP4 44
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 44
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
MULF4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 799
;799:        break;
ADDRGP4 $230
JUMPV
LABELV $234
line 801
;800:														   case 2:
;801:        dist1 = p->normal[0] * emaxs[0] + p->normal[1] * emins[1] + p->normal[2] * emaxs[2];
ADDRLP4 52
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 56
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRLP4 56
INDIRP4
INDIRF4
MULF4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 52
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 802
;802:        dist2 = p->normal[0] * emins[0] + p->normal[1] * emaxs[1] + p->normal[2] * emins[2];
ADDRLP4 60
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 60
INDIRP4
INDIRF4
ADDRLP4 64
INDIRP4
INDIRF4
MULF4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 60
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 803
;803:        break;
ADDRGP4 $230
JUMPV
LABELV $235
line 805
;804:														   case 3:
;805:        dist1 = p->normal[0] * emins[0] + p->normal[1] * emins[1] + p->normal[2] * emaxs[2];
ADDRLP4 68
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 72
INDIRP4
INDIRF4
MULF4
ADDRLP4 68
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 68
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 806
;806:        dist2 = p->normal[0] * emaxs[0] + p->normal[1] * emaxs[1] + p->normal[2] * emins[2];
ADDRLP4 76
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 80
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 80
INDIRP4
INDIRF4
MULF4
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 76
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 807
;807:        break;
ADDRGP4 $230
JUMPV
LABELV $236
line 809
;808:														   case 4:
;809:        dist1 = p->normal[0] * emaxs[0] + p->normal[1] * emaxs[1] + p->normal[2] * emins[2];
ADDRLP4 84
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 88
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 84
INDIRP4
INDIRF4
ADDRLP4 88
INDIRP4
INDIRF4
MULF4
ADDRLP4 84
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 84
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 810
;810:        dist2 = p->normal[0] * emins[0] + p->normal[1] * emins[1] + p->normal[2] * emaxs[2];
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
MULF4
ADDRLP4 92
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 92
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 811
;811:        break;
ADDRGP4 $230
JUMPV
LABELV $237
line 813
;812:														   case 5:
;813:        dist1 = p->normal[0] * emins[0] + p->normal[1] * emaxs[1] + p->normal[2] * emins[2];
ADDRLP4 100
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 100
INDIRP4
INDIRF4
ADDRLP4 104
INDIRP4
INDIRF4
MULF4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 100
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 104
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 814
;814:        dist2 = p->normal[0] * emaxs[0] + p->normal[1] * emins[1] + p->normal[2] * emaxs[2];
ADDRLP4 108
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 112
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 108
INDIRP4
INDIRF4
ADDRLP4 112
INDIRP4
INDIRF4
MULF4
ADDRLP4 108
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 108
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 112
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 815
;815:        break;
ADDRGP4 $230
JUMPV
LABELV $238
line 817
;816:														   case 6:
;817:        dist1 = p->normal[0] * emaxs[0] + p->normal[1] * emins[1] + p->normal[2] * emins[2];
ADDRLP4 116
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 116
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
MULF4
ADDRLP4 116
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 120
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 116
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 120
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 818
;818:        dist2 = p->normal[0] * emins[0] + p->normal[1] * emaxs[1] + p->normal[2] * emaxs[2];
ADDRLP4 124
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 128
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 124
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
INDIRF4
MULF4
ADDRLP4 124
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 128
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 124
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 128
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 819
;819:        break;
ADDRGP4 $230
JUMPV
LABELV $239
line 821
;820:														   case 7:
;821:        dist1 = p->normal[0] * emins[0] + p->normal[1] * emins[1] + p->normal[2] * emins[2];
ADDRLP4 132
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 132
INDIRP4
INDIRF4
ADDRLP4 136
INDIRP4
INDIRF4
MULF4
ADDRLP4 132
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 136
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 132
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 136
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 822
;822:        dist2 = p->normal[0] * emaxs[0] + p->normal[1] * emaxs[1] + p->normal[2] * emaxs[2];
ADDRLP4 140
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 144
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 140
INDIRP4
INDIRF4
ADDRLP4 144
INDIRP4
INDIRF4
MULF4
ADDRLP4 140
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 144
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 140
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 144
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 823
;823:        break;
ADDRGP4 $230
JUMPV
LABELV $229
line 825
;824:														   default:
;825:        dist1 = dist2 = 0;  // shut up compiler
ADDRLP4 148
CNSTF4 0
ASGNF4
ADDRLP4 8
ADDRLP4 148
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 148
INDIRF4
ASGNF4
line 826
;826:        break;
LABELV $230
line 829
;827:    }
;828:
;829:														   sides = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 830
;830:														   if (dist1 >= p->dist)
ADDRLP4 4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
LTF4 $241
line 831
;831:        sides = 1;
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $241
line 832
;832:    if (dist2 < p->dist)
ADDRLP4 8
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
GEF4 $243
line 833
;833:        sides |= 2;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 2
BORI4
ASGNI4
LABELV $243
line 835
;834:
;835:    return sides;
ADDRLP4 0
INDIRI4
RETI4
LABELV $222
endproc BoxOnPlaneSide 152 0
export RadiusFromBounds
proc RadiusFromBounds 36 4
line 1078
;836:}
;837:#else
;838:#pragma warning(disable : 4035)
;839:
;840:__declspec(naked) int BoxOnPlaneSide(vec3_t emins, vec3_t emaxs, struct cplane_s* p) {
;841:	static int bops_initialized;
;842:	static int Ljmptab[8];
;843:
;844:	__asm {
;845:
;846:		push ebx
;847:			
;848:		cmp bops_initialized, 1
;849:		je  initialized
;850:		mov bops_initialized, 1
;851:		
;852:		mov Ljmptab[0*4], offset Lcase0
;853:		mov Ljmptab[1*4], offset Lcase1
;854:		mov Ljmptab[2*4], offset Lcase2
;855:		mov Ljmptab[3*4], offset Lcase3
;856:		mov Ljmptab[4*4], offset Lcase4
;857:		mov Ljmptab[5*4], offset Lcase5
;858:		mov Ljmptab[6*4], offset Lcase6
;859:		mov Ljmptab[7*4], offset Lcase7
;860:			
;861:initialized:
;862:
;863:		mov edx,dword ptr[4+12+esp]
;864:		mov ecx,dword ptr[4+4+esp]
;865:		xor eax,eax
;866:		mov ebx,dword ptr[4+8+esp]
;867:		mov al,byte ptr[17+edx]
;868:		cmp al,8
;869:		jge Lerror
;870:		fld dword ptr[0+edx]
;871:		fld st(0)
;872:		jmp dword ptr[Ljmptab+eax*4]
;873:Lcase0:
;874:		fmul dword ptr[ebx]
;875:		fld dword ptr[0+4+edx]
;876:		fxch st(2)
;877:		fmul dword ptr[ecx]
;878:		fxch st(2)
;879:		fld st(0)
;880:		fmul dword ptr[4+ebx]
;881:		fld dword ptr[0+8+edx]
;882:		fxch st(2)
;883:		fmul dword ptr[4+ecx]
;884:		fxch st(2)
;885:		fld st(0)
;886:		fmul dword ptr[8+ebx]
;887:		fxch st(5)
;888:		faddp st(3),st(0)
;889:		fmul dword ptr[8+ecx]
;890:		fxch st(1)
;891:		faddp st(3),st(0)
;892:		fxch st(3)
;893:		faddp st(2),st(0)
;894:		jmp LSetSides
;895:Lcase1:
;896:		fmul dword ptr[ecx]
;897:		fld dword ptr[0+4+edx]
;898:		fxch st(2)
;899:		fmul dword ptr[ebx]
;900:		fxch st(2)
;901:		fld st(0)
;902:		fmul dword ptr[4+ebx]
;903:		fld dword ptr[0+8+edx]
;904:		fxch st(2)
;905:		fmul dword ptr[4+ecx]
;906:		fxch st(2)
;907:		fld st(0)
;908:		fmul dword ptr[8+ebx]
;909:		fxch st(5)
;910:		faddp st(3),st(0)
;911:		fmul dword ptr[8+ecx]
;912:		fxch st(1)
;913:		faddp st(3),st(0)
;914:		fxch st(3)
;915:		faddp st(2),st(0)
;916:		jmp LSetSides
;917:Lcase2:
;918:		fmul dword ptr[ebx]
;919:		fld dword ptr[0+4+edx]
;920:		fxch st(2)
;921:		fmul dword ptr[ecx]
;922:		fxch st(2)
;923:		fld st(0)
;924:		fmul dword ptr[4+ecx]
;925:		fld dword ptr[0+8+edx]
;926:		fxch st(2)
;927:		fmul dword ptr[4+ebx]
;928:		fxch st(2)
;929:		fld st(0)
;930:		fmul dword ptr[8+ebx]
;931:		fxch st(5)
;932:		faddp st(3),st(0)
;933:		fmul dword ptr[8+ecx]
;934:		fxch st(1)
;935:		faddp st(3),st(0)
;936:		fxch st(3)
;937:		faddp st(2),st(0)
;938:		jmp LSetSides
;939:Lcase3:
;940:		fmul dword ptr[ecx]
;941:		fld dword ptr[0+4+edx]
;942:		fxch st(2)
;943:		fmul dword ptr[ebx]
;944:		fxch st(2)
;945:		fld st(0)
;946:		fmul dword ptr[4+ecx]
;947:		fld dword ptr[0+8+edx]
;948:		fxch st(2)
;949:		fmul dword ptr[4+ebx]
;950:		fxch st(2)
;951:		fld st(0)
;952:		fmul dword ptr[8+ebx]
;953:		fxch st(5)
;954:		faddp st(3),st(0)
;955:		fmul dword ptr[8+ecx]
;956:		fxch st(1)
;957:		faddp st(3),st(0)
;958:		fxch st(3)
;959:		faddp st(2),st(0)
;960:		jmp LSetSides
;961:Lcase4:
;962:		fmul dword ptr[ebx]
;963:		fld dword ptr[0+4+edx]
;964:		fxch st(2)
;965:		fmul dword ptr[ecx]
;966:		fxch st(2)
;967:		fld st(0)
;968:		fmul dword ptr[4+ebx]
;969:		fld dword ptr[0+8+edx]
;970:		fxch st(2)
;971:		fmul dword ptr[4+ecx]
;972:		fxch st(2)
;973:		fld st(0)
;974:		fmul dword ptr[8+ecx]
;975:		fxch st(5)
;976:		faddp st(3),st(0)
;977:		fmul dword ptr[8+ebx]
;978:		fxch st(1)
;979:		faddp st(3),st(0)
;980:		fxch st(3)
;981:		faddp st(2),st(0)
;982:		jmp LSetSides
;983:Lcase5:
;984:		fmul dword ptr[ecx]
;985:		fld dword ptr[0+4+edx]
;986:		fxch st(2)
;987:		fmul dword ptr[ebx]
;988:		fxch st(2)
;989:		fld st(0)
;990:		fmul dword ptr[4+ebx]
;991:		fld dword ptr[0+8+edx]
;992:		fxch st(2)
;993:		fmul dword ptr[4+ecx]
;994:		fxch st(2)
;995:		fld st(0)
;996:		fmul dword ptr[8+ecx]
;997:		fxch st(5)
;998:		faddp st(3),st(0)
;999:		fmul dword ptr[8+ebx]
;1000:		fxch st(1)
;1001:		faddp st(3),st(0)
;1002:		fxch st(3)
;1003:		faddp st(2),st(0)
;1004:		jmp LSetSides
;1005:Lcase6:
;1006:		fmul dword ptr[ebx]
;1007:		fld dword ptr[0+4+edx]
;1008:		fxch st(2)
;1009:		fmul dword ptr[ecx]
;1010:		fxch st(2)
;1011:		fld st(0)
;1012:		fmul dword ptr[4+ecx]
;1013:		fld dword ptr[0+8+edx]
;1014:		fxch st(2)
;1015:		fmul dword ptr[4+ebx]
;1016:		fxch st(2)
;1017:		fld st(0)
;1018:		fmul dword ptr[8+ecx]
;1019:		fxch st(5)
;1020:		faddp st(3),st(0)
;1021:		fmul dword ptr[8+ebx]
;1022:		fxch st(1)
;1023:		faddp st(3),st(0)
;1024:		fxch st(3)
;1025:		faddp st(2),st(0)
;1026:		jmp LSetSides
;1027:Lcase7:
;1028:		fmul dword ptr[ecx]
;1029:		fld dword ptr[0+4+edx]
;1030:		fxch st(2)
;1031:		fmul dword ptr[ebx]
;1032:		fxch st(2)
;1033:		fld st(0)
;1034:		fmul dword ptr[4+ecx]
;1035:		fld dword ptr[0+8+edx]
;1036:		fxch st(2)
;1037:		fmul dword ptr[4+ebx]
;1038:		fxch st(2)
;1039:		fld st(0)
;1040:		fmul dword ptr[8+ecx]
;1041:		fxch st(5)
;1042:		faddp st(3),st(0)
;1043:		fmul dword ptr[8+ebx]
;1044:		fxch st(1)
;1045:		faddp st(3),st(0)
;1046:		fxch st(3)
;1047:		faddp st(2),st(0)
;1048:LSetSides:
;1049:		faddp st(2),st(0)
;1050:		fcomp dword ptr[12+edx]
;1051:		xor ecx,ecx
;1052:		fnstsw ax
;1053:		fcomp dword ptr[12+edx]
;1054:		and ah,1
;1055:		xor ah,1
;1056:		add cl,ah
;1057:		fnstsw ax
;1058:		and ah,1
;1059:		add ah,ah
;1060:		add cl,ah
;1061:		pop ebx
;1062:		mov eax,ecx
;1063:		ret
;1064:Lerror:
;1065:		int 3
;1066:	}
;1067:}
;1068:#pragma warning(default : 4035)
;1069:
;1070:#endif
;1071:#endif
;1072:
;1073:/*
;1074:=================
;1075:RadiusFromBounds
;1076:=================
;1077:*/
;1078:float RadiusFromBounds(const vec3_t mins, const vec3_t maxs) {
line 1083
;1079:	int    i;
;1080:	vec3_t corner;
;1081:	float  a, b;
;1082:
;1083:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $246
line 1084
;1084:		a         = fabs(mins[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 24
INDIRF4
ASGNF4
line 1085
;1085:		b         = fabs(maxs[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 28
INDIRF4
ASGNF4
line 1086
;1086:		corner[i] = a > b ? a : b;
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
LEF4 $251
ADDRLP4 32
ADDRLP4 4
INDIRF4
ASGNF4
ADDRGP4 $252
JUMPV
LABELV $251
ADDRLP4 32
ADDRLP4 8
INDIRF4
ASGNF4
LABELV $252
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
line 1087
;1087:	}
LABELV $247
line 1083
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $246
line 1089
;1088:
;1089:	return VectorLength(corner);
ADDRLP4 12
ARGP4
ADDRLP4 24
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
INDIRF4
RETF4
LABELV $245
endproc RadiusFromBounds 36 4
export ClearBounds
proc ClearBounds 16 0
line 1092
;1090:}
;1091:
;1092:void ClearBounds(vec3_t mins, vec3_t maxs) {
line 1093
;1093:	mins[0] = mins[1] = mins[2] = 99999;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 1203982208
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1094
;1094:	maxs[0] = maxs[1] = maxs[2] = -99999;
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
CNSTF4 3351465856
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRF4
ASGNF4
line 1095
;1095:}
LABELV $253
endproc ClearBounds 16 0
export AddPointToBounds
proc AddPointToBounds 0 0
line 1097
;1096:
;1097:void AddPointToBounds(const vec3_t v, vec3_t mins, vec3_t maxs) {
line 1098
;1098:	if (v[0] < mins[0]) {
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
GEF4 $255
line 1099
;1099:		mins[0] = v[0];
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 1100
;1100:	}
LABELV $255
line 1101
;1101:	if (v[0] > maxs[0]) {
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
LEF4 $257
line 1102
;1102:		maxs[0] = v[0];
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 1103
;1103:	}
LABELV $257
line 1105
;1104:
;1105:	if (v[1] < mins[1]) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
GEF4 $259
line 1106
;1106:		mins[1] = v[1];
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1107
;1107:	}
LABELV $259
line 1108
;1108:	if (v[1] > maxs[1]) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
LEF4 $261
line 1109
;1109:		maxs[1] = v[1];
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1110
;1110:	}
LABELV $261
line 1112
;1111:
;1112:	if (v[2] < mins[2]) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
GEF4 $263
line 1113
;1113:		mins[2] = v[2];
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1114
;1114:	}
LABELV $263
line 1115
;1115:	if (v[2] > maxs[2]) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
LEF4 $265
line 1116
;1116:		maxs[2] = v[2];
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1117
;1117:	}
LABELV $265
line 1118
;1118:}
LABELV $254
endproc AddPointToBounds 0 0
export VectorNormalize
proc VectorNormalize 32 4
line 1120
;1119:
;1120:vec_t VectorNormalize(vec3_t v) {
line 1123
;1121:	float length, ilength;
;1122:
;1123:	length = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1124
;1124:	length = sqrt(length);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
line 1126
;1125:
;1126:	if (length) {
ADDRLP4 0
INDIRF4
CNSTF4 0
EQF4 $268
line 1127
;1127:		ilength = 1 / length;
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 1128
;1128:		v[0] *= ilength;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1129
;1129:		v[1] *= ilength;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1130
;1130:		v[2] *= ilength;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1131
;1131:	}
LABELV $268
line 1133
;1132:
;1133:	return length;
ADDRLP4 0
INDIRF4
RETF4
LABELV $267
endproc VectorNormalize 32 4
export VectorNormalize2
proc VectorNormalize2 20 4
line 1136
;1134:}
;1135:
;1136:vec_t VectorNormalize2(const vec3_t v, vec3_t out) {
line 1139
;1137:	float length, ilength;
;1138:
;1139:	length = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1140
;1140:	length = sqrt(length);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
line 1142
;1141:
;1142:	if (length) {
ADDRLP4 0
INDIRF4
CNSTF4 0
EQF4 $271
line 1146
;1143:#ifndef Q3_VM  // bk0101022 - FPE related
;1144://	  assert( ((Q_fabs(v[0])!=0.0f) || (Q_fabs(v[1])!=0.0f) || (Q_fabs(v[2])!=0.0f)) );
;1145:#endif
;1146:		ilength = 1 / length;
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 0
INDIRF4
DIVF4
ASGNF4
line 1147
;1147:		out[0]  = v[0] * ilength;
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1148
;1148:		out[1]  = v[1] * ilength;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1149
;1149:		out[2]  = v[2] * ilength;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1150
;1150:	} else {
ADDRGP4 $272
JUMPV
LABELV $271
line 1154
;1151:#ifndef Q3_VM  // bk0101022 - FPE related
;1152://	  assert( ((Q_fabs(v[0])==0.0f) && (Q_fabs(v[1])==0.0f) && (Q_fabs(v[2])==0.0f)) );
;1153:#endif
;1154:		VectorClear(out);
ADDRFP4 4
INDIRP4
CNSTF4 0
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 0
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 0
ASGNF4
line 1155
;1155:	}
LABELV $272
line 1157
;1156:
;1157:	return length;
ADDRLP4 0
INDIRF4
RETF4
LABELV $270
endproc VectorNormalize2 20 4
export _VectorMA
proc _VectorMA 0 0
line 1160
;1158:}
;1159:
;1160:void _VectorMA(const vec3_t veca, float scale, const vec3_t vecb, vec3_t vecc) {
line 1161
;1161:	vecc[0] = veca[0] + scale * vecb[0];
ADDRFP4 12
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1162
;1162:	vecc[1] = veca[1] + scale * vecb[1];
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1163
;1163:	vecc[2] = veca[2] + scale * vecb[2];
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1164
;1164:}
LABELV $273
endproc _VectorMA 0 0
export _DotProduct
proc _DotProduct 8 0
line 1166
;1165:
;1166:vec_t _DotProduct(const vec3_t v1, const vec3_t v2) {
line 1167
;1167:	return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
RETF4
LABELV $274
endproc _DotProduct 8 0
export _VectorSubtract
proc _VectorSubtract 0 0
line 1170
;1168:}
;1169:
;1170:void _VectorSubtract(const vec3_t veca, const vec3_t vecb, vec3_t out) {
line 1171
;1171:	out[0] = veca[0] - vecb[0];
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
SUBF4
ASGNF4
line 1172
;1172:	out[1] = veca[1] - vecb[1];
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1173
;1173:	out[2] = veca[2] - vecb[2];
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1174
;1174:}
LABELV $275
endproc _VectorSubtract 0 0
export _VectorAdd
proc _VectorAdd 0 0
line 1176
;1175:
;1176:void _VectorAdd(const vec3_t veca, const vec3_t vecb, vec3_t out) {
line 1177
;1177:	out[0] = veca[0] + vecb[0];
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
ADDF4
ASGNF4
line 1178
;1178:	out[1] = veca[1] + vecb[1];
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1179
;1179:	out[2] = veca[2] + vecb[2];
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1180
;1180:}
LABELV $276
endproc _VectorAdd 0 0
export _VectorCopy
proc _VectorCopy 0 0
line 1182
;1181:
;1182:void _VectorCopy(const vec3_t in, vec3_t out) {
line 1183
;1183:	out[0] = in[0];
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 1184
;1184:	out[1] = in[1];
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1185
;1185:	out[2] = in[2];
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1186
;1186:}
LABELV $277
endproc _VectorCopy 0 0
export _VectorScale
proc _VectorScale 0 0
line 1188
;1187:
;1188:void _VectorScale(const vec3_t in, vec_t scale, vec3_t out) {
line 1189
;1189:	out[0] = in[0] * scale;
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1190
;1190:	out[1] = in[1] * scale;
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1191
;1191:	out[2] = in[2] * scale;
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1192
;1192:}
LABELV $278
endproc _VectorScale 0 0
export Vector4Scale
proc Vector4Scale 0 0
line 1194
;1193:
;1194:void Vector4Scale(const vec4_t in, vec_t scale, vec4_t out) {
line 1195
;1195:	out[0] = in[0] * scale;
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1196
;1196:	out[1] = in[1] * scale;
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1197
;1197:	out[2] = in[2] * scale;
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1198
;1198:	out[3] = in[3] * scale;
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 1199
;1199:}
LABELV $279
endproc Vector4Scale 0 0
export VectorMAM
proc VectorMAM 0 0
line 1201
;1200:
;1201:void VectorMAM(float scale1, vec3_t b1, float scale2, vec3_t b2, vec3_t c) {
line 1202
;1202:	c[0] = scale1 * b1[0] + scale2 * b2[0];
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
MULF4
ADDRFP4 8
INDIRF4
ADDRFP4 12
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1203
;1203:	c[1] = scale1 * b1[1] + scale2 * b2[1];
ADDRFP4 16
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDRFP4 8
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1204
;1204:	c[2] = scale1 * b1[2] + scale2 * b2[2];
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDRFP4 8
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1205
;1205:}
LABELV $280
endproc VectorMAM 0 0
export Q_log2
proc Q_log2 8 0
line 1207
;1206:
;1207:int Q_log2(int val) {
line 1210
;1208:	int answer;
;1209:
;1210:	answer = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $283
JUMPV
LABELV $282
line 1211
;1211:	while ((val >>= 1) != 0) {
line 1212
;1212:		answer++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1213
;1213:	}
LABELV $283
line 1211
ADDRLP4 4
ADDRFP4 0
INDIRI4
CNSTI4 1
RSHI4
ASGNI4
ADDRFP4 0
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $282
line 1214
;1214:	return answer;
ADDRLP4 0
INDIRI4
RETI4
LABELV $281
endproc Q_log2 8 0
export MatrixMultiply
proc MatrixMultiply 72 0
line 1240
;1215:}
;1216:
;1217:/*
;1218:=================
;1219:PlaneTypeForNormal
;1220:=================
;1221:*/
;1222:/*
;1223:int	PlaneTypeForNormal (vec3_t normal) {
;1224:    if ( normal[0] == 1.0 )
;1225:        return PLANE_X;
;1226:    if ( normal[1] == 1.0 )
;1227:        return PLANE_Y;
;1228:    if ( normal[2] == 1.0 )
;1229:        return PLANE_Z;
;1230:
;1231:    return PLANE_NON_AXIAL;
;1232:}
;1233:*/
;1234:
;1235:/*
;1236:================
;1237:MatrixMultiply
;1238:================
;1239:*/
;1240:void MatrixMultiply(float in1[3][3], float in2[3][3], float out[3][3]) {
line 1241
;1241:	out[0][0] = in1[0][0] * in2[0][0] + in1[0][1] * in2[1][0] + in1[0][2] * in2[2][0];
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
ADDRLP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
INDIRF4
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1242
;1242:	out[0][1] = in1[0][0] * in2[0][1] + in1[0][1] * in2[1][1] + in1[0][2] * in2[2][1];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1243
;1243:	out[0][2] = in1[0][0] * in2[0][2] + in1[0][1] * in2[1][2] + in1[0][2] * in2[2][2];
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1244
;1244:	out[1][0] = in1[1][0] * in2[0][0] + in1[1][1] * in2[1][0] + in1[1][2] * in2[2][0];
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
INDIRF4
MULF4
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1245
;1245:	out[1][1] = in1[1][0] * in2[0][1] + in1[1][1] * in2[1][1] + in1[1][2] * in2[2][1];
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDRLP4 32
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 32
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1246
;1246:	out[1][2] = in1[1][0] * in2[0][2] + in1[1][1] * in2[1][2] + in1[1][2] * in2[2][2];
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDRLP4 40
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 40
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1247
;1247:	out[2][0] = in1[2][0] * in2[0][0] + in1[2][1] * in2[1][0] + in1[2][2] * in2[2][0];
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 48
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1248
;1248:	out[2][1] = in1[2][0] * in2[0][1] + in1[2][1] * in2[1][1] + in1[2][2] * in2[2][1];
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 56
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDRLP4 56
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 56
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1249
;1249:	out[2][2] = in1[2][0] * in2[0][2] + in1[2][1] * in2[1][2] + in1[2][2] * in2[2][2];
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 64
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1250
;1250:}
LABELV $285
endproc MatrixMultiply 72 0
bss
align 4
LABELV $287
skip 4
align 4
LABELV $288
skip 4
align 4
LABELV $289
skip 4
align 4
LABELV $290
skip 4
align 4
LABELV $291
skip 4
align 4
LABELV $292
skip 4
export AngleVectors
code
proc AngleVectors 28 4
line 1252
;1251:
;1252:void AngleVectors(const vec3_t angles, vec3_t forward, vec3_t right, vec3_t up) {
line 1257
;1253:	float        angle;
;1254:	static float sr, sp, sy, cr, cp, cy;
;1255:	// static to help MS compiler fp bugs
;1256:
;1257:	angle = angles[YAW] * (M_PI * 2 / 360);
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1016003125
MULF4
ASGNF4
line 1258
;1258:	sy    = sin(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 4
ADDRGP4 sin
CALLF4
ASGNF4
ADDRGP4 $289
ADDRLP4 4
INDIRF4
ASGNF4
line 1259
;1259:	cy    = cos(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 8
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 $292
ADDRLP4 8
INDIRF4
ASGNF4
line 1260
;1260:	angle = angles[PITCH] * (M_PI * 2 / 360);
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1016003125
MULF4
ASGNF4
line 1261
;1261:	sp    = sin(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 sin
CALLF4
ASGNF4
ADDRGP4 $288
ADDRLP4 12
INDIRF4
ASGNF4
line 1262
;1262:	cp    = cos(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 $291
ADDRLP4 16
INDIRF4
ASGNF4
line 1263
;1263:	angle = angles[ROLL] * (M_PI * 2 / 360);
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1016003125
MULF4
ASGNF4
line 1264
;1264:	sr    = sin(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 sin
CALLF4
ASGNF4
ADDRGP4 $287
ADDRLP4 20
INDIRF4
ASGNF4
line 1265
;1265:	cr    = cos(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 24
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 $290
ADDRLP4 24
INDIRF4
ASGNF4
line 1267
;1266:
;1267:	if (forward) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $293
line 1268
;1268:		forward[0] = cp * cy;
ADDRFP4 4
INDIRP4
ADDRGP4 $291
INDIRF4
ADDRGP4 $292
INDIRF4
MULF4
ASGNF4
line 1269
;1269:		forward[1] = cp * sy;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 $291
INDIRF4
ADDRGP4 $289
INDIRF4
MULF4
ASGNF4
line 1270
;1270:		forward[2] = -sp;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 $288
INDIRF4
NEGF4
ASGNF4
line 1271
;1271:	}
LABELV $293
line 1272
;1272:	if (right) {
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $295
line 1273
;1273:		right[0] = (-1 * sr * sp * cy + -1 * cr * -sy);
ADDRFP4 8
INDIRP4
ADDRGP4 $287
INDIRF4
CNSTF4 3212836864
MULF4
ADDRGP4 $288
INDIRF4
MULF4
ADDRGP4 $292
INDIRF4
MULF4
ADDRGP4 $290
INDIRF4
CNSTF4 3212836864
MULF4
ADDRGP4 $289
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1274
;1274:		right[1] = (-1 * sr * sp * sy + -1 * cr * cy);
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 $287
INDIRF4
CNSTF4 3212836864
MULF4
ADDRGP4 $288
INDIRF4
MULF4
ADDRGP4 $289
INDIRF4
MULF4
ADDRGP4 $290
INDIRF4
CNSTF4 3212836864
MULF4
ADDRGP4 $292
INDIRF4
MULF4
ADDF4
ASGNF4
line 1275
;1275:		right[2] = -1 * sr * cp;
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 $287
INDIRF4
CNSTF4 3212836864
MULF4
ADDRGP4 $291
INDIRF4
MULF4
ASGNF4
line 1276
;1276:	}
LABELV $295
line 1277
;1277:	if (up) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $297
line 1278
;1278:		up[0] = (cr * sp * cy + -sr * -sy);
ADDRFP4 12
INDIRP4
ADDRGP4 $290
INDIRF4
ADDRGP4 $288
INDIRF4
MULF4
ADDRGP4 $292
INDIRF4
MULF4
ADDRGP4 $287
INDIRF4
NEGF4
ADDRGP4 $289
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1279
;1279:		up[1] = (cr * sp * sy + -sr * cy);
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 $290
INDIRF4
ADDRGP4 $288
INDIRF4
MULF4
ADDRGP4 $289
INDIRF4
MULF4
ADDRGP4 $287
INDIRF4
NEGF4
ADDRGP4 $292
INDIRF4
MULF4
ADDF4
ASGNF4
line 1280
;1280:		up[2] = cr * cp;
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 $290
INDIRF4
ADDRGP4 $291
INDIRF4
MULF4
ASGNF4
line 1281
;1281:	}
LABELV $297
line 1282
;1282:}
LABELV $286
endproc AngleVectors 28 4
export PerpendicularVector
proc PerpendicularVector 32 12
line 1287
;1283:
;1284:/*
;1285:** assumes "src" is normalized
;1286:*/
;1287:void PerpendicularVector(vec3_t dst, const vec3_t src) {
line 1290
;1288:	int    pos;
;1289:	int    i;
;1290:	float  f, minelem = 1.0F;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 1296
;1291:	vec3_t tempvec;
;1292:
;1293:	/*
;1294:	** find the smallest magnitude axially aligned vector
;1295:	*/
;1296:	for (pos = 0, i = 0; i < 3; i++) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $303
JUMPV
LABELV $300
line 1297
;1297:		f = fabs(src[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 28
INDIRF4
ASGNF4
line 1298
;1298:		if (f < minelem) {
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
GEF4 $304
line 1299
;1299:			pos     = i;
ADDRLP4 12
ADDRLP4 0
INDIRI4
ASGNI4
line 1300
;1300:			minelem = f;
ADDRLP4 8
ADDRLP4 4
INDIRF4
ASGNF4
line 1301
;1301:		}
LABELV $304
line 1302
;1302:	}
LABELV $301
line 1296
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $303
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $300
line 1303
;1303:	tempvec[0] = tempvec[1] = tempvec[2] = 0.0F;
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 16+8
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 28
INDIRF4
ASGNF4
line 1304
;1304:	tempvec[pos]                         = 1.0F;
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
CNSTF4 1065353216
ASGNF4
line 1309
;1305:
;1306:	/*
;1307:	** project the point onto the plane defined by src
;1308:	*/
;1309:	ProjectPointOnPlane(dst, tempvec, src);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 ProjectPointOnPlane
CALLV
pop
line 1314
;1310:
;1311:	/*
;1312:	** normalize the result
;1313:	*/
;1314:	VectorNormalize(dst);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1315
;1315:}
LABELV $299
endproc PerpendicularVector 32 12
export Q_powf
proc Q_powf 4 0
line 1318
;1316:
;1317:float Q_powf ( float x, int y )
;1318:{
line 1319
;1319:	float r = x;
ADDRLP4 0
ADDRFP4 0
INDIRF4
ASGNF4
line 1320
;1320:	for ( y--; y>0; y-- )
ADDRFP4 4
ADDRFP4 4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $312
JUMPV
LABELV $309
line 1321
;1321:		r *= x;
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRFP4 0
INDIRF4
MULF4
ASGNF4
LABELV $310
line 1320
ADDRFP4 4
ADDRFP4 4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $312
ADDRFP4 4
INDIRI4
CNSTI4 0
GTI4 $309
line 1322
;1322:	return r;
ADDRLP4 0
INDIRF4
RETF4
LABELV $308
endproc Q_powf 4 0
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import Q_acos
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
