export CG_InitMarkPolys
code
proc CG_InitMarkPolys 12 12
file "../../../../code/cgame/cg_marks.c"
line 27
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_marks.c -- wall marks
;4:
;5:#include "cg_local.h"
;6:
;7:/*
;8:===================================================================
;9:
;10:MARK POLYS
;11:
;12:===================================================================
;13:*/
;14:
;15:markPoly_t  cg_activeMarkPolys;  // double linked list
;16:markPoly_t* cg_freeMarkPolys;    // single linked list
;17:markPoly_t  cg_markPolys[MAX_MARK_POLYS];
;18:static int  markTotal;
;19:
;20:/*
;21:===================
;22:CG_InitMarkPolys
;23:
;24:This is called at startup and for tournement restarts
;25:===================
;26:*/
;27:void CG_InitMarkPolys(void) {
line 30
;28:	int i;
;29:
;30:	memset(cg_markPolys, 0, sizeof(cg_markPolys));
ADDRGP4 cg_markPolys
ARGP4
CNSTI4 0
ARGI4
CNSTI4 73728
ARGI4
ADDRGP4 memset
CALLP4
pop
line 32
;31:
;32:	cg_activeMarkPolys.nextMark = &cg_activeMarkPolys;
ADDRGP4 cg_activeMarkPolys+4
ADDRGP4 cg_activeMarkPolys
ASGNP4
line 33
;33:	cg_activeMarkPolys.prevMark = &cg_activeMarkPolys;
ADDRLP4 4
ADDRGP4 cg_activeMarkPolys
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 34
;34:	cg_freeMarkPolys            = cg_markPolys;
ADDRGP4 cg_freeMarkPolys
ADDRGP4 cg_markPolys
ASGNP4
line 35
;35:	for (i = 0; i < MAX_MARK_POLYS - 1; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $74
line 36
;36:		cg_markPolys[i].nextMark = &cg_markPolys[i + 1];
ADDRLP4 0
INDIRI4
CNSTI4 288
MULI4
ADDRGP4 cg_markPolys+4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 288
MULI4
ADDRGP4 cg_markPolys+288
ADDP4
ASGNP4
line 37
;37:	}
LABELV $75
line 35
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 255
LTI4 $74
line 38
;38:}
LABELV $72
endproc CG_InitMarkPolys 12 12
export CG_FreeMarkPoly
proc CG_FreeMarkPoly 8 4
line 45
;39:
;40:/*
;41:==================
;42:CG_FreeMarkPoly
;43:==================
;44:*/
;45:void CG_FreeMarkPoly(markPoly_t* le) {
line 46
;46:	if (!le->prevMark) {
ADDRFP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $81
line 47
;47:		CG_Error("CG_FreeLocalEntity: not active");
ADDRGP4 $83
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 48
;48:	}
LABELV $81
line 51
;49:
;50:	// remove from the doubly linked active list
;51:	le->prevMark->nextMark = le->nextMark;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 52
;52:	le->nextMark->prevMark = le->prevMark;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRP4
ASGNP4
line 55
;53:
;54:	// the free list is only singly linked
;55:	le->nextMark     = cg_freeMarkPolys;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_freeMarkPolys
INDIRP4
ASGNP4
line 56
;56:	cg_freeMarkPolys = le;
ADDRGP4 cg_freeMarkPolys
ADDRFP4 0
INDIRP4
ASGNP4
line 57
;57:}
LABELV $80
endproc CG_FreeMarkPoly 8 4
export CG_AllocMark
proc CG_AllocMark 12 12
line 66
;58:
;59:/*
;60:===================
;61:CG_AllocMark
;62:
;63:Will allways succeed, even if it requires freeing an old active mark
;64:===================
;65:*/
;66:markPoly_t* CG_AllocMark(void) {
line 70
;67:	markPoly_t* le;
;68:	int         time;
;69:
;70:	if (!cg_freeMarkPolys) {
ADDRGP4 cg_freeMarkPolys
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $85
line 73
;71:		// no free entities, so free the one at the end of the chain
;72:		// remove the oldest active entity
;73:		time = cg_activeMarkPolys.prevMark->time;
ADDRLP4 4
ADDRGP4 cg_activeMarkPolys
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $88
JUMPV
LABELV $87
line 74
;74:		while (cg_activeMarkPolys.prevMark && time == cg_activeMarkPolys.prevMark->time) {
line 75
;75:			CG_FreeMarkPoly(cg_activeMarkPolys.prevMark);
ADDRGP4 cg_activeMarkPolys
INDIRP4
ARGP4
ADDRGP4 CG_FreeMarkPoly
CALLV
pop
line 76
;76:		}
LABELV $88
line 74
ADDRLP4 8
ADDRGP4 cg_activeMarkPolys
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $90
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
EQI4 $87
LABELV $90
line 77
;77:	}
LABELV $85
line 79
;78:
;79:	le               = cg_freeMarkPolys;
ADDRLP4 0
ADDRGP4 cg_freeMarkPolys
INDIRP4
ASGNP4
line 80
;80:	cg_freeMarkPolys = cg_freeMarkPolys->nextMark;
ADDRLP4 8
ADDRGP4 cg_freeMarkPolys
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 82
;81:
;82:	memset(le, 0, sizeof(*le));
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 288
ARGI4
ADDRGP4 memset
CALLP4
pop
line 85
;83:
;84:	// link into the active list
;85:	le->nextMark                          = cg_activeMarkPolys.nextMark;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ASGNP4
line 86
;86:	le->prevMark                          = &cg_activeMarkPolys;
ADDRLP4 0
INDIRP4
ADDRGP4 cg_activeMarkPolys
ASGNP4
line 87
;87:	cg_activeMarkPolys.nextMark->prevMark = le;
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 88
;88:	cg_activeMarkPolys.nextMark           = le;
ADDRGP4 cg_activeMarkPolys+4
ADDRLP4 0
INDIRP4
ASGNP4
line 89
;89:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $84
endproc CG_AllocMark 12 12
export CG_ImpactMark
proc CG_ImpactMark 6076 28
line 108
;90:}
;91:
;92:/*
;93:=================
;94:CG_ImpactMark
;95:
;96:origin should be a point within a unit of the plane
;97:dir should be the plane normal
;98:
;99:temporary marks will not be stored or randomly oriented, but immediately
;100:passed to the renderer.
;101:=================
;102:*/
;103:#define MAX_MARK_FRAGMENTS 128
;104:#define MAX_MARK_POINTS    384
;105:
;106:void CG_ImpactMark(
;107:	qhandle_t markShader, const vec3_t origin, const vec3_t dir, float orientation, float red, float green, float blue, float alpha, qboolean alphaFade,
;108:	float radius, qboolean temporary) {
line 119
;109:	vec3_t         axis[3];
;110:	float          texCoordScale;
;111:	vec3_t         originalPoints[4];
;112:	byte           colors[4];
;113:	int            i, j;
;114:	int            numFragments;
;115:	markFragment_t markFragments[MAX_MARK_FRAGMENTS], *mf;
;116:	vec3_t         markPoints[MAX_MARK_POINTS];
;117:	vec3_t         projection;
;118:
;119:	if (!cg_addMarks.integer && !temporary) {
ADDRGP4 cg_addMarks+12
INDIRI4
CNSTI4 0
NEI4 $95
ADDRFP4 40
INDIRI4
CNSTI4 0
NEI4 $95
line 120
;120:		return;
ADDRGP4 $94
JUMPV
LABELV $95
line 123
;121:	}
;122:
;123:	if (radius <= 0) {
ADDRFP4 36
INDIRF4
CNSTF4 0
GTF4 $98
line 124
;124:		CG_Error("CG_ImpactMark called with <= 0 radius");
ADDRGP4 $100
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 125
;125:	}
LABELV $98
line 132
;126:
;127:	// if ( markTotal >= MAX_MARK_POLYS ) {
;128:	//	return;
;129:	// }
;130:
;131:	// create the texture axis
;132:	VectorNormalize2(dir, axis[0]);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 133
;133:	PerpendicularVector(axis[1], axis[0]);
ADDRLP4 0+12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 134
;134:	RotatePointAroundVector(axis[2], axis[0], axis[1], orientation);
ADDRLP4 0+24
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 0+12
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 135
;135:	CrossProduct(axis[0], axis[2], axis[1]);
ADDRLP4 0
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+12
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 137
;136:
;137:	texCoordScale = 0.5 * 1.0 / radius;
ADDRLP4 48
CNSTF4 1056964608
ADDRFP4 36
INDIRF4
DIVF4
ASGNF4
line 140
;138:
;139:	// create the full polygon
;140:	for (i = 0; i < 3; i++) {
ADDRLP4 44
CNSTI4 0
ASGNI4
LABELV $106
line 141
;141:		originalPoints[0][i] = origin[i] - radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 5756
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5756
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 5756
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 142
;142:		originalPoints[1][i] = origin[i] + radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 5764
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664+12
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5764
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 5764
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 143
;143:		originalPoints[2][i] = origin[i] + radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 5772
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664+24
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5772
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 5772
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 144
;144:		originalPoints[3][i] = origin[i] - radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 5780
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664+36
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5780
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 5780
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 145
;145:	}
LABELV $107
line 140
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 3
LTI4 $106
line 148
;146:
;147:	// get the fragments
;148:	VectorScale(dir, -20, projection);
ADDRLP4 5752
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 4716
ADDRLP4 5752
INDIRP4
INDIRF4
CNSTF4 3248488448
MULF4
ASGNF4
ADDRLP4 4716+4
ADDRLP4 5752
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 3248488448
MULF4
ASGNF4
ADDRLP4 4716+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 3248488448
MULF4
ASGNF4
line 149
;149:	numFragments = trap_CM_MarkFragments(4, (void*)originalPoints, projection, MAX_MARK_POINTS, markPoints[0], MAX_MARK_FRAGMENTS, markFragments);
CNSTI4 4
ARGI4
ADDRLP4 4664
ARGP4
ADDRLP4 4716
ARGP4
CNSTI4 384
ARGI4
ADDRLP4 56
ARGP4
CNSTI4 128
ARGI4
ADDRLP4 4728
ARGP4
ADDRLP4 5756
ADDRGP4 trap_CM_MarkFragments
CALLI4
ASGNI4
ADDRLP4 4712
ADDRLP4 5756
INDIRI4
ASGNI4
line 151
;150:
;151:	colors[0] = red * 255;
ADDRLP4 5764
ADDRFP4 16
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5768
CNSTF4 1325400064
ASGNF4
ADDRLP4 5764
INDIRF4
ADDRLP4 5768
INDIRF4
LTF4 $124
ADDRLP4 5760
ADDRLP4 5764
INDIRF4
ADDRLP4 5768
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $125
JUMPV
LABELV $124
ADDRLP4 5760
ADDRLP4 5764
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $125
ADDRLP4 52
ADDRLP4 5760
INDIRU4
CVUU1 4
ASGNU1
line 152
;152:	colors[1] = green * 255;
ADDRLP4 5776
ADDRFP4 20
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5780
CNSTF4 1325400064
ASGNF4
ADDRLP4 5776
INDIRF4
ADDRLP4 5780
INDIRF4
LTF4 $128
ADDRLP4 5772
ADDRLP4 5776
INDIRF4
ADDRLP4 5780
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $129
JUMPV
LABELV $128
ADDRLP4 5772
ADDRLP4 5776
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $129
ADDRLP4 52+1
ADDRLP4 5772
INDIRU4
CVUU1 4
ASGNU1
line 153
;153:	colors[2] = blue * 255;
ADDRLP4 5788
ADDRFP4 24
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5792
CNSTF4 1325400064
ASGNF4
ADDRLP4 5788
INDIRF4
ADDRLP4 5792
INDIRF4
LTF4 $132
ADDRLP4 5784
ADDRLP4 5788
INDIRF4
ADDRLP4 5792
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $133
JUMPV
LABELV $132
ADDRLP4 5784
ADDRLP4 5788
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $133
ADDRLP4 52+2
ADDRLP4 5784
INDIRU4
CVUU1 4
ASGNU1
line 154
;154:	colors[3] = alpha * 255;
ADDRLP4 5800
ADDRFP4 28
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5804
CNSTF4 1325400064
ASGNF4
ADDRLP4 5800
INDIRF4
ADDRLP4 5804
INDIRF4
LTF4 $136
ADDRLP4 5796
ADDRLP4 5800
INDIRF4
ADDRLP4 5804
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $137
JUMPV
LABELV $136
ADDRLP4 5796
ADDRLP4 5800
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $137
ADDRLP4 52+3
ADDRLP4 5796
INDIRU4
CVUU1 4
ASGNU1
line 156
;155:
;156:	for (i = 0, mf = markFragments; i < numFragments; i++, mf++) {
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 40
ADDRLP4 4728
ASGNP4
ADDRGP4 $141
JUMPV
LABELV $138
line 163
;157:		polyVert_t* v;
;158:		polyVert_t  verts[MAX_VERTS_ON_POLY];
;159:		markPoly_t* mark;
;160:
;161:		// we have an upper limit on the complexity of polygons
;162:		// that we store persistantly
;163:		if (mf->numPoints > MAX_VERTS_ON_POLY) {
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 10
LEI4 $142
line 164
;164:			mf->numPoints = MAX_VERTS_ON_POLY;
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 10
ASGNI4
line 165
;165:		}
LABELV $142
line 166
;166:		for (j = 0, v = verts; j < mf->numPoints; j++, v++) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 5808
ADDRLP4 5816
ASGNP4
ADDRGP4 $147
JUMPV
LABELV $144
line 169
;167:			vec3_t delta;
;168:
;169:			VectorCopy(markPoints[mf->firstPoint + j], v->xyz);
ADDRLP4 5808
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
ADDRLP4 36
INDIRI4
ADDI4
CNSTI4 12
MULI4
ADDRLP4 56
ADDP4
INDIRB
ASGNB 12
line 171
;170:
;171:			VectorSubtract(v->xyz, origin, delta);
ADDRLP4 6072
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 6056
ADDRLP4 5808
INDIRP4
INDIRF4
ADDRLP4 6072
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 6056+4
ADDRLP4 5808
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 6072
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 6056+8
ADDRLP4 5808
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 172
;172:			v->st[0]           = 0.5 + DotProduct(delta, axis[1]) * texCoordScale;
ADDRLP4 5808
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 6056
INDIRF4
ADDRLP4 0+12
INDIRF4
MULF4
ADDRLP4 6056+4
INDIRF4
ADDRLP4 0+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 6056+8
INDIRF4
ADDRLP4 0+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 173
;173:			v->st[1]           = 0.5 + DotProduct(delta, axis[2]) * texCoordScale;
ADDRLP4 5808
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 6056
INDIRF4
ADDRLP4 0+24
INDIRF4
MULF4
ADDRLP4 6056+4
INDIRF4
ADDRLP4 0+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 6056+8
INDIRF4
ADDRLP4 0+24+8
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 174
;174:			*(int*)v->modulate = *(int*)colors;
ADDRLP4 5808
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 175
;175:		}
LABELV $145
line 166
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 5808
ADDRLP4 5808
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
LABELV $147
ADDRLP4 36
INDIRI4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $144
line 178
;176:
;177:		// if it is a temporary (shadow) mark, add it immediately and forget about it
;178:		if (temporary) {
ADDRFP4 40
INDIRI4
CNSTI4 0
EQI4 $164
line 179
;179:			trap_R_AddPolyToScene(markShader, mf->numPoints, verts);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 5816
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 180
;180:			continue;
ADDRGP4 $139
JUMPV
LABELV $164
line 184
;181:		}
;182:
;183:		// otherwise save it persistantly
;184:		mark                = CG_AllocMark();
ADDRLP4 6056
ADDRGP4 CG_AllocMark
CALLP4
ASGNP4
ADDRLP4 5812
ADDRLP4 6056
INDIRP4
ASGNP4
line 185
;185:		mark->time          = cg.time;
ADDRLP4 5812
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 186
;186:		mark->alphaFade     = alphaFade;
ADDRLP4 5812
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 187
;187:		mark->markShader    = markShader;
ADDRLP4 5812
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 188
;188:		mark->poly.numVerts = mf->numPoints;
ADDRLP4 5812
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 189
;189:		mark->color[0]      = red;
ADDRLP4 5812
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 190
;190:		mark->color[1]      = green;
ADDRLP4 5812
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 191
;191:		mark->color[2]      = blue;
ADDRLP4 5812
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 192
;192:		mark->color[3]      = alpha;
ADDRLP4 5812
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 28
INDIRF4
ASGNF4
line 193
;193:		memcpy(mark->verts, verts, mf->numPoints * sizeof(verts[0]));
ADDRLP4 5812
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 5816
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIU4 4
CNSTU4 24
MULU4
CVUI4 4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 194
;194:		markTotal++;
ADDRLP4 6060
ADDRGP4 markTotal
ASGNP4
ADDRLP4 6060
INDIRP4
ADDRLP4 6060
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 195
;195:	}
LABELV $139
line 156
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 40
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
LABELV $141
ADDRLP4 44
INDIRI4
ADDRLP4 4712
INDIRI4
LTI4 $138
line 196
;196:}
LABELV $94
endproc CG_ImpactMark 6076 28
export CG_AddMarks
proc CG_AddMarks 68 12
line 206
;197:
;198:/*
;199:===============
;200:CG_AddMarks
;201:===============
;202:*/
;203:#define MARK_TOTAL_TIME 10000
;204:#define MARK_FADE_TIME  1000
;205:
;206:void CG_AddMarks(void) {
line 212
;207:	int         j;
;208:	markPoly_t *mp, *next;
;209:	int         t;
;210:	int         fade;
;211:
;212:	if (!cg_addMarks.integer) {
ADDRGP4 cg_addMarks+12
INDIRI4
CNSTI4 0
NEI4 $168
line 213
;213:		return;
ADDRGP4 $167
JUMPV
LABELV $168
line 216
;214:	}
;215:
;216:	mp = cg_activeMarkPolys.nextMark;
ADDRLP4 0
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ASGNP4
line 217
;217:	for (; mp != &cg_activeMarkPolys; mp = next) {
ADDRGP4 $175
JUMPV
LABELV $172
line 220
;218:		// grab next now, so if the local entity is freed we
;219:		// still have it
;220:		next = mp->nextMark;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 223
;221:
;222:		// see if it is time to completely remove it
;223:		if (cg.time > mp->time + MARK_TOTAL_TIME) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 10000
ADDI4
LEI4 $176
line 224
;224:			CG_FreeMarkPoly(mp);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeMarkPoly
CALLV
pop
line 225
;225:			continue;
ADDRGP4 $173
JUMPV
LABELV $176
line 229
;226:		}
;227:
;228:		// fade out the energy bursts
;229:		if (mp->markShader == cgs.media.energyMarkShader) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+148692+388
INDIRI4
NEI4 $179
line 231
;230:
;231:			fade = 450 - 450 * ((cg.time - mp->time) / 3000.0);
ADDRLP4 8
CNSTF4 1138819072
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 967754558
MULF4
CNSTF4 1138819072
MULF4
SUBF4
CVFI4 4
ASGNI4
line 232
;232:			if (fade < 255) {
ADDRLP4 8
INDIRI4
CNSTI4 255
GEI4 $184
line 233
;233:				if (fade < 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
GEI4 $186
line 234
;234:					fade = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 235
;235:				}
LABELV $186
line 236
;236:				if (mp->verts[0].modulate[0] != 0) {
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRU1
CVUI4 1
CNSTI4 0
EQI4 $188
line 237
;237:					for (j = 0; j < mp->poly.numVerts; j++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $193
JUMPV
LABELV $190
line 238
;238:						mp->verts[j].modulate[0] = mp->color[0] * fade;
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 32
CNSTF4 1325400064
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
LTF4 $195
ADDRLP4 20
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $196
JUMPV
LABELV $195
ADDRLP4 20
ADDRLP4 28
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $196
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 20
INDIRU4
CVUU1 4
ASGNU1
line 239
;239:						mp->verts[j].modulate[1] = mp->color[1] * fade;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $198
ADDRLP4 36
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $199
JUMPV
LABELV $198
ADDRLP4 36
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $199
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 36
INDIRU4
CVUU1 4
ASGNU1
line 240
;240:						mp->verts[j].modulate[2] = mp->color[2] * fade;
ADDRLP4 60
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 64
CNSTF4 1325400064
ASGNF4
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
LTF4 $201
ADDRLP4 52
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $202
JUMPV
LABELV $201
ADDRLP4 52
ADDRLP4 60
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $202
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 52
INDIRU4
CVUU1 4
ASGNU1
line 241
;241:					}
LABELV $191
line 237
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $193
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $190
line 242
;242:				}
LABELV $188
line 243
;243:			}
LABELV $184
line 244
;244:		}
LABELV $179
line 247
;245:
;246:		// fade all marks out with time
;247:		t = mp->time + MARK_TOTAL_TIME - cg.time;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 10000
ADDI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 248
;248:		if (t < MARK_FADE_TIME) {
ADDRLP4 12
INDIRI4
CNSTI4 1000
GEI4 $204
line 249
;249:			fade = 255 * t / MARK_FADE_TIME;
ADDRLP4 8
ADDRLP4 12
INDIRI4
CNSTI4 255
MULI4
CNSTI4 1000
DIVI4
ASGNI4
line 250
;250:			if (mp->alphaFade) {
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $206
line 251
;251:				for (j = 0; j < mp->poly.numVerts; j++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $211
JUMPV
LABELV $208
line 252
;252:					mp->verts[j].modulate[3] = fade;
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 23
ADDP4
ADDRLP4 8
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 253
;253:				}
LABELV $209
line 251
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $211
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $208
line 254
;254:			} else {
ADDRGP4 $207
JUMPV
LABELV $206
line 255
;255:				for (j = 0; j < mp->poly.numVerts; j++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $215
JUMPV
LABELV $212
line 256
;256:					mp->verts[j].modulate[0] = mp->color[0] * fade;
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 32
CNSTF4 1325400064
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
LTF4 $217
ADDRLP4 20
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $218
JUMPV
LABELV $217
ADDRLP4 20
ADDRLP4 28
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $218
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 20
INDIRU4
CVUU1 4
ASGNU1
line 257
;257:					mp->verts[j].modulate[1] = mp->color[1] * fade;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $220
ADDRLP4 36
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $221
JUMPV
LABELV $220
ADDRLP4 36
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $221
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 36
INDIRU4
CVUU1 4
ASGNU1
line 258
;258:					mp->verts[j].modulate[2] = mp->color[2] * fade;
ADDRLP4 60
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 64
CNSTF4 1325400064
ASGNF4
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
LTF4 $223
ADDRLP4 52
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $224
JUMPV
LABELV $223
ADDRLP4 52
ADDRLP4 60
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $224
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 52
INDIRU4
CVUU1 4
ASGNU1
line 259
;259:				}
LABELV $213
line 255
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $215
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $212
line 260
;260:			}
LABELV $207
line 261
;261:		}
LABELV $204
line 263
;262:
;263:		trap_R_AddPolyToScene(mp->markShader, mp->poly.numVerts, mp->verts);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 264
;264:	}
LABELV $173
line 217
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
LABELV $175
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg_activeMarkPolys
CVPU4 4
NEU4 $172
line 265
;265:}
LABELV $167
endproc CG_AddMarks 68 12
data
align 4
LABELV shaderAnimNames
address $226
byte 4 0
skip 120
align 4
LABELV shaderAnimCounts
byte 4 23
skip 124
align 4
LABELV shaderAnimSTRatio
byte 4 1065353216
skip 124
export cl_numparticles
align 4
LABELV cl_numparticles
byte 4 1024
export initparticles
align 4
LABELV initparticles
byte 4 0
export CG_ClearParticles
code
proc CG_ClearParticles 24 12
line 359
;266:
;267:// cg_particles.c
;268:
;269:#define BLOODRED    2
;270:#define EMISIVEFADE 3
;271:#define GREY75      4
;272:
;273:typedef struct particle_s {
;274:	struct particle_s* next;
;275:
;276:	int                time;
;277:	int                endtime;
;278:
;279:	vec3_t             org;
;280:	vec3_t             vel;
;281:	vec3_t             accel;
;282:	int                color;
;283:	float              colorvel;
;284:	float              alpha;
;285:	float              alphavel;
;286:	int                type;
;287:	qhandle_t          pshader;
;288:
;289:	float              height;
;290:	float              width;
;291:
;292:	float              endheight;
;293:	float              endwidth;
;294:
;295:	float              start;
;296:	float              end;
;297:
;298:	int                startfade;
;299:	qboolean           rotate;
;300:	int                snum;
;301:
;302:	qboolean           link;
;303:
;304:	// Ridah
;305:	int shaderAnim;
;306:	int roll;
;307:
;308:	int accumroll;
;309:
;310:} cparticle_t;
;311:
;312:typedef enum {
;313:	P_NONE,
;314:	P_WEATHER,
;315:	P_FLAT,
;316:	P_SMOKE,
;317:	P_ROTATE,
;318:	P_WEATHER_TURBULENT,
;319:	P_ANIM,  // Ridah
;320:	P_BAT,
;321:	P_BLEED,
;322:	P_FLAT_SCALEUP,
;323:	P_FLAT_SCALEUP_FADE,
;324:	P_WEATHER_FLURRY,
;325:	P_SMOKE_IMPACT,
;326:	P_BUBBLE,
;327:	P_BUBBLE_TURBULENT,
;328:	P_SPRITE
;329:} particle_type_t;
;330:
;331:#define MAX_SHADER_ANIMS       32
;332:#define MAX_SHADER_ANIM_FRAMES 64
;333:
;334:static char*     shaderAnimNames[MAX_SHADER_ANIMS] = {"explode1", NULL};
;335:static qhandle_t shaderAnims[MAX_SHADER_ANIMS][MAX_SHADER_ANIM_FRAMES];
;336:static int       shaderAnimCounts[MAX_SHADER_ANIMS]  = {23};
;337:static float     shaderAnimSTRatio[MAX_SHADER_ANIMS] = {1.0f};
;338:static int       numShaderAnims;
;339:// done.
;340:
;341:#define PARTICLE_GRAVITY 40
;342:#define MAX_PARTICLES    1024
;343:
;344:cparticle_t *active_particles, *free_particles;
;345:cparticle_t  particles[MAX_PARTICLES];
;346:const int    cl_numparticles = MAX_PARTICLES;
;347:
;348:qboolean     initparticles = qfalse;
;349:vec3_t       pvforward, pvright, pvup;
;350:vec3_t       rforward, rright, rup;
;351:
;352:int          oldtime;
;353:
;354:/*
;355:===============
;356:CL_ClearParticles
;357:===============
;358:*/
;359:void CG_ClearParticles(void) {
line 362
;360:	int i;
;361:
;362:	memset(particles, 0, sizeof(particles));
ADDRGP4 particles
ARGP4
CNSTI4 0
ARGI4
CNSTI4 126976
ARGI4
ADDRGP4 memset
CALLP4
pop
line 364
;363:
;364:	free_particles   = &particles[0];
ADDRGP4 free_particles
ADDRGP4 particles
ASGNP4
line 365
;365:	active_particles = NULL;
ADDRGP4 active_particles
CNSTP4 0
ASGNP4
line 367
;366:
;367:	for (i = 0; i < cl_numparticles; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $231
JUMPV
LABELV $228
line 368
;368:		particles[i].next = &particles[i + 1];
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles+124
ADDP4
ASGNP4
line 369
;369:		particles[i].type = 0;
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles+64
ADDP4
CNSTI4 0
ASGNI4
line 370
;370:	}
LABELV $229
line 367
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $231
ADDRLP4 0
INDIRI4
ADDRGP4 cl_numparticles
INDIRI4
LTI4 $228
line 371
;371:	particles[cl_numparticles - 1].next = NULL;
ADDRGP4 cl_numparticles
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles-124
ADDP4
CNSTP4 0
ASGNP4
line 373
;372:
;373:	oldtime = cg.time;
ADDRGP4 oldtime
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 376
;374:
;375:	// Ridah, init the shaderAnims
;376:	for (i = 0; shaderAnimNames[i]; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $239
JUMPV
LABELV $236
line 379
;377:		int j;
;378:
;379:		for (j = 0; j < shaderAnimCounts[i]; j++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $243
JUMPV
LABELV $240
line 380
;380:			shaderAnims[i][j] = trap_R_RegisterShader(va("%s%i", shaderAnimNames[i], j + 1));
ADDRGP4 $244
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRI4
CNSTI4 8
LSHI4
ADDRGP4 shaderAnims
ADDP4
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 381
;381:		}
LABELV $241
line 379
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $243
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimCounts
ADDP4
INDIRI4
LTI4 $240
line 382
;382:	}
LABELV $237
line 376
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $239
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $236
line 383
;383:	numShaderAnims = i;
ADDRGP4 numShaderAnims
ADDRLP4 0
INDIRI4
ASGNI4
line 386
;384:	// done.
;385:
;386:	initparticles = qtrue;
ADDRGP4 initparticles
CNSTI4 1
ASGNI4
line 387
;387:}
LABELV $227
endproc CG_ClearParticles 24 12
export CG_AddParticleToScene
proc CG_AddParticleToScene 456 16
line 394
;388:
;389:/*
;390:=====================
;391:CG_AddParticleToScene
;392:=====================
;393:*/
;394:void CG_AddParticleToScene(cparticle_t* p, vec3_t org, float alpha) {
line 407
;395:
;396:	vec3_t     point;
;397:	polyVert_t verts[4];
;398:	float      width;
;399:	float      height;
;400:	float      time, time2;
;401:	float      ratio;
;402:	float      invratio;
;403:	vec3_t     color;
;404:	polyVert_t TRIverts[3];
;405:	vec3_t     rright2, rup2;
;406:
;407:	if (p->type == P_WEATHER || p->type == P_WEATHER_TURBULENT || p->type == P_WEATHER_FLURRY || p->type == P_BUBBLE ||
ADDRLP4 240
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 1
EQI4 $251
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
EQI4 $251
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
EQI4 $251
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 13
EQI4 $251
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $246
LABELV $251
line 408
;408:	    p->type == P_BUBBLE_TURBULENT) {  // create a front facing polygon
line 410
;409:
;410:		if (p->type != P_WEATHER_FLURRY) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
EQI4 $252
line 411
;411:			if (p->type == P_BUBBLE || p->type == P_BUBBLE_TURBULENT) {
ADDRLP4 244
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 13
EQI4 $256
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $254
LABELV $256
line 412
;412:				if (org[2] > p->end) {
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
LEF4 $255
line 413
;413:					p->time = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 414
;414:					VectorCopy(org, p->org);  // Ridah, fixes rare snow flakes that flicker on the ground
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 416
;415:
;416:					p->org[2] = (p->start + crandom() * 4);
ADDRLP4 248
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 252
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 252
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 252
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 248
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ADDF4
ASGNF4
line 418
;417:
;418:					if (p->type == P_BUBBLE_TURBULENT) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $255
line 419
;419:						p->vel[0] = crandom() * 4;
ADDRLP4 256
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 256
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 420
;420:						p->vel[1] = crandom() * 4;
ADDRLP4 260
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 260
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 421
;421:					}
line 422
;422:				}
line 423
;423:			} else {
ADDRGP4 $255
JUMPV
LABELV $254
line 424
;424:				if (org[2] < p->end) {
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
GEF4 $262
line 425
;425:					p->time = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 426
;426:					VectorCopy(org, p->org);  // Ridah, fixes rare snow flakes that flicker on the ground
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
ADDRGP4 $266
JUMPV
LABELV $265
line 428
;427:
;428:					while (p->org[2] < p->end) {
line 429
;429:						p->org[2] += (p->start - p->end);
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 252
ADDRLP4 248
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 252
INDIRP4
ADDRLP4 252
INDIRP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
ADDF4
ASGNF4
line 430
;430:					}
LABELV $266
line 428
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 248
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
LTF4 $265
line 432
;431:
;432:					if (p->type == P_WEATHER_TURBULENT) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
NEI4 $268
line 433
;433:						p->vel[0] = crandom() * 16;
ADDRLP4 252
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 252
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 434
;434:						p->vel[1] = crandom() * 16;
ADDRLP4 256
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 256
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 435
;435:					}
LABELV $268
line 436
;436:				}
LABELV $262
line 437
;437:			}
LABELV $255
line 440
;438:
;439:			// Rafael snow pvs check
;440:			if (!p->link)
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
NEI4 $270
line 441
;441:				return;
ADDRGP4 $245
JUMPV
LABELV $270
line 443
;442:
;443:			p->alpha = 1;
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 444
;444:		}
LABELV $252
line 447
;445:
;446:		// Ridah, had to do this or MAX_POLYS is being exceeded in village1.bsp
;447:		if (Distance(cg.snap->ps.origin, org) > 1024) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 244
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 244
INDIRF4
CNSTF4 1149239296
LEF4 $272
line 448
;448:			return;
ADDRGP4 $245
JUMPV
LABELV $272
line 452
;449:		}
;450:		// done.
;451:
;452:		if (p->type == P_BUBBLE || p->type == P_BUBBLE_TURBULENT) {
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 13
EQI4 $277
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $275
LABELV $277
line 453
;453:			VectorMA(org, -p->height, pvup, point);
ADDRLP4 252
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 252
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 252
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 454
;454:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 260
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 455
;455:			VectorCopy(point, verts[0].xyz);
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 456
;456:			verts[0].st[0]       = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 457
;457:			verts[0].st[1]       = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 458
;458:			verts[0].modulate[0] = 255;
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 459
;459:			verts[0].modulate[1] = 255;
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 460
;460:			verts[0].modulate[2] = 255;
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 461
;461:			verts[0].modulate[3] = 255 * p->alpha;
ADDRLP4 268
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 272
CNSTF4 1325400064
ASGNF4
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
LTF4 $299
ADDRLP4 264
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $300
JUMPV
LABELV $299
ADDRLP4 264
ADDRLP4 268
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $300
ADDRLP4 12+20+3
ADDRLP4 264
INDIRU4
CVUU1 4
ASGNU1
line 463
;462:
;463:			VectorMA(org, -p->height, pvup, point);
ADDRLP4 276
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 280
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 276
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 276
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 464
;464:			VectorMA(point, p->width, pvright, point);
ADDRLP4 284
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 465
;465:			VectorCopy(point, verts[1].xyz);
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 466
;466:			verts[1].st[0]       = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 467
;467:			verts[1].st[1]       = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 468
;468:			verts[1].modulate[0] = 255;
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 469
;469:			verts[1].modulate[1] = 255;
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 470
;470:			verts[1].modulate[2] = 255;
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 471
;471:			verts[1].modulate[3] = 255 * p->alpha;
ADDRLP4 292
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 296
CNSTF4 1325400064
ASGNF4
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
LTF4 $329
ADDRLP4 288
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $330
JUMPV
LABELV $329
ADDRLP4 288
ADDRLP4 292
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $330
ADDRLP4 12+24+20+3
ADDRLP4 288
INDIRU4
CVUU1 4
ASGNU1
line 473
;472:
;473:			VectorMA(org, p->height, pvup, point);
ADDRLP4 300
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 304
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 300
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 300
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 474
;474:			VectorMA(point, p->width, pvright, point);
ADDRLP4 308
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 475
;475:			VectorCopy(point, verts[2].xyz);
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 476
;476:			verts[2].st[0]       = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 477
;477:			verts[2].st[1]       = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 478
;478:			verts[2].modulate[0] = 255;
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 479
;479:			verts[2].modulate[1] = 255;
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 480
;480:			verts[2].modulate[2] = 255;
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 481
;481:			verts[2].modulate[3] = 255 * p->alpha;
ADDRLP4 316
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 320
CNSTF4 1325400064
ASGNF4
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
LTF4 $359
ADDRLP4 312
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $360
JUMPV
LABELV $359
ADDRLP4 312
ADDRLP4 316
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $360
ADDRLP4 12+48+20+3
ADDRLP4 312
INDIRU4
CVUU1 4
ASGNU1
line 483
;482:
;483:			VectorMA(org, p->height, pvup, point);
ADDRLP4 324
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 328
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 324
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 328
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 324
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 328
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 484
;484:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 332
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 332
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 332
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 485
;485:			VectorCopy(point, verts[3].xyz);
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 486
;486:			verts[3].st[0]       = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 487
;487:			verts[3].st[1]       = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 488
;488:			verts[3].modulate[0] = 255;
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 489
;489:			verts[3].modulate[1] = 255;
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 490
;490:			verts[3].modulate[2] = 255;
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 491
;491:			verts[3].modulate[3] = 255 * p->alpha;
ADDRLP4 340
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 344
CNSTF4 1325400064
ASGNF4
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
LTF4 $389
ADDRLP4 336
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $390
JUMPV
LABELV $389
ADDRLP4 336
ADDRLP4 340
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $390
ADDRLP4 12+72+20+3
ADDRLP4 336
INDIRU4
CVUU1 4
ASGNU1
line 492
;492:		} else {
ADDRGP4 $247
JUMPV
LABELV $275
line 493
;493:			VectorMA(org, -p->height, pvup, point);
ADDRLP4 252
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 252
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 252
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 494
;494:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 260
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 495
;495:			VectorCopy(point, TRIverts[0].xyz);
ADDRLP4 108
ADDRLP4 0
INDIRB
ASGNB 12
line 496
;496:			TRIverts[0].st[0]       = 1;
ADDRLP4 108+12
CNSTF4 1065353216
ASGNF4
line 497
;497:			TRIverts[0].st[1]       = 0;
ADDRLP4 108+12+4
CNSTF4 0
ASGNF4
line 498
;498:			TRIverts[0].modulate[0] = 255;
ADDRLP4 108+20
CNSTU1 255
ASGNU1
line 499
;499:			TRIverts[0].modulate[1] = 255;
ADDRLP4 108+20+1
CNSTU1 255
ASGNU1
line 500
;500:			TRIverts[0].modulate[2] = 255;
ADDRLP4 108+20+2
CNSTU1 255
ASGNU1
line 501
;501:			TRIverts[0].modulate[3] = 255 * p->alpha;
ADDRLP4 268
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 272
CNSTF4 1325400064
ASGNF4
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
LTF4 $412
ADDRLP4 264
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $413
JUMPV
LABELV $412
ADDRLP4 264
ADDRLP4 268
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $413
ADDRLP4 108+20+3
ADDRLP4 264
INDIRU4
CVUU1 4
ASGNU1
line 503
;502:
;503:			VectorMA(org, p->height, pvup, point);
ADDRLP4 276
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 280
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 276
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 276
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 504
;504:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 284
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 505
;505:			VectorCopy(point, TRIverts[1].xyz);
ADDRLP4 108+24
ADDRLP4 0
INDIRB
ASGNB 12
line 506
;506:			TRIverts[1].st[0]       = 0;
ADDRLP4 108+24+12
CNSTF4 0
ASGNF4
line 507
;507:			TRIverts[1].st[1]       = 0;
ADDRLP4 108+24+12+4
CNSTF4 0
ASGNF4
line 508
;508:			TRIverts[1].modulate[0] = 255;
ADDRLP4 108+24+20
CNSTU1 255
ASGNU1
line 509
;509:			TRIverts[1].modulate[1] = 255;
ADDRLP4 108+24+20+1
CNSTU1 255
ASGNU1
line 510
;510:			TRIverts[1].modulate[2] = 255;
ADDRLP4 108+24+20+2
CNSTU1 255
ASGNU1
line 511
;511:			TRIverts[1].modulate[3] = 255 * p->alpha;
ADDRLP4 292
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 296
CNSTF4 1325400064
ASGNF4
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
LTF4 $442
ADDRLP4 288
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $443
JUMPV
LABELV $442
ADDRLP4 288
ADDRLP4 292
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $443
ADDRLP4 108+24+20+3
ADDRLP4 288
INDIRU4
CVUU1 4
ASGNU1
line 513
;512:
;513:			VectorMA(org, p->height, pvup, point);
ADDRLP4 300
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 304
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 300
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 300
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 514
;514:			VectorMA(point, p->width, pvright, point);
ADDRLP4 308
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 515
;515:			VectorCopy(point, TRIverts[2].xyz);
ADDRLP4 108+48
ADDRLP4 0
INDIRB
ASGNB 12
line 516
;516:			TRIverts[2].st[0]       = 0;
ADDRLP4 108+48+12
CNSTF4 0
ASGNF4
line 517
;517:			TRIverts[2].st[1]       = 1;
ADDRLP4 108+48+12+4
CNSTF4 1065353216
ASGNF4
line 518
;518:			TRIverts[2].modulate[0] = 255;
ADDRLP4 108+48+20
CNSTU1 255
ASGNU1
line 519
;519:			TRIverts[2].modulate[1] = 255;
ADDRLP4 108+48+20+1
CNSTU1 255
ASGNU1
line 520
;520:			TRIverts[2].modulate[2] = 255;
ADDRLP4 108+48+20+2
CNSTU1 255
ASGNU1
line 521
;521:			TRIverts[2].modulate[3] = 255 * p->alpha;
ADDRLP4 316
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 320
CNSTF4 1325400064
ASGNF4
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
LTF4 $472
ADDRLP4 312
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $473
JUMPV
LABELV $472
ADDRLP4 312
ADDRLP4 316
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $473
ADDRLP4 108+48+20+3
ADDRLP4 312
INDIRU4
CVUU1 4
ASGNU1
line 522
;522:		}
line 524
;523:
;524:	} else if (p->type == P_SPRITE) {
ADDRGP4 $247
JUMPV
LABELV $246
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 15
NEI4 $474
line 528
;525:		vec3_t rr, ru;
;526:		vec3_t rotate_ang;
;527:
;528:		VectorSet(color, 1.0, 1.0, 0.5);
ADDRLP4 184
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+4
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+8
CNSTF4 1056964608
ASGNF4
line 529
;529:		time  = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 530
;530:		time2 = p->endtime - p->time;
ADDRLP4 280
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 280
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 280
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 531
;531:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 533
;532:
;533:		width  = p->width + (ratio * (p->endwidth - p->width));
ADDRLP4 284
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 534
;534:		height = p->height + (ratio * (p->endheight - p->height));
ADDRLP4 288
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
ADDRLP4 288
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 288
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 288
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 536
;535:
;536:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $479
line 537
;537:			vectoangles(cg.refdef.viewaxis[0], rotate_ang);
ADDRGP4 cg+109056+36
ARGP4
ADDRLP4 268
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 538
;538:			rotate_ang[ROLL] += p->roll;
ADDRLP4 268+8
ADDRLP4 268+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 539
;539:			AngleVectors(rotate_ang, NULL, rr, ru);
ADDRLP4 268
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 256
ARGP4
ADDRLP4 244
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 540
;540:		}
LABELV $479
line 542
;541:
;542:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $484
line 543
;543:			VectorMA(org, -height, ru, point);
ADDRLP4 292
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 296
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 292
INDIRP4
INDIRF4
ADDRLP4 244
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 292
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 244+4
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 244+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 544
;544:			VectorMA(point, -width, rr, point);
ADDRLP4 300
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 256
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 256+4
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 256+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 545
;545:		} else {
ADDRGP4 $485
JUMPV
LABELV $484
line 546
;546:			VectorMA(org, -height, pvup, point);
ADDRLP4 292
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 296
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 292
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 292
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 547
;547:			VectorMA(point, -width, pvright, point);
ADDRLP4 300
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 548
;548:		}
LABELV $485
line 549
;549:		VectorCopy(point, verts[0].xyz);
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 550
;550:		verts[0].st[0]       = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 551
;551:		verts[0].st[1]       = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 552
;552:		verts[0].modulate[0] = 255;
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 553
;553:		verts[0].modulate[1] = 255;
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 554
;554:		verts[0].modulate[2] = 255;
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 555
;555:		verts[0].modulate[3] = 255;
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 557
;556:
;557:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $516
line 558
;558:			VectorMA(point, 2 * height, ru, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 244
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 244+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 244+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 559
;559:		} else {
ADDRGP4 $517
JUMPV
LABELV $516
line 560
;560:			VectorMA(point, 2 * height, pvup, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 561
;561:		}
LABELV $517
line 562
;562:		VectorCopy(point, verts[1].xyz);
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 563
;563:		verts[1].st[0]       = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 564
;564:		verts[1].st[1]       = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 565
;565:		verts[1].modulate[0] = 255;
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 566
;566:		verts[1].modulate[1] = 255;
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 567
;567:		verts[1].modulate[2] = 255;
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 568
;568:		verts[1].modulate[3] = 255;
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 570
;569:
;570:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $547
line 571
;571:			VectorMA(point, 2 * width, rr, point);
ADDRLP4 292
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 256
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 256+4
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 256+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 572
;572:		} else {
ADDRGP4 $548
JUMPV
LABELV $547
line 573
;573:			VectorMA(point, 2 * width, pvright, point);
ADDRLP4 292
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 574
;574:		}
LABELV $548
line 575
;575:		VectorCopy(point, verts[2].xyz);
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 576
;576:		verts[2].st[0]       = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 577
;577:		verts[2].st[1]       = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 578
;578:		verts[2].modulate[0] = 255;
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 579
;579:		verts[2].modulate[1] = 255;
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 580
;580:		verts[2].modulate[2] = 255;
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 581
;581:		verts[2].modulate[3] = 255;
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 583
;582:
;583:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $578
line 584
;584:			VectorMA(point, -2 * height, ru, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 244
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 244+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 244+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 585
;585:		} else {
ADDRGP4 $579
JUMPV
LABELV $578
line 586
;586:			VectorMA(point, -2 * height, pvup, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 587
;587:		}
LABELV $579
line 588
;588:		VectorCopy(point, verts[3].xyz);
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 589
;589:		verts[3].st[0]       = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 590
;590:		verts[3].st[1]       = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 591
;591:		verts[3].modulate[0] = 255;
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 592
;592:		verts[3].modulate[1] = 255;
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 593
;593:		verts[3].modulate[2] = 255;
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 594
;594:		verts[3].modulate[3] = 255;
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 595
;595:	} else if (p->type == P_SMOKE || p->type == P_SMOKE_IMPACT) {  // create a front rotating facing polygon
ADDRGP4 $475
JUMPV
LABELV $474
ADDRLP4 244
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 3
EQI4 $611
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
NEI4 $609
LABELV $611
line 597
;596:
;597:		if (p->type == P_SMOKE_IMPACT && Distance(cg.snap->ps.origin, org) > 1024) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
NEI4 $612
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 248
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 248
INDIRF4
CNSTF4 1149239296
LEF4 $612
line 598
;598:			return;
ADDRGP4 $245
JUMPV
LABELV $612
line 601
;599:		}
;600:
;601:		if (p->color == BLOODRED)
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $615
line 602
;602:			VectorSet(color, 0.22f, 0.0f, 0.0f);
ADDRLP4 184
CNSTF4 1046562734
ASGNF4
ADDRLP4 184+4
CNSTF4 0
ASGNF4
ADDRLP4 184+8
CNSTF4 0
ASGNF4
ADDRGP4 $616
JUMPV
LABELV $615
line 603
;603:		else if (p->color == GREY75) {
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 4
NEI4 $619
line 607
;604:			float len;
;605:			float greyit;
;606:			float val;
;607:			len = Distance(cg.snap->ps.origin, org);
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 264
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 256
ADDRLP4 264
INDIRF4
ASGNF4
line 608
;608:			if (!len)
ADDRLP4 256
INDIRF4
CNSTF4 0
NEF4 $622
line 609
;609:				len = 1;
ADDRLP4 256
CNSTF4 1065353216
ASGNF4
LABELV $622
line 611
;610:
;611:			val    = 4096 / len;
ADDRLP4 260
CNSTF4 1166016512
ADDRLP4 256
INDIRF4
DIVF4
ASGNF4
line 612
;612:			greyit = 0.25 * val;
ADDRLP4 252
ADDRLP4 260
INDIRF4
CNSTF4 1048576000
MULF4
ASGNF4
line 613
;613:			if (greyit > 0.5)
ADDRLP4 252
INDIRF4
CNSTF4 1056964608
LEF4 $624
line 614
;614:				greyit = 0.5;
ADDRLP4 252
CNSTF4 1056964608
ASGNF4
LABELV $624
line 616
;615:
;616:			VectorSet(color, greyit, greyit, greyit);
ADDRLP4 268
ADDRLP4 252
INDIRF4
ASGNF4
ADDRLP4 184
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+4
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+8
ADDRLP4 252
INDIRF4
ASGNF4
line 617
;617:		} else
ADDRGP4 $620
JUMPV
LABELV $619
line 618
;618:			VectorSet(color, 1.0, 1.0, 1.0);
ADDRLP4 184
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+4
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+8
CNSTF4 1065353216
ASGNF4
LABELV $620
LABELV $616
line 620
;619:
;620:		time  = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 621
;621:		time2 = p->endtime - p->time;
ADDRLP4 252
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 252
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 252
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 622
;622:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 624
;623:
;624:		if (cg.time > p->startfade) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
LEI4 $631
line 625
;625:			invratio = 1 - ((cg.time - p->startfade) / (p->endtime - p->startfade));
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 204
CNSTI4 1
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 256
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
SUBI4
ADDRLP4 256
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 256
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
SUBI4
DIVI4
SUBI4
CVIF4 4
ASGNF4
line 627
;626:
;627:			if (p->color == EMISIVEFADE) {
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 3
NEI4 $635
line 629
;628:				float fval;
;629:				fval = (invratio * invratio);
ADDRLP4 264
ADDRLP4 204
INDIRF4
ASGNF4
ADDRLP4 260
ADDRLP4 264
INDIRF4
ADDRLP4 264
INDIRF4
MULF4
ASGNF4
line 630
;630:				if (fval < 0)
ADDRLP4 260
INDIRF4
CNSTF4 0
GEF4 $637
line 631
;631:					fval = 0;
ADDRLP4 260
CNSTF4 0
ASGNF4
LABELV $637
line 632
;632:				VectorSet(color, fval, fval, fval);
ADDRLP4 268
ADDRLP4 260
INDIRF4
ASGNF4
ADDRLP4 184
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+4
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+8
ADDRLP4 260
INDIRF4
ASGNF4
line 633
;633:			}
LABELV $635
line 634
;634:			invratio *= p->alpha;
ADDRLP4 204
ADDRLP4 204
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
MULF4
ASGNF4
line 635
;635:		} else
ADDRGP4 $632
JUMPV
LABELV $631
line 636
;636:			invratio = 1 * p->alpha;
ADDRLP4 204
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1065353216
MULF4
ASGNF4
LABELV $632
line 638
;637:
;638:		if (cgs.glconfig.hardwareType == GLHW_RAGEPRO)
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
NEI4 $641
line 639
;639:			invratio = 1;
ADDRLP4 204
CNSTF4 1065353216
ASGNF4
LABELV $641
line 641
;640:
;641:		if (invratio > 1)
ADDRLP4 204
INDIRF4
CNSTF4 1065353216
LEF4 $645
line 642
;642:			invratio = 1;
ADDRLP4 204
CNSTF4 1065353216
ASGNF4
LABELV $645
line 644
;643:
;644:		width  = p->width + (ratio * (p->endwidth - p->width));
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 256
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 645
;645:		height = p->height + (ratio * (p->endheight - p->height));
ADDRLP4 260
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
ADDRLP4 260
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 647
;646:
;647:		if (p->type != P_SMOKE_IMPACT) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
EQI4 $647
line 650
;648:			vec3_t temp;
;649:
;650:			vectoangles(rforward, temp);
ADDRGP4 rforward
ARGP4
ADDRLP4 264
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 651
;651:			p->accumroll += p->roll;
ADDRLP4 276
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 280
ADDRLP4 276
INDIRP4
CNSTI4 120
ADDP4
ASGNP4
ADDRLP4 280
INDIRP4
ADDRLP4 280
INDIRP4
INDIRI4
ADDRLP4 276
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDI4
ASGNI4
line 652
;652:			temp[ROLL] += p->accumroll * 0.1;
ADDRLP4 264+8
ADDRLP4 264+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1036831949
MULF4
ADDF4
ASGNF4
line 653
;653:			AngleVectors(temp, NULL, rright2, rup2);
ADDRLP4 264
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 208
ARGP4
ADDRLP4 220
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 654
;654:		} else {
ADDRGP4 $648
JUMPV
LABELV $647
line 655
;655:			VectorCopy(rright, rright2);
ADDRLP4 208
ADDRGP4 rright
INDIRB
ASGNB 12
line 656
;656:			VectorCopy(rup, rup2);
ADDRLP4 220
ADDRGP4 rup
INDIRB
ASGNB 12
line 657
;657:		}
LABELV $648
line 659
;658:
;659:		if (p->rotate) {
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $650
line 660
;660:			VectorMA(org, -height, rup2, point);
ADDRLP4 264
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 268
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 264
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 268
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 264
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 268
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 661
;661:			VectorMA(point, -width, rright2, point);
ADDRLP4 272
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 272
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 272
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 662
;662:		} else {
ADDRGP4 $651
JUMPV
LABELV $650
line 663
;663:			VectorMA(org, -p->height, pvup, point);
ADDRLP4 264
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 268
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 264
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 264
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 664
;664:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 272
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 665
;665:		}
LABELV $651
line 666
;666:		VectorCopy(point, verts[0].xyz);
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 667
;667:		verts[0].st[0]       = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 668
;668:		verts[0].st[1]       = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 669
;669:		verts[0].modulate[0] = 255 * color[0];
ADDRLP4 268
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 272
CNSTF4 1325400064
ASGNF4
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
LTF4 $677
ADDRLP4 264
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $678
JUMPV
LABELV $677
ADDRLP4 264
ADDRLP4 268
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $678
ADDRLP4 12+20
ADDRLP4 264
INDIRU4
CVUU1 4
ASGNU1
line 670
;670:		verts[0].modulate[1] = 255 * color[1];
ADDRLP4 280
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 284
CNSTF4 1325400064
ASGNF4
ADDRLP4 280
INDIRF4
ADDRLP4 284
INDIRF4
LTF4 $683
ADDRLP4 276
ADDRLP4 280
INDIRF4
ADDRLP4 284
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $684
JUMPV
LABELV $683
ADDRLP4 276
ADDRLP4 280
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $684
ADDRLP4 12+20+1
ADDRLP4 276
INDIRU4
CVUU1 4
ASGNU1
line 671
;671:		verts[0].modulate[2] = 255 * color[2];
ADDRLP4 292
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 296
CNSTF4 1325400064
ASGNF4
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
LTF4 $689
ADDRLP4 288
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $690
JUMPV
LABELV $689
ADDRLP4 288
ADDRLP4 292
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $690
ADDRLP4 12+20+2
ADDRLP4 288
INDIRU4
CVUU1 4
ASGNU1
line 672
;672:		verts[0].modulate[3] = 255 * invratio;
ADDRLP4 304
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 308
CNSTF4 1325400064
ASGNF4
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
LTF4 $694
ADDRLP4 300
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $695
JUMPV
LABELV $694
ADDRLP4 300
ADDRLP4 304
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $695
ADDRLP4 12+20+3
ADDRLP4 300
INDIRU4
CVUU1 4
ASGNU1
line 674
;673:
;674:		if (p->rotate) {
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $696
line 675
;675:			VectorMA(org, -height, rup2, point);
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 676
;676:			VectorMA(point, width, rright2, point);
ADDRLP4 320
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
MULF4
ADDF4
ASGNF4
line 677
;677:		} else {
ADDRGP4 $697
JUMPV
LABELV $696
line 678
;678:			VectorMA(org, -p->height, pvup, point);
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 679
;679:			VectorMA(point, p->width, pvright, point);
ADDRLP4 320
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 680
;680:		}
LABELV $697
line 681
;681:		VectorCopy(point, verts[1].xyz);
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 682
;682:		verts[1].st[0]       = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 683
;683:		verts[1].st[1]       = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 684
;684:		verts[1].modulate[0] = 255 * color[0];
ADDRLP4 316
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 320
CNSTF4 1325400064
ASGNF4
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
LTF4 $727
ADDRLP4 312
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $728
JUMPV
LABELV $727
ADDRLP4 312
ADDRLP4 316
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $728
ADDRLP4 12+24+20
ADDRLP4 312
INDIRU4
CVUU1 4
ASGNU1
line 685
;685:		verts[1].modulate[1] = 255 * color[1];
ADDRLP4 328
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 332
CNSTF4 1325400064
ASGNF4
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
LTF4 $734
ADDRLP4 324
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $735
JUMPV
LABELV $734
ADDRLP4 324
ADDRLP4 328
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $735
ADDRLP4 12+24+20+1
ADDRLP4 324
INDIRU4
CVUU1 4
ASGNU1
line 686
;686:		verts[1].modulate[2] = 255 * color[2];
ADDRLP4 340
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 344
CNSTF4 1325400064
ASGNF4
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
LTF4 $741
ADDRLP4 336
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $742
JUMPV
LABELV $741
ADDRLP4 336
ADDRLP4 340
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $742
ADDRLP4 12+24+20+2
ADDRLP4 336
INDIRU4
CVUU1 4
ASGNU1
line 687
;687:		verts[1].modulate[3] = 255 * invratio;
ADDRLP4 352
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 356
CNSTF4 1325400064
ASGNF4
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
LTF4 $747
ADDRLP4 348
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $748
JUMPV
LABELV $747
ADDRLP4 348
ADDRLP4 352
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $748
ADDRLP4 12+24+20+3
ADDRLP4 348
INDIRU4
CVUU1 4
ASGNU1
line 689
;688:
;689:		if (p->rotate) {
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $749
line 690
;690:			VectorMA(org, height, rup2, point);
ADDRLP4 360
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 360
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 360
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
line 691
;691:			VectorMA(point, width, rright2, point);
ADDRLP4 368
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 368
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 368
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
MULF4
ADDF4
ASGNF4
line 692
;692:		} else {
ADDRGP4 $750
JUMPV
LABELV $749
line 693
;693:			VectorMA(org, p->height, pvup, point);
ADDRLP4 360
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 364
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 360
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 360
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 694
;694:			VectorMA(point, p->width, pvright, point);
ADDRLP4 368
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 695
;695:		}
LABELV $750
line 696
;696:		VectorCopy(point, verts[2].xyz);
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 697
;697:		verts[2].st[0]       = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 698
;698:		verts[2].st[1]       = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 699
;699:		verts[2].modulate[0] = 255 * color[0];
ADDRLP4 364
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 368
CNSTF4 1325400064
ASGNF4
ADDRLP4 364
INDIRF4
ADDRLP4 368
INDIRF4
LTF4 $780
ADDRLP4 360
ADDRLP4 364
INDIRF4
ADDRLP4 368
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $781
JUMPV
LABELV $780
ADDRLP4 360
ADDRLP4 364
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $781
ADDRLP4 12+48+20
ADDRLP4 360
INDIRU4
CVUU1 4
ASGNU1
line 700
;700:		verts[2].modulate[1] = 255 * color[1];
ADDRLP4 376
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 380
CNSTF4 1325400064
ASGNF4
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
LTF4 $787
ADDRLP4 372
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $788
JUMPV
LABELV $787
ADDRLP4 372
ADDRLP4 376
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $788
ADDRLP4 12+48+20+1
ADDRLP4 372
INDIRU4
CVUU1 4
ASGNU1
line 701
;701:		verts[2].modulate[2] = 255 * color[2];
ADDRLP4 388
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 392
CNSTF4 1325400064
ASGNF4
ADDRLP4 388
INDIRF4
ADDRLP4 392
INDIRF4
LTF4 $794
ADDRLP4 384
ADDRLP4 388
INDIRF4
ADDRLP4 392
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $795
JUMPV
LABELV $794
ADDRLP4 384
ADDRLP4 388
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $795
ADDRLP4 12+48+20+2
ADDRLP4 384
INDIRU4
CVUU1 4
ASGNU1
line 702
;702:		verts[2].modulate[3] = 255 * invratio;
ADDRLP4 400
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 404
CNSTF4 1325400064
ASGNF4
ADDRLP4 400
INDIRF4
ADDRLP4 404
INDIRF4
LTF4 $800
ADDRLP4 396
ADDRLP4 400
INDIRF4
ADDRLP4 404
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $801
JUMPV
LABELV $800
ADDRLP4 396
ADDRLP4 400
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $801
ADDRLP4 12+48+20+3
ADDRLP4 396
INDIRU4
CVUU1 4
ASGNU1
line 704
;703:
;704:		if (p->rotate) {
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $802
line 705
;705:			VectorMA(org, height, rup2, point);
ADDRLP4 408
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 408
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 408
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
line 706
;706:			VectorMA(point, -width, rright2, point);
ADDRLP4 416
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 416
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 416
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 707
;707:		} else {
ADDRGP4 $803
JUMPV
LABELV $802
line 708
;708:			VectorMA(org, p->height, pvup, point);
ADDRLP4 408
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 412
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 408
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 412
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 408
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 412
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 709
;709:			VectorMA(point, -p->width, pvright, point);
ADDRLP4 416
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 416
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 416
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 710
;710:		}
LABELV $803
line 711
;711:		VectorCopy(point, verts[3].xyz);
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 712
;712:		verts[3].st[0]       = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 713
;713:		verts[3].st[1]       = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 714
;714:		verts[3].modulate[0] = 255 * color[0];
ADDRLP4 412
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 416
CNSTF4 1325400064
ASGNF4
ADDRLP4 412
INDIRF4
ADDRLP4 416
INDIRF4
LTF4 $833
ADDRLP4 408
ADDRLP4 412
INDIRF4
ADDRLP4 416
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $834
JUMPV
LABELV $833
ADDRLP4 408
ADDRLP4 412
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $834
ADDRLP4 12+72+20
ADDRLP4 408
INDIRU4
CVUU1 4
ASGNU1
line 715
;715:		verts[3].modulate[1] = 255 * color[1];
ADDRLP4 424
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 428
CNSTF4 1325400064
ASGNF4
ADDRLP4 424
INDIRF4
ADDRLP4 428
INDIRF4
LTF4 $840
ADDRLP4 420
ADDRLP4 424
INDIRF4
ADDRLP4 428
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $841
JUMPV
LABELV $840
ADDRLP4 420
ADDRLP4 424
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $841
ADDRLP4 12+72+20+1
ADDRLP4 420
INDIRU4
CVUU1 4
ASGNU1
line 716
;716:		verts[3].modulate[2] = 255 * color[2];
ADDRLP4 436
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 440
CNSTF4 1325400064
ASGNF4
ADDRLP4 436
INDIRF4
ADDRLP4 440
INDIRF4
LTF4 $847
ADDRLP4 432
ADDRLP4 436
INDIRF4
ADDRLP4 440
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $848
JUMPV
LABELV $847
ADDRLP4 432
ADDRLP4 436
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $848
ADDRLP4 12+72+20+2
ADDRLP4 432
INDIRU4
CVUU1 4
ASGNU1
line 717
;717:		verts[3].modulate[3] = 255 * invratio;
ADDRLP4 448
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 452
CNSTF4 1325400064
ASGNF4
ADDRLP4 448
INDIRF4
ADDRLP4 452
INDIRF4
LTF4 $853
ADDRLP4 444
ADDRLP4 448
INDIRF4
ADDRLP4 452
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $854
JUMPV
LABELV $853
ADDRLP4 444
ADDRLP4 448
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $854
ADDRLP4 12+72+20+3
ADDRLP4 444
INDIRU4
CVUU1 4
ASGNU1
line 719
;718:
;719:	} else if (p->type == P_BLEED) {
ADDRGP4 $610
JUMPV
LABELV $609
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 8
NEI4 $855
line 724
;720:		vec3_t rr, ru;
;721:		vec3_t rotate_ang;
;722:		float  alpha;
;723:
;724:		alpha = p->alpha;
ADDRLP4 272
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ASGNF4
line 726
;725:
;726:		if (cgs.glconfig.hardwareType == GLHW_RAGEPRO)
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
NEI4 $857
line 727
;727:			alpha = 1;
ADDRLP4 272
CNSTF4 1065353216
ASGNF4
LABELV $857
line 729
;728:
;729:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $861
line 730
;730:			vectoangles(cg.refdef.viewaxis[0], rotate_ang);
ADDRGP4 cg+109056+36
ARGP4
ADDRLP4 276
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 731
;731:			rotate_ang[ROLL] += p->roll;
ADDRLP4 276+8
ADDRLP4 276+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 732
;732:			AngleVectors(rotate_ang, NULL, rr, ru);
ADDRLP4 276
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 248
ARGP4
ADDRLP4 260
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 733
;733:		} else {
ADDRGP4 $862
JUMPV
LABELV $861
line 734
;734:			VectorCopy(pvup, ru);
ADDRLP4 260
ADDRGP4 pvup
INDIRB
ASGNB 12
line 735
;735:			VectorCopy(pvright, rr);
ADDRLP4 248
ADDRGP4 pvright
INDIRB
ASGNB 12
line 736
;736:		}
LABELV $862
line 738
;737:
;738:		VectorMA(org, -p->height, ru, point);
ADDRLP4 288
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 292
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 288
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 292
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 288
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 292
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 739
;739:		VectorMA(point, -p->width, rr, point);
ADDRLP4 296
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 740
;740:		VectorCopy(point, verts[0].xyz);
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 741
;741:		verts[0].st[0]       = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 742
;742:		verts[0].st[1]       = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 743
;743:		verts[0].modulate[0] = 111;
ADDRLP4 12+20
CNSTU1 111
ASGNU1
line 744
;744:		verts[0].modulate[1] = 19;
ADDRLP4 12+20+1
CNSTU1 19
ASGNU1
line 745
;745:		verts[0].modulate[2] = 9;
ADDRLP4 12+20+2
CNSTU1 9
ASGNU1
line 746
;746:		verts[0].modulate[3] = 255 * alpha;
ADDRLP4 304
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 308
CNSTF4 1325400064
ASGNF4
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
LTF4 $887
ADDRLP4 300
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $888
JUMPV
LABELV $887
ADDRLP4 300
ADDRLP4 304
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $888
ADDRLP4 12+20+3
ADDRLP4 300
INDIRU4
CVUU1 4
ASGNU1
line 748
;747:
;748:		VectorMA(org, -p->height, ru, point);
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 749
;749:		VectorMA(point, p->width, rr, point);
ADDRLP4 320
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 750
;750:		VectorCopy(point, verts[1].xyz);
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 751
;751:		verts[1].st[0]       = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 752
;752:		verts[1].st[1]       = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 753
;753:		verts[1].modulate[0] = 111;
ADDRLP4 12+24+20
CNSTU1 111
ASGNU1
line 754
;754:		verts[1].modulate[1] = 19;
ADDRLP4 12+24+20+1
CNSTU1 19
ASGNU1
line 755
;755:		verts[1].modulate[2] = 9;
ADDRLP4 12+24+20+2
CNSTU1 9
ASGNU1
line 756
;756:		verts[1].modulate[3] = 255 * alpha;
ADDRLP4 328
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 332
CNSTF4 1325400064
ASGNF4
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
LTF4 $917
ADDRLP4 324
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $918
JUMPV
LABELV $917
ADDRLP4 324
ADDRLP4 328
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $918
ADDRLP4 12+24+20+3
ADDRLP4 324
INDIRU4
CVUU1 4
ASGNU1
line 758
;757:
;758:		VectorMA(org, p->height, ru, point);
ADDRLP4 336
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 340
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 336
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 340
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 336
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 340
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 759
;759:		VectorMA(point, p->width, rr, point);
ADDRLP4 344
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 344
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 344
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 760
;760:		VectorCopy(point, verts[2].xyz);
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 761
;761:		verts[2].st[0]       = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 762
;762:		verts[2].st[1]       = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 763
;763:		verts[2].modulate[0] = 111;
ADDRLP4 12+48+20
CNSTU1 111
ASGNU1
line 764
;764:		verts[2].modulate[1] = 19;
ADDRLP4 12+48+20+1
CNSTU1 19
ASGNU1
line 765
;765:		verts[2].modulate[2] = 9;
ADDRLP4 12+48+20+2
CNSTU1 9
ASGNU1
line 766
;766:		verts[2].modulate[3] = 255 * alpha;
ADDRLP4 352
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 356
CNSTF4 1325400064
ASGNF4
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
LTF4 $947
ADDRLP4 348
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $948
JUMPV
LABELV $947
ADDRLP4 348
ADDRLP4 352
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $948
ADDRLP4 12+48+20+3
ADDRLP4 348
INDIRU4
CVUU1 4
ASGNU1
line 768
;767:
;768:		VectorMA(org, p->height, ru, point);
ADDRLP4 360
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 364
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 360
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 360
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 769
;769:		VectorMA(point, -p->width, rr, point);
ADDRLP4 368
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 770
;770:		VectorCopy(point, verts[3].xyz);
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 771
;771:		verts[3].st[0]       = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 772
;772:		verts[3].st[1]       = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 773
;773:		verts[3].modulate[0] = 111;
ADDRLP4 12+72+20
CNSTU1 111
ASGNU1
line 774
;774:		verts[3].modulate[1] = 19;
ADDRLP4 12+72+20+1
CNSTU1 19
ASGNU1
line 775
;775:		verts[3].modulate[2] = 9;
ADDRLP4 12+72+20+2
CNSTU1 9
ASGNU1
line 776
;776:		verts[3].modulate[3] = 255 * alpha;
ADDRLP4 376
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 380
CNSTF4 1325400064
ASGNF4
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
LTF4 $977
ADDRLP4 372
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $978
JUMPV
LABELV $977
ADDRLP4 372
ADDRLP4 376
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $978
ADDRLP4 12+72+20+3
ADDRLP4 372
INDIRU4
CVUU1 4
ASGNU1
line 778
;777:
;778:	} else if (p->type == P_FLAT_SCALEUP) {
ADDRGP4 $856
JUMPV
LABELV $855
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 9
NEI4 $979
line 782
;779:		float width, height;
;780:		float sinR, cosR;
;781:
;782:		if (p->color == BLOODRED)
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $981
line 783
;783:			VectorSet(color, 1, 1, 1);
ADDRLP4 184
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+4
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+8
CNSTF4 1065353216
ASGNF4
ADDRGP4 $982
JUMPV
LABELV $981
line 785
;784:		else
;785:			VectorSet(color, 0.5, 0.5, 0.5);
ADDRLP4 184
CNSTF4 1056964608
ASGNF4
ADDRLP4 184+4
CNSTF4 1056964608
ASGNF4
ADDRLP4 184+8
CNSTF4 1056964608
ASGNF4
LABELV $982
line 787
;786:
;787:		time  = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 788
;788:		time2 = p->endtime - p->time;
ADDRLP4 264
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 264
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 264
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 789
;789:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 791
;790:
;791:		width  = p->width + (ratio * (p->endwidth - p->width));
ADDRLP4 268
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 256
ADDRLP4 268
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 792
;792:		height = p->height + (ratio * (p->endheight - p->height));
ADDRLP4 272
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 260
ADDRLP4 272
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 794
;793:
;794:		if (width > p->endwidth)
ADDRLP4 256
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
LEF4 $988
line 795
;795:			width = p->endwidth;
ADDRLP4 256
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ASGNF4
LABELV $988
line 797
;796:
;797:		if (height > p->endheight)
ADDRLP4 260
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
LEF4 $990
line 798
;798:			height = p->endheight;
ADDRLP4 260
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ASGNF4
LABELV $990
line 800
;799:
;800:		sinR = height * sin(DEG2RAD(p->roll)) * sqrt(2);
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1016003125
MULF4
ARGF4
ADDRLP4 276
ADDRGP4 sin
CALLF4
ASGNF4
CNSTF4 1073741824
ARGF4
ADDRLP4 280
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 248
ADDRLP4 260
INDIRF4
ADDRLP4 276
INDIRF4
MULF4
ADDRLP4 280
INDIRF4
MULF4
ASGNF4
line 801
;801:		cosR = width * cos(DEG2RAD(p->roll)) * sqrt(2);
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1016003125
MULF4
ARGF4
ADDRLP4 284
ADDRGP4 cos
CALLF4
ASGNF4
CNSTF4 1073741824
ARGF4
ADDRLP4 288
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 252
ADDRLP4 256
INDIRF4
ADDRLP4 284
INDIRF4
MULF4
ADDRLP4 288
INDIRF4
MULF4
ASGNF4
line 803
;802:
;803:		VectorCopy(org, verts[0].xyz);
ADDRLP4 12
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 804
;804:		verts[0].xyz[0] -= sinR;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 248
INDIRF4
SUBF4
ASGNF4
line 805
;805:		verts[0].xyz[1] -= cosR;
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 252
INDIRF4
SUBF4
ASGNF4
line 806
;806:		verts[0].st[0]       = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 807
;807:		verts[0].st[1]       = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 808
;808:		verts[0].modulate[0] = 255 * color[0];
ADDRLP4 296
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 300
CNSTF4 1325400064
ASGNF4
ADDRLP4 296
INDIRF4
ADDRLP4 300
INDIRF4
LTF4 $998
ADDRLP4 292
ADDRLP4 296
INDIRF4
ADDRLP4 300
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $999
JUMPV
LABELV $998
ADDRLP4 292
ADDRLP4 296
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $999
ADDRLP4 12+20
ADDRLP4 292
INDIRU4
CVUU1 4
ASGNU1
line 809
;809:		verts[0].modulate[1] = 255 * color[1];
ADDRLP4 308
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 312
CNSTF4 1325400064
ASGNF4
ADDRLP4 308
INDIRF4
ADDRLP4 312
INDIRF4
LTF4 $1004
ADDRLP4 304
ADDRLP4 308
INDIRF4
ADDRLP4 312
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1005
JUMPV
LABELV $1004
ADDRLP4 304
ADDRLP4 308
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1005
ADDRLP4 12+20+1
ADDRLP4 304
INDIRU4
CVUU1 4
ASGNU1
line 810
;810:		verts[0].modulate[2] = 255 * color[2];
ADDRLP4 320
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 324
CNSTF4 1325400064
ASGNF4
ADDRLP4 320
INDIRF4
ADDRLP4 324
INDIRF4
LTF4 $1010
ADDRLP4 316
ADDRLP4 320
INDIRF4
ADDRLP4 324
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1011
JUMPV
LABELV $1010
ADDRLP4 316
ADDRLP4 320
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1011
ADDRLP4 12+20+2
ADDRLP4 316
INDIRU4
CVUU1 4
ASGNU1
line 811
;811:		verts[0].modulate[3] = 255;
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 813
;812:
;813:		VectorCopy(org, verts[1].xyz);
ADDRLP4 12+24
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 814
;814:		verts[1].xyz[0] -= cosR;
ADDRLP4 12+24
ADDRLP4 12+24
INDIRF4
ADDRLP4 252
INDIRF4
SUBF4
ASGNF4
line 815
;815:		verts[1].xyz[1] += sinR;
ADDRLP4 12+24+4
ADDRLP4 12+24+4
INDIRF4
ADDRLP4 248
INDIRF4
ADDF4
ASGNF4
line 816
;816:		verts[1].st[0]       = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 817
;817:		verts[1].st[1]       = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 818
;818:		verts[1].modulate[0] = 255 * color[0];
ADDRLP4 332
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 336
CNSTF4 1325400064
ASGNF4
ADDRLP4 332
INDIRF4
ADDRLP4 336
INDIRF4
LTF4 $1026
ADDRLP4 328
ADDRLP4 332
INDIRF4
ADDRLP4 336
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1027
JUMPV
LABELV $1026
ADDRLP4 328
ADDRLP4 332
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1027
ADDRLP4 12+24+20
ADDRLP4 328
INDIRU4
CVUU1 4
ASGNU1
line 819
;819:		verts[1].modulate[1] = 255 * color[1];
ADDRLP4 344
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 348
CNSTF4 1325400064
ASGNF4
ADDRLP4 344
INDIRF4
ADDRLP4 348
INDIRF4
LTF4 $1033
ADDRLP4 340
ADDRLP4 344
INDIRF4
ADDRLP4 348
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1034
JUMPV
LABELV $1033
ADDRLP4 340
ADDRLP4 344
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1034
ADDRLP4 12+24+20+1
ADDRLP4 340
INDIRU4
CVUU1 4
ASGNU1
line 820
;820:		verts[1].modulate[2] = 255 * color[2];
ADDRLP4 356
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 360
CNSTF4 1325400064
ASGNF4
ADDRLP4 356
INDIRF4
ADDRLP4 360
INDIRF4
LTF4 $1040
ADDRLP4 352
ADDRLP4 356
INDIRF4
ADDRLP4 360
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1041
JUMPV
LABELV $1040
ADDRLP4 352
ADDRLP4 356
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1041
ADDRLP4 12+24+20+2
ADDRLP4 352
INDIRU4
CVUU1 4
ASGNU1
line 821
;821:		verts[1].modulate[3] = 255;
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 823
;822:
;823:		VectorCopy(org, verts[2].xyz);
ADDRLP4 12+48
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 824
;824:		verts[2].xyz[0] += sinR;
ADDRLP4 12+48
ADDRLP4 12+48
INDIRF4
ADDRLP4 248
INDIRF4
ADDF4
ASGNF4
line 825
;825:		verts[2].xyz[1] += cosR;
ADDRLP4 12+48+4
ADDRLP4 12+48+4
INDIRF4
ADDRLP4 252
INDIRF4
ADDF4
ASGNF4
line 826
;826:		verts[2].st[0]       = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 827
;827:		verts[2].st[1]       = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 828
;828:		verts[2].modulate[0] = 255 * color[0];
ADDRLP4 368
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 372
CNSTF4 1325400064
ASGNF4
ADDRLP4 368
INDIRF4
ADDRLP4 372
INDIRF4
LTF4 $1057
ADDRLP4 364
ADDRLP4 368
INDIRF4
ADDRLP4 372
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1058
JUMPV
LABELV $1057
ADDRLP4 364
ADDRLP4 368
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1058
ADDRLP4 12+48+20
ADDRLP4 364
INDIRU4
CVUU1 4
ASGNU1
line 829
;829:		verts[2].modulate[1] = 255 * color[1];
ADDRLP4 380
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 384
CNSTF4 1325400064
ASGNF4
ADDRLP4 380
INDIRF4
ADDRLP4 384
INDIRF4
LTF4 $1064
ADDRLP4 376
ADDRLP4 380
INDIRF4
ADDRLP4 384
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1065
JUMPV
LABELV $1064
ADDRLP4 376
ADDRLP4 380
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1065
ADDRLP4 12+48+20+1
ADDRLP4 376
INDIRU4
CVUU1 4
ASGNU1
line 830
;830:		verts[2].modulate[2] = 255 * color[2];
ADDRLP4 392
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 396
CNSTF4 1325400064
ASGNF4
ADDRLP4 392
INDIRF4
ADDRLP4 396
INDIRF4
LTF4 $1071
ADDRLP4 388
ADDRLP4 392
INDIRF4
ADDRLP4 396
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1072
JUMPV
LABELV $1071
ADDRLP4 388
ADDRLP4 392
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1072
ADDRLP4 12+48+20+2
ADDRLP4 388
INDIRU4
CVUU1 4
ASGNU1
line 831
;831:		verts[2].modulate[3] = 255;
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 833
;832:
;833:		VectorCopy(org, verts[3].xyz);
ADDRLP4 12+72
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 834
;834:		verts[3].xyz[0] += cosR;
ADDRLP4 12+72
ADDRLP4 12+72
INDIRF4
ADDRLP4 252
INDIRF4
ADDF4
ASGNF4
line 835
;835:		verts[3].xyz[1] -= sinR;
ADDRLP4 12+72+4
ADDRLP4 12+72+4
INDIRF4
ADDRLP4 248
INDIRF4
SUBF4
ASGNF4
line 836
;836:		verts[3].st[0]       = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 837
;837:		verts[3].st[1]       = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 838
;838:		verts[3].modulate[0] = 255 * color[0];
ADDRLP4 404
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 408
CNSTF4 1325400064
ASGNF4
ADDRLP4 404
INDIRF4
ADDRLP4 408
INDIRF4
LTF4 $1088
ADDRLP4 400
ADDRLP4 404
INDIRF4
ADDRLP4 408
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1089
JUMPV
LABELV $1088
ADDRLP4 400
ADDRLP4 404
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1089
ADDRLP4 12+72+20
ADDRLP4 400
INDIRU4
CVUU1 4
ASGNU1
line 839
;839:		verts[3].modulate[1] = 255 * color[1];
ADDRLP4 416
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 420
CNSTF4 1325400064
ASGNF4
ADDRLP4 416
INDIRF4
ADDRLP4 420
INDIRF4
LTF4 $1095
ADDRLP4 412
ADDRLP4 416
INDIRF4
ADDRLP4 420
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1096
JUMPV
LABELV $1095
ADDRLP4 412
ADDRLP4 416
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1096
ADDRLP4 12+72+20+1
ADDRLP4 412
INDIRU4
CVUU1 4
ASGNU1
line 840
;840:		verts[3].modulate[2] = 255 * color[2];
ADDRLP4 428
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 432
CNSTF4 1325400064
ASGNF4
ADDRLP4 428
INDIRF4
ADDRLP4 432
INDIRF4
LTF4 $1102
ADDRLP4 424
ADDRLP4 428
INDIRF4
ADDRLP4 432
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1103
JUMPV
LABELV $1102
ADDRLP4 424
ADDRLP4 428
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1103
ADDRLP4 12+72+20+2
ADDRLP4 424
INDIRU4
CVUU1 4
ASGNU1
line 841
;841:		verts[3].modulate[3] = 255;
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 842
;842:	} else if (p->type == P_FLAT) {
ADDRGP4 $980
JUMPV
LABELV $979
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1107
line 844
;843:
;844:		VectorCopy(org, verts[0].xyz);
ADDRLP4 12
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 845
;845:		verts[0].xyz[0] -= p->height;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
ASGNF4
line 846
;846:		verts[0].xyz[1] -= p->width;
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
ASGNF4
line 847
;847:		verts[0].st[0]       = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 848
;848:		verts[0].st[1]       = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 849
;849:		verts[0].modulate[0] = 255;
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 850
;850:		verts[0].modulate[1] = 255;
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 851
;851:		verts[0].modulate[2] = 255;
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 852
;852:		verts[0].modulate[3] = 255;
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 854
;853:
;854:		VectorCopy(org, verts[1].xyz);
ADDRLP4 12+24
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 855
;855:		verts[1].xyz[0] -= p->height;
ADDRLP4 12+24
ADDRLP4 12+24
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
ASGNF4
line 856
;856:		verts[1].xyz[1] += p->width;
ADDRLP4 12+24+4
ADDRLP4 12+24+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDF4
ASGNF4
line 857
;857:		verts[1].st[0]       = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 858
;858:		verts[1].st[1]       = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 859
;859:		verts[1].modulate[0] = 255;
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 860
;860:		verts[1].modulate[1] = 255;
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 861
;861:		verts[1].modulate[2] = 255;
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 862
;862:		verts[1].modulate[3] = 255;
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 864
;863:
;864:		VectorCopy(org, verts[2].xyz);
ADDRLP4 12+48
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 865
;865:		verts[2].xyz[0] += p->height;
ADDRLP4 12+48
ADDRLP4 12+48
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDF4
ASGNF4
line 866
;866:		verts[2].xyz[1] += p->width;
ADDRLP4 12+48+4
ADDRLP4 12+48+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDF4
ASGNF4
line 867
;867:		verts[2].st[0]       = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 868
;868:		verts[2].st[1]       = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 869
;869:		verts[2].modulate[0] = 255;
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 870
;870:		verts[2].modulate[1] = 255;
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 871
;871:		verts[2].modulate[2] = 255;
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 872
;872:		verts[2].modulate[3] = 255;
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 874
;873:
;874:		VectorCopy(org, verts[3].xyz);
ADDRLP4 12+72
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 875
;875:		verts[3].xyz[0] += p->height;
ADDRLP4 12+72
ADDRLP4 12+72
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDF4
ASGNF4
line 876
;876:		verts[3].xyz[1] -= p->width;
ADDRLP4 12+72+4
ADDRLP4 12+72+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
ASGNF4
line 877
;877:		verts[3].st[0]       = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 878
;878:		verts[3].st[1]       = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 879
;879:		verts[3].modulate[0] = 255;
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 880
;880:		verts[3].modulate[1] = 255;
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 881
;881:		verts[3].modulate[2] = 255;
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 882
;882:		verts[3].modulate[3] = 255;
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 884
;883:
;884:	}
ADDRGP4 $1108
JUMPV
LABELV $1107
line 886
;885:	// Ridah
;886:	else if (p->type == P_ANIM) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 6
NEI4 $1180
line 891
;887:		vec3_t rr, ru;
;888:		vec3_t rotate_ang;
;889:		int    i, j;
;890:
;891:		time  = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 892
;892:		time2 = p->endtime - p->time;
ADDRLP4 292
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 292
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 292
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 893
;893:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 894
;894:		if (ratio >= 1.0f) {
ADDRLP4 200
INDIRF4
CNSTF4 1065353216
LTF4 $1183
line 895
;895:			ratio = 0.9999f;
ADDRLP4 200
CNSTF4 1065351538
ASGNF4
line 896
;896:		}
LABELV $1183
line 898
;897:
;898:		width  = p->width + (ratio * (p->endwidth - p->width));
ADDRLP4 296
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 899
;899:		height = p->height + (ratio * (p->endheight - p->height));
ADDRLP4 300
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
ADDRLP4 300
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 300
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 300
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 902
;900:
;901:		// if we are "inside" this sprite, don't draw
;902:		if (Distance(cg.snap->ps.origin, org) < width / 1.5) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 304
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 304
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1059760811
MULF4
GEF4 $1185
line 903
;903:			return;
ADDRGP4 $245
JUMPV
LABELV $1185
line 906
;904:		}
;905:
;906:		i          = p->shaderAnim;
ADDRLP4 272
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ASGNI4
line 907
;907:		j          = (int)floor(ratio * shaderAnimCounts[p->shaderAnim]);
ADDRLP4 200
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimCounts
ADDP4
INDIRI4
CVIF4 4
MULF4
ARGF4
ADDRLP4 308
ADDRGP4 floor
CALLF4
ASGNF4
ADDRLP4 276
ADDRLP4 308
INDIRF4
CVFI4 4
ASGNI4
line 908
;908:		p->pshader = shaderAnims[i][j];
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 276
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 272
INDIRI4
CNSTI4 8
LSHI4
ADDRGP4 shaderAnims
ADDP4
ADDP4
INDIRI4
ASGNI4
line 910
;909:
;910:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1188
line 911
;911:			vectoangles(cg.refdef.viewaxis[0], rotate_ang);
ADDRGP4 cg+109056+36
ARGP4
ADDRLP4 280
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 912
;912:			rotate_ang[ROLL] += p->roll;
ADDRLP4 280+8
ADDRLP4 280+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 913
;913:			AngleVectors(rotate_ang, NULL, rr, ru);
ADDRLP4 280
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 260
ARGP4
ADDRLP4 248
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 914
;914:		}
LABELV $1188
line 916
;915:
;916:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1193
line 917
;917:			VectorMA(org, -height, ru, point);
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 918
;918:			VectorMA(point, -width, rr, point);
ADDRLP4 320
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 919
;919:		} else {
ADDRGP4 $1194
JUMPV
LABELV $1193
line 920
;920:			VectorMA(org, -height, pvup, point);
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 921
;921:			VectorMA(point, -width, pvright, point);
ADDRLP4 320
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 922
;922:		}
LABELV $1194
line 923
;923:		VectorCopy(point, verts[0].xyz);
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 924
;924:		verts[0].st[0]       = 0;
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 925
;925:		verts[0].st[1]       = 0;
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 926
;926:		verts[0].modulate[0] = 255;
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 927
;927:		verts[0].modulate[1] = 255;
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 928
;928:		verts[0].modulate[2] = 255;
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 929
;929:		verts[0].modulate[3] = 255;
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 931
;930:
;931:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1225
line 932
;932:			VectorMA(point, 2 * height, ru, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 933
;933:		} else {
ADDRGP4 $1226
JUMPV
LABELV $1225
line 934
;934:			VectorMA(point, 2 * height, pvup, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 935
;935:		}
LABELV $1226
line 936
;936:		VectorCopy(point, verts[1].xyz);
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 937
;937:		verts[1].st[0]       = 0;
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 938
;938:		verts[1].st[1]       = 1;
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 939
;939:		verts[1].modulate[0] = 255;
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 940
;940:		verts[1].modulate[1] = 255;
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 941
;941:		verts[1].modulate[2] = 255;
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 942
;942:		verts[1].modulate[3] = 255;
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 944
;943:
;944:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1256
line 945
;945:			VectorMA(point, 2 * width, rr, point);
ADDRLP4 312
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 946
;946:		} else {
ADDRGP4 $1257
JUMPV
LABELV $1256
line 947
;947:			VectorMA(point, 2 * width, pvright, point);
ADDRLP4 312
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 948
;948:		}
LABELV $1257
line 949
;949:		VectorCopy(point, verts[2].xyz);
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 950
;950:		verts[2].st[0]       = 1;
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 951
;951:		verts[2].st[1]       = 1;
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 952
;952:		verts[2].modulate[0] = 255;
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 953
;953:		verts[2].modulate[1] = 255;
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 954
;954:		verts[2].modulate[2] = 255;
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 955
;955:		verts[2].modulate[3] = 255;
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 957
;956:
;957:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1287
line 958
;958:			VectorMA(point, -2 * height, ru, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 959
;959:		} else {
ADDRGP4 $1288
JUMPV
LABELV $1287
line 960
;960:			VectorMA(point, -2 * height, pvup, point);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 961
;961:		}
LABELV $1288
line 962
;962:		VectorCopy(point, verts[3].xyz);
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 963
;963:		verts[3].st[0]       = 1;
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 964
;964:		verts[3].st[1]       = 0;
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 965
;965:		verts[3].modulate[0] = 255;
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 966
;966:		verts[3].modulate[1] = 255;
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 967
;967:		verts[3].modulate[2] = 255;
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 968
;968:		verts[3].modulate[3] = 255;
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 969
;969:	}
LABELV $1180
LABELV $1108
LABELV $980
LABELV $856
LABELV $610
LABELV $475
LABELV $247
line 972
;970:	// done.
;971:
;972:	if (!p->pshader) {
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1318
line 975
;973:		// (SA) temp commented out for DM
;974:		//		CG_Printf ("CG_AddParticleToScene type %d p->pshader == ZERO\n", p->type);
;975:		return;
ADDRGP4 $245
JUMPV
LABELV $1318
line 978
;976:	}
;977:
;978:	if (p->type == P_WEATHER || p->type == P_WEATHER_TURBULENT || p->type == P_WEATHER_FLURRY)
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1323
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
EQI4 $1323
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
NEI4 $1320
LABELV $1323
line 979
;979:		trap_R_AddPolyToScene(p->pshader, 3, TRIverts);
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 108
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
ADDRGP4 $1321
JUMPV
LABELV $1320
line 981
;980:	else
;981:		trap_R_AddPolyToScene(p->pshader, 4, verts);
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 12
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
LABELV $1321
line 982
;982:}
LABELV $245
endproc CG_AddParticleToScene 456 16
data
align 4
LABELV roll
byte 4 0
export CG_AddParticles
code
proc CG_AddParticles 88 16
line 992
;983:
;984:// Ridah, made this static so it doesn't interfere with other files
;985:static float roll = 0.0;
;986:
;987:/*
;988:===============
;989:CG_AddParticles
;990:===============
;991:*/
;992:void CG_AddParticles(void) {
line 1002
;993:	cparticle_t *p, *next;
;994:	float        alpha;
;995:	float        time, time2;
;996:	vec3_t       org;
;997:	// int				color;
;998:	cparticle_t *active, *tail;
;999:	// int				type;
;1000:	vec3_t rotate_ang;
;1001:
;1002:	if (!initparticles)
ADDRGP4 initparticles
INDIRI4
CNSTI4 0
NEI4 $1325
line 1003
;1003:		CG_ClearParticles();
ADDRGP4 CG_ClearParticles
CALLV
pop
LABELV $1325
line 1005
;1004:
;1005:	VectorCopy(cg.refdef.viewaxis[0], pvforward);
ADDRGP4 pvforward
ADDRGP4 cg+109056+36
INDIRB
ASGNB 12
line 1006
;1006:	VectorCopy(cg.refdef.viewaxis[1], pvright);
ADDRGP4 pvright
ADDRGP4 cg+109056+36+12
INDIRB
ASGNB 12
line 1007
;1007:	VectorCopy(cg.refdef.viewaxis[2], pvup);
ADDRGP4 pvup
ADDRGP4 cg+109056+36+24
INDIRB
ASGNB 12
line 1009
;1008:
;1009:	vectoangles(cg.refdef.viewaxis[0], rotate_ang);
ADDRGP4 cg+109056+36
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1010
;1010:	roll += ((cg.time - oldtime) * 0.1);
ADDRLP4 52
ADDRGP4 roll
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 oldtime
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1036831949
MULF4
ADDF4
ASGNF4
line 1011
;1011:	rotate_ang[ROLL] += (roll * 0.9);
ADDRLP4 40+8
ADDRLP4 40+8
INDIRF4
ADDRGP4 roll
INDIRF4
CNSTF4 1063675494
MULF4
ADDF4
ASGNF4
line 1012
;1012:	AngleVectors(rotate_ang, rforward, rright, rup);
ADDRLP4 40
ARGP4
ADDRGP4 rforward
ARGP4
ADDRGP4 rright
ARGP4
ADDRGP4 rup
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1014
;1013:
;1014:	oldtime = cg.time;
ADDRGP4 oldtime
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1016
;1015:
;1016:	active = NULL;
ADDRLP4 36
CNSTP4 0
ASGNP4
line 1017
;1017:	tail   = NULL;
ADDRLP4 28
CNSTP4 0
ASGNP4
line 1019
;1018:
;1019:	for (p = active_particles; p; p = next) {
ADDRLP4 0
ADDRGP4 active_particles
INDIRP4
ASGNP4
ADDRGP4 $1343
JUMPV
LABELV $1340
line 1021
;1020:
;1021:		next = p->next;
ADDRLP4 32
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1023
;1022:
;1023:		time = (cg.time - p->time) * 0.001;
ADDRLP4 4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
line 1025
;1024:
;1025:		alpha = p->alpha + time * p->alphavel;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1026
;1026:		if (alpha <= 0) {  // faded out
ADDRLP4 8
INDIRF4
CNSTF4 0
GTF4 $1345
line 1027
;1027:			p->next        = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1028
;1028:			free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1029
;1029:			p->type        = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1030
;1030:			p->color       = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1031
;1031:			p->alpha       = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1032
;1032:			continue;
ADDRGP4 $1341
JUMPV
LABELV $1345
line 1035
;1033:		}
;1034:
;1035:		if (p->type == P_SMOKE || p->type == P_ANIM || p->type == P_BLEED || p->type == P_SMOKE_IMPACT) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1351
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 6
EQI4 $1351
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 8
EQI4 $1351
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
NEI4 $1347
LABELV $1351
line 1036
;1036:			if (cg.time > p->endtime) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LEI4 $1352
line 1037
;1037:				p->next        = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1038
;1038:				free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1039
;1039:				p->type        = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1040
;1040:				p->color       = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1041
;1041:				p->alpha       = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1043
;1042:
;1043:				continue;
ADDRGP4 $1341
JUMPV
LABELV $1352
line 1045
;1044:			}
;1045:		}
LABELV $1347
line 1047
;1046:
;1047:		if (p->type == P_WEATHER_FLURRY) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
NEI4 $1355
line 1048
;1048:			if (cg.time > p->endtime) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LEI4 $1357
line 1049
;1049:				p->next        = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1050
;1050:				free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1051
;1051:				p->type        = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1052
;1052:				p->color       = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1053
;1053:				p->alpha       = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1055
;1054:
;1055:				continue;
ADDRGP4 $1341
JUMPV
LABELV $1357
line 1057
;1056:			}
;1057:		}
LABELV $1355
line 1059
;1058:
;1059:		if (p->type == P_FLAT_SCALEUP_FADE) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 10
NEI4 $1360
line 1060
;1060:			if (cg.time > p->endtime) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LEI4 $1362
line 1061
;1061:				p->next        = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1062
;1062:				free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1063
;1063:				p->type        = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1064
;1064:				p->color       = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1065
;1065:				p->alpha       = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1066
;1066:				continue;
ADDRGP4 $1341
JUMPV
LABELV $1362
line 1068
;1067:			}
;1068:		}
LABELV $1360
line 1070
;1069:
;1070:		if ((p->type == P_BAT || p->type == P_SPRITE) && p->endtime < 0) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 7
EQI4 $1367
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 15
NEI4 $1365
LABELV $1367
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
GEI4 $1365
line 1072
;1071:			// temporary sprite
;1072:			CG_AddParticleToScene(p, p->org, alpha);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 8
INDIRF4
ARGF4
ADDRGP4 CG_AddParticleToScene
CALLV
pop
line 1073
;1073:			p->next        = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1074
;1074:			free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1075
;1075:			p->type        = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1076
;1076:			p->color       = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1077
;1077:			p->alpha       = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1078
;1078:			continue;
ADDRGP4 $1341
JUMPV
LABELV $1365
line 1081
;1079:		}
;1080:
;1081:		p->next = NULL;
ADDRLP4 0
INDIRP4
CNSTP4 0
ASGNP4
line 1082
;1082:		if (!tail)
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1368
line 1083
;1083:			active = tail = p;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 0
INDIRP4
ASGNP4
ADDRGP4 $1369
JUMPV
LABELV $1368
line 1084
;1084:		else {
line 1085
;1085:			tail->next = p;
ADDRLP4 28
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1086
;1086:			tail       = p;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
line 1087
;1087:		}
LABELV $1369
line 1089
;1088:
;1089:		if (alpha > 1.0)
ADDRLP4 8
INDIRF4
CNSTF4 1065353216
LEF4 $1370
line 1090
;1090:			alpha = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
LABELV $1370
line 1094
;1091:
;1092:		// color = p->color;
;1093:
;1094:		time2 = time * time;
ADDRLP4 12
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1096
;1095:
;1096:		org[0] = p->org[0] + p->vel[0] * time + p->accel[0] * time2;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1097
;1097:		org[1] = p->org[1] + p->vel[1] * time + p->accel[1] * time2;
ADDRLP4 16+4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1098
;1098:		org[2] = p->org[2] + p->vel[2] * time + p->accel[2] * time2;
ADDRLP4 16+8
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1102
;1099:
;1100:		// type = p->type;
;1101:
;1102:		CG_AddParticleToScene(p, org, alpha);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 8
INDIRF4
ARGF4
ADDRGP4 CG_AddParticleToScene
CALLV
pop
line 1103
;1103:	}
LABELV $1341
line 1019
ADDRLP4 0
ADDRLP4 32
INDIRP4
ASGNP4
LABELV $1343
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1340
line 1105
;1104:
;1105:	active_particles = active;
ADDRGP4 active_particles
ADDRLP4 36
INDIRP4
ASGNP4
line 1106
;1106:}
LABELV $1324
endproc CG_AddParticles 88 16
export CG_ParticleSnowFlurry
proc CG_ParticleSnowFlurry 52 4
line 1113
;1107:
;1108:/*
;1109:======================
;1110:CG_AddParticles
;1111:======================
;1112:*/
;1113:void CG_ParticleSnowFlurry(qhandle_t pshader, centity_t* cent) {
line 1117
;1114:	cparticle_t* p;
;1115:	// qboolean turb = qtrue;
;1116:
;1117:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1375
line 1118
;1118:		CG_Printf("CG_ParticleSnowFlurry pshader == ZERO!\n");
ADDRGP4 $1377
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1375
line 1120
;1119:
;1120:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1378
line 1121
;1121:		return;
ADDRGP4 $1374
JUMPV
LABELV $1378
line 1122
;1122:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1123
;1123:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1124
;1124:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1125
;1125:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1126
;1126:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1127
;1127:	p->color         = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1128
;1128:	p->alpha         = 0.90f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1063675494
ASGNF4
line 1129
;1129:	p->alphavel      = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1131
;1130:
;1131:	p->start = cent->currentState.origin2[0];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ASGNF4
line 1132
;1132:	p->end   = cent->currentState.origin2[1];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ASGNF4
line 1134
;1133:
;1134:	p->endtime   = cg.time + cent->currentState.time;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1135
;1135:	p->startfade = cg.time + cent->currentState.time2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1137
;1136:
;1137:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1139
;1138:
;1139:	if (rand() % 100 > 90) {
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 100
MODI4
CNSTI4 90
LEI4 $1383
line 1140
;1140:		p->height = 32;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1107296256
ASGNF4
line 1141
;1141:		p->width  = 32;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1107296256
ASGNF4
line 1142
;1142:		p->alpha  = 0.10f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1036831949
ASGNF4
line 1143
;1143:	} else {
ADDRGP4 $1384
JUMPV
LABELV $1383
line 1144
;1144:		p->height = 1;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1065353216
ASGNF4
line 1145
;1145:		p->width  = 1;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1065353216
ASGNF4
line 1146
;1146:	}
LABELV $1384
line 1148
;1147:
;1148:	p->vel[2] = -20;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3248488448
ASGNF4
line 1150
;1149:
;1150:	p->type = P_WEATHER_FLURRY;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 11
ASGNI4
line 1153
;1151:
;1152:	// if (turb)
;1153:	p->vel[2] = -10;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3240099840
ASGNF4
line 1155
;1154:
;1155:	VectorCopy(cent->currentState.origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1161
;1156:
;1157:	// p->org[0] = p->org[0];
;1158:	// p->org[1] = p->org[1];
;1159:	// p->org[2] = p->org[2];
;1160:
;1161:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 1163
;1162:
;1163:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 20
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 1165
;1164:
;1165:	p->vel[0] += cent->currentState.angles[0] * 32 + (crandom() * 16);
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1107296256
MULF4
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ADDF4
ADDF4
ASGNF4
line 1166
;1166:	p->vel[1] += cent->currentState.angles[1] * 32 + (crandom() * 16);
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
CNSTF4 1107296256
MULF4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ADDF4
ADDF4
ASGNF4
line 1167
;1167:	p->vel[2] += cent->currentState.angles[2];
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1170
;1168:
;1169:	// if (turb)
;1170:	{
line 1171
;1171:		p->accel[0] = crandom() * 16;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1172
;1172:		p->accel[1] = crandom() * 16;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1173
;1173:	}
line 1174
;1174:}
LABELV $1374
endproc CG_ParticleSnowFlurry 52 4
export CG_ParticleSnow
proc CG_ParticleSnow 56 4
line 1176
;1175:
;1176:void CG_ParticleSnow(qhandle_t pshader, vec3_t origin, vec3_t origin2, int turb, float range, int snum) {
line 1179
;1177:	cparticle_t* p;
;1178:
;1179:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1386
line 1180
;1180:		CG_Printf("CG_ParticleSnow pshader == ZERO!\n");
ADDRGP4 $1388
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1386
line 1182
;1181:
;1182:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1389
line 1183
;1183:		return;
ADDRGP4 $1385
JUMPV
LABELV $1389
line 1184
;1184:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1185
;1185:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1186
;1186:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1187
;1187:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1188
;1188:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1189
;1189:	p->color         = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1190
;1190:	p->alpha         = 0.40f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1053609165
ASGNF4
line 1191
;1191:	p->alphavel      = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1192
;1192:	p->start         = origin[2];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1193
;1193:	p->end           = origin2[2];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1194
;1194:	p->pshader       = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1195
;1195:	p->height        = 1;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1065353216
ASGNF4
line 1196
;1196:	p->width         = 1;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1065353216
ASGNF4
line 1198
;1197:
;1198:	p->vel[2] = -50;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3259498496
ASGNF4
line 1200
;1199:
;1200:	if (turb) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1392
line 1201
;1201:		p->type   = P_WEATHER_TURBULENT;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 5
ASGNI4
line 1202
;1202:		p->vel[2] = -50 * 1.3;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3263299584
ASGNF4
line 1203
;1203:	} else {
ADDRGP4 $1393
JUMPV
LABELV $1392
line 1204
;1204:		p->type = P_WEATHER;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 1
ASGNI4
line 1205
;1205:	}
LABELV $1393
line 1207
;1206:
;1207:	VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1209
;1208:
;1209:	p->org[0] = p->org[0] + (crandom() * range);
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1210
;1210:	p->org[1] = p->org[1] + (crandom() * range);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1211
;1211:	p->org[2] = p->org[2] + (crandom() * (p->start - p->end));
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1213
;1212:
;1213:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 36
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
line 1215
;1214:
;1215:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 44
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 44
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 44
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 44
INDIRF4
ASGNF4
line 1217
;1216:
;1217:	if (turb) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1394
line 1218
;1218:		p->vel[0] = crandom() * 16;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1219
;1219:		p->vel[1] = crandom() * 16;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1220
;1220:	}
LABELV $1394
line 1223
;1221:
;1222:	// Rafael snow pvs check
;1223:	p->snum = snum;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1224
;1224:	p->link = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 1
ASGNI4
line 1225
;1225:}
LABELV $1385
endproc CG_ParticleSnow 56 4
export CG_ParticleBubble
proc CG_ParticleBubble 68 4
line 1227
;1226:
;1227:void CG_ParticleBubble(qhandle_t pshader, vec3_t origin, vec3_t origin2, int turb, float range, int snum) {
line 1231
;1228:	cparticle_t* p;
;1229:	float        randsize;
;1230:
;1231:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1397
line 1232
;1232:		CG_Printf("CG_ParticleSnow pshader == ZERO!\n");
ADDRGP4 $1388
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1397
line 1234
;1233:
;1234:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1399
line 1235
;1235:		return;
ADDRGP4 $1396
JUMPV
LABELV $1399
line 1236
;1236:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1237
;1237:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1238
;1238:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1239
;1239:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1240
;1240:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1241
;1241:	p->color         = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1242
;1242:	p->alpha         = 0.40f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1053609165
ASGNF4
line 1243
;1243:	p->alphavel      = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1244
;1244:	p->start         = origin[2];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1245
;1245:	p->end           = origin2[2];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1246
;1246:	p->pshader       = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1248
;1247:
;1248:	randsize = 1 + (crandom() * 0.5);
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1250
;1249:
;1250:	p->height = randsize;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1251
;1251:	p->width  = randsize;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1253
;1252:
;1253:	p->vel[2] = 50 + (crandom() * 10);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1101004800
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 1255
;1254:
;1255:	if (turb) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1402
line 1256
;1256:		p->type   = P_BUBBLE_TURBULENT;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 14
ASGNI4
line 1257
;1257:		p->vel[2] = 50 * 1.3;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1115815936
ASGNF4
line 1258
;1258:	} else {
ADDRGP4 $1403
JUMPV
LABELV $1402
line 1259
;1259:		p->type = P_BUBBLE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 13
ASGNI4
line 1260
;1260:	}
LABELV $1403
line 1262
;1261:
;1262:	VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1264
;1263:
;1264:	p->org[0] = p->org[0] + (crandom() * range);
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 16
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1265
;1265:	p->org[1] = p->org[1] + (crandom() * range);
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1266
;1266:	p->org[2] = p->org[2] + (crandom() * (p->start - p->end));
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1268
;1267:
;1268:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 48
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
line 1270
;1269:
;1270:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 56
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
line 1272
;1271:
;1272:	if (turb) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1404
line 1273
;1273:		p->vel[0] = crandom() * 4;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1274
;1274:		p->vel[1] = crandom() * 4;
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1275
;1275:	}
LABELV $1404
line 1278
;1276:
;1277:	// Rafael snow pvs check
;1278:	p->snum = snum;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1279
;1279:	p->link = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 1
ASGNI4
line 1280
;1280:}
LABELV $1396
endproc CG_ParticleBubble 68 4
export CG_ParticleSmoke
proc CG_ParticleSmoke 28 4
line 1282
;1281:
;1282:void CG_ParticleSmoke(qhandle_t pshader, centity_t* cent) {
line 1288
;1283:
;1284:	// using cent->density = enttime
;1285:	//		 cent->frame = startfade
;1286:	cparticle_t* p;
;1287:
;1288:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1407
line 1289
;1289:		CG_Printf("CG_ParticleSmoke == ZERO!\n");
ADDRGP4 $1409
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1407
line 1291
;1290:
;1291:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1410
line 1292
;1292:		return;
ADDRGP4 $1406
JUMPV
LABELV $1410
line 1293
;1293:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1294
;1294:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1295
;1295:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1296
;1296:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1297
;1297:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1299
;1298:
;1299:	p->endtime   = cg.time + cent->currentState.time;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1300
;1300:	p->startfade = cg.time + cent->currentState.time2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1302
;1301:
;1302:	p->color     = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1303
;1303:	p->alpha     = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1304
;1304:	p->alphavel  = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1305
;1305:	p->start     = cent->currentState.origin[2];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ASGNF4
line 1306
;1306:	p->end       = cent->currentState.origin2[2];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ASGNF4
line 1307
;1307:	p->pshader   = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1308
;1308:	p->rotate    = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1309
;1309:	p->height    = 8;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1090519040
ASGNF4
line 1310
;1310:	p->width     = 8;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1090519040
ASGNF4
line 1311
;1311:	p->endheight = 32;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1107296256
ASGNF4
line 1312
;1312:	p->endwidth  = 32;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1107296256
ASGNF4
line 1313
;1313:	p->type      = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1315
;1314:
;1315:	VectorCopy(cent->currentState.origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1317
;1316:
;1317:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 1318
;1318:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 16
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
line 1320
;1319:
;1320:	p->vel[2] = 5;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1084227584
ASGNF4
line 1322
;1321:
;1322:	if (cent->currentState.frame == 1)  // reverse gravity
ADDRFP4 4
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1415
line 1323
;1323:		p->vel[2] *= -1;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 3212836864
MULF4
ASGNF4
LABELV $1415
line 1325
;1324:
;1325:	p->roll = 8 + (crandom() * 4);
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
CNSTF4 1090519040
ADDF4
CVFI4 4
ASGNI4
line 1326
;1326:}
LABELV $1406
endproc CG_ParticleSmoke 28 4
export CG_ParticleBulletDebris
proc CG_ParticleBulletDebris 16 0
line 1328
;1327:
;1328:void CG_ParticleBulletDebris(vec3_t org, vec3_t vel, int duration) {
line 1332
;1329:
;1330:	cparticle_t* p;
;1331:
;1332:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1418
line 1333
;1333:		return;
ADDRGP4 $1417
JUMPV
LABELV $1418
line 1334
;1334:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1335
;1335:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1336
;1336:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1337
;1337:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1338
;1338:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1340
;1339:
;1340:	p->endtime   = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 1341
;1341:	p->startfade = cg.time + duration / 2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRI4
CNSTI4 2
DIVI4
ADDI4
ASGNI4
line 1343
;1342:
;1343:	p->color    = EMISIVEFADE;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 3
ASGNI4
line 1344
;1344:	p->alpha    = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1345
;1345:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1347
;1346:
;1347:	p->height    = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1056964608
ASGNF4
line 1348
;1348:	p->width     = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1056964608
ASGNF4
line 1349
;1349:	p->endheight = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1056964608
ASGNF4
line 1350
;1350:	p->endwidth  = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1056964608
ASGNF4
line 1352
;1351:
;1352:	p->pshader = cgs.media.tracerShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+148692+220
INDIRI4
ASGNI4
line 1354
;1353:
;1354:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1356
;1355:
;1356:	VectorCopy(org, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 1358
;1357:
;1358:	p->vel[0]   = vel[0];
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
ASGNF4
line 1359
;1359:	p->vel[1]   = vel[1];
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1360
;1360:	p->vel[2]   = vel[2];
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1361
;1361:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 1363
;1362:
;1363:	p->accel[2] = -60;
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 3262119936
ASGNF4
line 1364
;1364:	p->vel[2] += -20;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 3248488448
ADDF4
ASGNF4
line 1365
;1365:}
LABELV $1417
endproc CG_ParticleBulletDebris 16 0
export CG_ParticleExplosion
proc CG_ParticleExplosion 12 8
line 1373
;1366:
;1367:/*
;1368:======================
;1369:CG_ParticleExplosion
;1370:======================
;1371:*/
;1372:
;1373:void CG_ParticleExplosion(const char* animStr, const vec3_t origin, const vec3_t vel, int duration, int sizeStart, int sizeEnd) {
line 1377
;1374:	cparticle_t* p;
;1375:	int          anim;
;1376:
;1377:	if (animStr < (char*)10)
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 10
GEU4 $1426
line 1378
;1378:		CG_Error("CG_ParticleExplosion: animStr is probably an index rather than a string");
ADDRGP4 $1428
ARGP4
ADDRGP4 CG_Error
CALLV
pop
LABELV $1426
line 1381
;1379:
;1380:	// find the animation string
;1381:	for (anim = 0; shaderAnimNames[anim]; anim++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1432
JUMPV
LABELV $1429
line 1382
;1382:		if (!Q_stricmp(animStr, shaderAnimNames[anim]))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $1433
line 1383
;1383:			break;
ADDRGP4 $1431
JUMPV
LABELV $1433
line 1384
;1384:	}
LABELV $1430
line 1381
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1432
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1429
LABELV $1431
line 1385
;1385:	if (!shaderAnimNames[anim]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1435
line 1386
;1386:		CG_Error("CG_ParticleExplosion: unknown animation string: %s\n", animStr);
ADDRGP4 $1437
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1387
;1387:		return;
ADDRGP4 $1425
JUMPV
LABELV $1435
line 1390
;1388:	}
;1389:
;1390:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1438
line 1391
;1391:		return;
ADDRGP4 $1425
JUMPV
LABELV $1438
line 1392
;1392:	p                = free_particles;
ADDRLP4 4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1393
;1393:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 4
INDIRP4
INDIRP4
ASGNP4
line 1394
;1394:	p->next          = active_particles;
ADDRLP4 4
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1395
;1395:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 4
INDIRP4
ASGNP4
line 1396
;1396:	p->time          = cg.time;
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1397
;1397:	p->alpha         = 0.5;
ADDRLP4 4
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1056964608
ASGNF4
line 1398
;1398:	p->alphavel      = 0;
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1400
;1399:
;1400:	if (duration < 0) {
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $1441
line 1401
;1401:		duration *= -1;
ADDRFP4 12
ADDRFP4 12
INDIRI4
CNSTI4 -1
MULI4
ASGNI4
line 1402
;1402:		p->roll = 0;
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1403
;1403:	} else {
ADDRGP4 $1442
JUMPV
LABELV $1441
line 1404
;1404:		p->roll = crandom() * 179;
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 8
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1135804416
MULF4
CVFI4 4
ASGNI4
line 1405
;1405:	}
LABELV $1442
line 1407
;1406:
;1407:	p->shaderAnim = anim;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1409
;1408:
;1409:	p->width  = sizeStart;
ADDRLP4 4
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 16
INDIRI4
CVIF4 4
ASGNF4
line 1410
;1410:	p->height = sizeStart * shaderAnimSTRatio[anim];  // for sprites that are stretch in either direction
ADDRLP4 4
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 16
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimSTRatio
ADDP4
INDIRF4
MULF4
ASGNF4
line 1412
;1411:
;1412:	p->endheight = sizeEnd;
ADDRLP4 4
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 20
INDIRI4
CVIF4 4
ASGNF4
line 1413
;1413:	p->endwidth  = sizeEnd * shaderAnimSTRatio[anim];
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 20
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimSTRatio
ADDP4
INDIRF4
MULF4
ASGNF4
line 1415
;1414:
;1415:	p->endtime = cg.time + duration;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 12
INDIRI4
ADDI4
ASGNI4
line 1417
;1416:
;1417:	p->type = P_ANIM;
ADDRLP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 6
ASGNI4
line 1419
;1418:
;1419:	VectorCopy(origin, p->org);
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1420
;1420:	VectorCopy(vel, p->vel);
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 1421
;1421:	VectorClear(p->accel);
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1422
;1422:}
LABELV $1425
endproc CG_ParticleExplosion 12 8
export CG_AddParticleShrapnel
proc CG_AddParticleShrapnel 0 0
line 1425
;1423:
;1424:// Rafael Shrapnel
;1425:void CG_AddParticleShrapnel(localEntity_t* le) {
line 1426
;1426:	return;
LABELV $1444
endproc CG_AddParticleShrapnel 0 0
export CG_NewParticleArea
proc CG_NewParticleArea 92 24
line 1430
;1427:}
;1428:// done.
;1429:
;1430:int CG_NewParticleArea(int num) {
line 1437
;1431:	// const char *str;
;1432:	char*  str;
;1433:	char*  token;
;1434:	int    type;
;1435:	vec3_t origin, origin2;
;1436:	int    i;
;1437:	float  range = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 1442
;1438:	int    turb;
;1439:	int    numparticles;
;1440:	int    snum;
;1441:
;1442:	str = (char*)CG_ConfigString(num);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 56
INDIRP4
ASGNP4
line 1443
;1443:	if (!str[0])
ADDRLP4 8
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $1446
line 1444
;1444:		return (0);
CNSTI4 0
RETI4
ADDRGP4 $1445
JUMPV
LABELV $1446
line 1447
;1445:
;1446:	// returns type 128 64 or 32
;1447:	token = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 60
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 60
INDIRP4
ASGNP4
line 1448
;1448:	type  = atoi(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 64
INDIRI4
ASGNI4
line 1450
;1449:
;1450:	if (type == 1)
ADDRLP4 36
INDIRI4
CNSTI4 1
NEI4 $1448
line 1451
;1451:		range = 128;
ADDRLP4 40
CNSTF4 1124073472
ASGNF4
ADDRGP4 $1449
JUMPV
LABELV $1448
line 1452
;1452:	else if (type == 2)
ADDRLP4 36
INDIRI4
CNSTI4 2
NEI4 $1450
line 1453
;1453:		range = 64;
ADDRLP4 40
CNSTF4 1115684864
ASGNF4
ADDRGP4 $1451
JUMPV
LABELV $1450
line 1454
;1454:	else if (type == 3)
ADDRLP4 36
INDIRI4
CNSTI4 3
NEI4 $1452
line 1455
;1455:		range = 32;
ADDRLP4 40
CNSTF4 1107296256
ASGNF4
ADDRGP4 $1453
JUMPV
LABELV $1452
line 1456
;1456:	else if (type == 0)
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $1454
line 1457
;1457:		range = 256;
ADDRLP4 40
CNSTF4 1132462080
ASGNF4
ADDRGP4 $1455
JUMPV
LABELV $1454
line 1458
;1458:	else if (type == 4)
ADDRLP4 36
INDIRI4
CNSTI4 4
NEI4 $1456
line 1459
;1459:		range = 8;
ADDRLP4 40
CNSTF4 1090519040
ASGNF4
ADDRGP4 $1457
JUMPV
LABELV $1456
line 1460
;1460:	else if (type == 5)
ADDRLP4 36
INDIRI4
CNSTI4 5
NEI4 $1458
line 1461
;1461:		range = 16;
ADDRLP4 40
CNSTF4 1098907648
ASGNF4
ADDRGP4 $1459
JUMPV
LABELV $1458
line 1462
;1462:	else if (type == 6)
ADDRLP4 36
INDIRI4
CNSTI4 6
NEI4 $1460
line 1463
;1463:		range = 32;
ADDRLP4 40
CNSTF4 1107296256
ASGNF4
ADDRGP4 $1461
JUMPV
LABELV $1460
line 1464
;1464:	else if (type == 7)
ADDRLP4 36
INDIRI4
CNSTI4 7
NEI4 $1462
line 1465
;1465:		range = 64;
ADDRLP4 40
CNSTF4 1115684864
ASGNF4
LABELV $1462
LABELV $1461
LABELV $1459
LABELV $1457
LABELV $1455
LABELV $1453
LABELV $1451
LABELV $1449
line 1467
;1466:
;1467:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1464
line 1468
;1468:		token     = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
ASGNP4
line 1469
;1469:		origin[i] = atof(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
line 1470
;1470:	}
LABELV $1465
line 1467
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1464
line 1472
;1471:
;1472:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1468
line 1473
;1473:		token      = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
ASGNP4
line 1474
;1474:		origin2[i] = atof(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 24
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
line 1475
;1475:	}
LABELV $1469
line 1472
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1468
line 1477
;1476:
;1477:	token        = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
ASGNP4
line 1478
;1478:	numparticles = atoi(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 48
ADDRLP4 72
INDIRI4
ASGNI4
line 1480
;1479:
;1480:	token = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 76
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 76
INDIRP4
ASGNP4
line 1481
;1481:	turb  = atoi(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 80
INDIRI4
ASGNI4
line 1483
;1482:
;1483:	token = COM_Parse(&str);
ADDRLP4 8
ARGP4
ADDRLP4 84
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 84
INDIRP4
ASGNP4
line 1484
;1484:	snum  = atoi(token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 88
INDIRI4
ASGNI4
line 1486
;1485:
;1486:	for (i = 0; i < numparticles; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1475
JUMPV
LABELV $1472
line 1487
;1487:		if (type >= 4)
ADDRLP4 36
INDIRI4
CNSTI4 4
LTI4 $1476
line 1488
;1488:			CG_ParticleBubble(cgs.media.waterBubbleShader, origin, origin2, turb, range, snum);
ADDRGP4 cgs+148692+292
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 52
INDIRI4
ARGI4
ADDRGP4 CG_ParticleBubble
CALLV
pop
ADDRGP4 $1477
JUMPV
LABELV $1476
line 1490
;1489:		else
;1490:			CG_ParticleSnow(cgs.media.waterBubbleShader, origin, origin2, turb, range, snum);
ADDRGP4 cgs+148692+292
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 52
INDIRI4
ARGI4
ADDRGP4 CG_ParticleSnow
CALLV
pop
LABELV $1477
line 1491
;1491:	}
LABELV $1473
line 1486
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1475
ADDRLP4 0
INDIRI4
ADDRLP4 48
INDIRI4
LTI4 $1472
line 1493
;1492:
;1493:	return (1);
CNSTI4 1
RETI4
LABELV $1445
endproc CG_NewParticleArea 92 24
export CG_SnowLink
proc CG_SnowLink 16 0
line 1496
;1494:}
;1495:
;1496:void CG_SnowLink(centity_t* cent, qboolean particleOn) {
line 1500
;1497:	cparticle_t *p, *next;
;1498:	int          id;
;1499:
;1500:	id = cent->currentState.frame;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ASGNI4
line 1502
;1501:
;1502:	for (p = active_particles; p; p = next) {
ADDRLP4 0
ADDRGP4 active_particles
INDIRP4
ASGNP4
ADDRGP4 $1486
JUMPV
LABELV $1483
line 1503
;1503:		next = p->next;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1505
;1504:
;1505:		if (p->type == P_WEATHER || p->type == P_WEATHER_TURBULENT) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1489
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1487
LABELV $1489
line 1506
;1506:			if (p->snum == id) {
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1490
line 1507
;1507:				if (particleOn)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1492
line 1508
;1508:					p->link = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 1
ASGNI4
ADDRGP4 $1493
JUMPV
LABELV $1492
line 1510
;1509:				else
;1510:					p->link = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 0
ASGNI4
LABELV $1493
line 1511
;1511:			}
LABELV $1490
line 1512
;1512:		}
LABELV $1487
line 1513
;1513:	}
LABELV $1484
line 1502
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $1486
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1483
line 1514
;1514:}
LABELV $1482
endproc CG_SnowLink 16 0
export CG_ParticleImpactSmokePuff
proc CG_ParticleImpactSmokePuff 24 4
line 1516
;1515:
;1516:void CG_ParticleImpactSmokePuff(qhandle_t pshader, vec3_t origin) {
line 1519
;1517:	cparticle_t* p;
;1518:
;1519:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1495
line 1520
;1520:		CG_Printf("CG_ParticleImpactSmokePuff pshader == ZERO!\n");
ADDRGP4 $1497
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1495
line 1522
;1521:
;1522:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1498
line 1523
;1523:		return;
ADDRGP4 $1494
JUMPV
LABELV $1498
line 1524
;1524:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1525
;1525:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1526
;1526:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1527
;1527:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1528
;1528:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1529
;1529:	p->alpha         = 0.25;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1048576000
ASGNF4
line 1530
;1530:	p->alphavel      = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1531
;1531:	p->roll          = crandom() * 179;
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1135804416
MULF4
CVFI4 4
ASGNI4
line 1533
;1532:
;1533:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1535
;1534:
;1535:	p->endtime   = cg.time + 1000;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1536
;1536:	p->startfade = cg.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1538
;1537:
;1538:	p->width  = rand() % 4 + 8;
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 8
INDIRI4
CNSTI4 4
MODI4
CNSTI4 8
ADDI4
CVIF4 4
ASGNF4
line 1539
;1539:	p->height = rand() % 4 + 8;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 4
MODI4
CNSTI4 8
ADDI4
CVIF4 4
ASGNF4
line 1541
;1540:
;1541:	p->endheight = p->height * 2;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ASGNF4
line 1542
;1542:	p->endwidth  = p->width * 2;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ASGNF4
line 1544
;1543:
;1544:	p->endtime = cg.time + 500;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 1546
;1545:
;1546:	p->type = P_SMOKE_IMPACT;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 12
ASGNI4
line 1548
;1547:
;1548:	VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1549
;1549:	VectorSet(p->vel, 0, 0, 20);
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1101004800
ASGNF4
line 1550
;1550:	VectorSet(p->accel, 0, 0, 20);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1101004800
ASGNF4
line 1552
;1551:
;1552:	p->rotate = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 1
ASGNI4
line 1553
;1553:}
LABELV $1494
endproc CG_ParticleImpactSmokePuff 24 4
export CG_Particle_Bleed
proc CG_Particle_Bleed 16 4
line 1555
;1554:
;1555:void CG_Particle_Bleed(qhandle_t pshader, vec3_t start, vec3_t dir, int fleshEntityNum, int duration) {
line 1558
;1556:	cparticle_t* p;
;1557:
;1558:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1505
line 1559
;1559:		CG_Printf("CG_Particle_Bleed pshader == ZERO!\n");
ADDRGP4 $1507
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1505
line 1561
;1560:
;1561:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1508
line 1562
;1562:		return;
ADDRGP4 $1504
JUMPV
LABELV $1508
line 1563
;1563:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1564
;1564:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1565
;1565:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1566
;1566:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1567
;1567:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1568
;1568:	p->alpha         = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1569
;1569:	p->alphavel      = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1570
;1570:	p->roll          = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1572
;1571:
;1572:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1574
;1573:
;1574:	p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 16
INDIRI4
ADDI4
ASGNI4
line 1576
;1575:
;1576:	if (fleshEntityNum)
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1512
line 1577
;1577:		p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRGP4 $1513
JUMPV
LABELV $1512
line 1579
;1578:	else
;1579:		p->startfade = cg.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
LABELV $1513
line 1581
;1580:
;1581:	p->width  = 4;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1082130432
ASGNF4
line 1582
;1582:	p->height = 4;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1082130432
ASGNF4
line 1584
;1583:
;1584:	p->endheight = 4 + rand() % 3;
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 3
MODI4
CNSTI4 4
ADDI4
CVIF4 4
ASGNF4
line 1585
;1585:	p->endwidth  = p->endheight;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ASGNF4
line 1587
;1586:
;1587:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1589
;1588:
;1589:	VectorCopy(start, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1590
;1590:	p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 1591
;1591:	p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 1592
;1592:	p->vel[2] = -20;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3248488448
ASGNF4
line 1593
;1593:	VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1595
;1594:
;1595:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1597
;1596:
;1597:	p->roll = rand() % 179;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 1599
;1598:
;1599:	p->color = BLOODRED;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
line 1600
;1600:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 1601
;1601:}
LABELV $1504
endproc CG_Particle_Bleed 16 4
export CG_Particle_OilParticle
proc CG_Particle_OilParticle 28 4
line 1603
;1602:
;1603:void CG_Particle_OilParticle(qhandle_t pshader, centity_t* cent) {
line 1610
;1604:	cparticle_t* p;
;1605:
;1606:	int          time;
;1607:	int          time2;
;1608:	float        ratio;
;1609:
;1610:	float        duration = 1500;
ADDRLP4 16
CNSTF4 1153138688
ASGNF4
line 1612
;1611:
;1612:	time  = cg.time;
ADDRLP4 8
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1613
;1613:	time2 = cg.time + cent->currentState.time;
ADDRLP4 12
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1615
;1614:
;1615:	ratio = (float)1 - ((float)time / (float)time2);
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 8
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 1617
;1616:
;1617:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1519
line 1618
;1618:		CG_Printf("CG_Particle_OilParticle == ZERO!\n");
ADDRGP4 $1521
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1519
line 1620
;1619:
;1620:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1522
line 1621
;1621:		return;
ADDRGP4 $1516
JUMPV
LABELV $1522
line 1622
;1622:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1623
;1623:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1624
;1624:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1625
;1625:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1626
;1626:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1627
;1627:	p->alpha         = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1628
;1628:	p->alphavel      = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1629
;1629:	p->roll          = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1631
;1630:
;1631:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1633
;1632:
;1633:	p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRLP4 16
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 1635
;1634:
;1635:	p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1637
;1636:
;1637:	p->width  = 1;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1065353216
ASGNF4
line 1638
;1638:	p->height = 3;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1077936128
ASGNF4
line 1640
;1639:
;1640:	p->endheight = 3;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1077936128
ASGNF4
line 1641
;1641:	p->endwidth  = 1;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1065353216
ASGNF4
line 1643
;1642:
;1643:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1645
;1644:
;1645:	VectorCopy(cent->currentState.origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1647
;1646:
;1647:	p->vel[0] = (cent->currentState.origin2[0] * (16 * ratio));
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
MULF4
ASGNF4
line 1648
;1648:	p->vel[1] = (cent->currentState.origin2[1] * (16 * ratio));
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
MULF4
ASGNF4
line 1649
;1649:	p->vel[2] = (cent->currentState.origin2[2]);
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ASGNF4
line 1651
;1650:
;1651:	p->snum = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 1
ASGNI4
line 1653
;1652:
;1653:	VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1655
;1654:
;1655:	p->accel[2] = -20;
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 3248488448
ASGNF4
line 1657
;1656:
;1657:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1659
;1658:
;1659:	p->roll = rand() % 179;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 24
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 1661
;1660:
;1661:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 1662
;1662:}
LABELV $1516
endproc CG_Particle_OilParticle 28 4
export CG_Particle_OilSlick
proc CG_Particle_OilSlick 24 4
line 1664
;1663:
;1664:void CG_Particle_OilSlick(qhandle_t pshader, centity_t* cent) {
line 1667
;1665:	cparticle_t* p;
;1666:
;1667:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1527
line 1668
;1668:		CG_Printf("CG_Particle_OilSlick == ZERO!\n");
ADDRGP4 $1529
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1527
line 1670
;1669:
;1670:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1530
line 1671
;1671:		return;
ADDRGP4 $1526
JUMPV
LABELV $1530
line 1672
;1672:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1673
;1673:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1674
;1674:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1675
;1675:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1676
;1676:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1678
;1677:
;1678:	if (cent->currentState.angles2[2])
ADDRFP4 4
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1533
line 1679
;1679:		p->endtime = cg.time + cent->currentState.angles2[2];
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ADDF4
CVFI4 4
ASGNI4
ADDRGP4 $1534
JUMPV
LABELV $1533
line 1681
;1680:	else
;1681:		p->endtime = cg.time + 60000;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 60000
ADDI4
ASGNI4
LABELV $1534
line 1683
;1682:
;1683:	p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1685
;1684:
;1685:	p->alpha    = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1686
;1686:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1687
;1687:	p->roll     = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1689
;1688:
;1689:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1691
;1690:
;1691:	if (cent->currentState.angles2[0] || cent->currentState.angles2[1]) {
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 0
NEF4 $1539
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1537
LABELV $1539
line 1692
;1692:		p->width  = cent->currentState.angles2[0];
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ASGNF4
line 1693
;1693:		p->height = cent->currentState.angles2[0];
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ASGNF4
line 1695
;1694:
;1695:		p->endheight = cent->currentState.angles2[1];
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ASGNF4
line 1696
;1696:		p->endwidth  = cent->currentState.angles2[1];
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ASGNF4
line 1697
;1697:	} else {
ADDRGP4 $1538
JUMPV
LABELV $1537
line 1698
;1698:		p->width  = 8;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1090519040
ASGNF4
line 1699
;1699:		p->height = 8;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1090519040
ASGNF4
line 1701
;1700:
;1701:		p->endheight = 16;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1098907648
ASGNF4
line 1702
;1702:		p->endwidth  = 16;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1098907648
ASGNF4
line 1703
;1703:	}
LABELV $1538
line 1705
;1704:
;1705:	p->type = P_FLAT_SCALEUP;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 9
ASGNI4
line 1707
;1706:
;1707:	p->snum = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 1
ASGNI4
line 1709
;1708:
;1709:	VectorCopy(cent->currentState.origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1711
;1710:
;1711:	p->org[2] += 0.55 + (crandom() * 0.5);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1057803469
ADDF4
ADDF4
ASGNF4
line 1713
;1712:
;1713:	p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 1714
;1714:	p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 1715
;1715:	p->vel[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 0
ASGNF4
line 1716
;1716:	VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1718
;1717:
;1718:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1720
;1719:
;1720:	p->roll = rand() % 179;
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 1722
;1721:
;1722:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 1723
;1723:}
LABELV $1526
endproc CG_Particle_OilSlick 24 4
export CG_OilSlickRemove
proc CG_OilSlickRemove 16 4
line 1725
;1724:
;1725:void CG_OilSlickRemove(centity_t* cent) {
line 1729
;1726:	cparticle_t *p, *next;
;1727:	int          id;
;1728:
;1729:	id = 1.0f;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 1731
;1730:
;1731:	if (!id)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $1541
line 1732
;1732:		CG_Printf("CG_OilSlickRevove NULL id\n");
ADDRGP4 $1543
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1541
line 1734
;1733:
;1734:	for (p = active_particles; p; p = next) {
ADDRLP4 0
ADDRGP4 active_particles
INDIRP4
ASGNP4
ADDRGP4 $1547
JUMPV
LABELV $1544
line 1735
;1735:		next = p->next;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1737
;1736:
;1737:		if (p->type == P_FLAT_SCALEUP) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 9
NEI4 $1548
line 1738
;1738:			if (p->snum == id) {
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1550
line 1739
;1739:				p->endtime   = cg.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1740
;1740:				p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1741
;1741:				p->type      = P_FLAT_SCALEUP_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 10
ASGNI4
line 1742
;1742:			}
LABELV $1550
line 1743
;1743:		}
LABELV $1548
line 1744
;1744:	}
LABELV $1545
line 1734
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $1547
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1544
line 1745
;1745:}
LABELV $1540
endproc CG_OilSlickRemove 16 4
export ValidBloodPool
proc ValidBloodPool 180 28
line 1747
;1746:
;1747:qboolean ValidBloodPool(vec3_t start) {
line 1758
;1748:#define EXTRUDE_DIST 0.5
;1749:
;1750:	vec3_t  angles;
;1751:	vec3_t  right, up;
;1752:	vec3_t  this_pos, x_pos, center_pos, end_pos;
;1753:	float   x, y;
;1754:	float   fwidth, fheight;
;1755:	trace_t trace;
;1756:	vec3_t  normal;
;1757:
;1758:	fwidth  = 16;
ADDRLP4 152
CNSTF4 1098907648
ASGNF4
line 1759
;1759:	fheight = 16;
ADDRLP4 120
CNSTF4 1098907648
ASGNF4
line 1761
;1760:
;1761:	VectorSet(normal, 0, 0, 1);
ADDRLP4 96
CNSTF4 0
ASGNF4
ADDRLP4 96+4
CNSTF4 0
ASGNF4
ADDRLP4 96+8
CNSTF4 1065353216
ASGNF4
line 1763
;1762:
;1763:	vectoangles(normal, angles);
ADDRLP4 96
ARGP4
ADDRLP4 156
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1764
;1764:	AngleVectors(angles, NULL, right, up);
ADDRLP4 156
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 108
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1766
;1765:
;1766:	VectorMA(start, EXTRUDE_DIST, normal, center_pos);
ADDRLP4 168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
ADDRLP4 168
INDIRP4
INDIRF4
ADDRLP4 96
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
ADDRLP4 128+4
ADDRLP4 168
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 96+4
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
ADDRLP4 128+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 96+8
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 1768
;1767:
;1768:	for (x = -fwidth / 2; x < fwidth; x += fwidth) {
ADDRLP4 124
ADDRLP4 152
INDIRF4
NEGF4
CNSTF4 1056964608
MULF4
ASGNF4
ADDRGP4 $1563
JUMPV
LABELV $1560
line 1769
;1769:		VectorMA(center_pos, x, right, x_pos);
ADDRLP4 84
ADDRLP4 128
INDIRF4
ADDRLP4 140
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 84+4
ADDRLP4 128+4
INDIRF4
ADDRLP4 140+4
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 84+8
ADDRLP4 128+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
ADDF4
ASGNF4
line 1771
;1770:
;1771:		for (y = -fheight / 2; y < fheight; y += fheight) {
ADDRLP4 12
ADDRLP4 120
INDIRF4
NEGF4
CNSTF4 1056964608
MULF4
ASGNF4
ADDRGP4 $1573
JUMPV
LABELV $1570
line 1772
;1772:			VectorMA(x_pos, y, up, this_pos);
ADDRLP4 0
ADDRLP4 84
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 84+4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 84+8
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1773
;1773:			VectorMA(this_pos, -EXTRUDE_DIST * 2, normal, end_pos);
ADDRLP4 16
ADDRLP4 0
INDIRF4
ADDRLP4 96
INDIRF4
CNSTF4 3212836864
MULF4
ADDF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 96+4
INDIRF4
CNSTF4 3212836864
MULF4
ADDF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 96+8
INDIRF4
CNSTF4 3212836864
MULF4
ADDF4
ASGNF4
line 1775
;1774:
;1775:			CG_Trace(&trace, this_pos, NULL, NULL, end_pos, -1, CONTENTS_SOLID);
ADDRLP4 28
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 16
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1777
;1776:
;1777:			if (trace.entityNum < (MAX_ENTITIES - 1))  // may only land on world
ADDRLP4 28+52
INDIRI4
CNSTI4 1022
GEI4 $1586
line 1778
;1778:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1553
JUMPV
LABELV $1586
line 1780
;1779:
;1780:			if (!(!trace.startsolid && trace.fraction < 1))
ADDRLP4 28+4
INDIRI4
CNSTI4 0
NEI4 $1593
ADDRLP4 28+8
INDIRF4
CNSTF4 1065353216
LTF4 $1589
LABELV $1593
line 1781
;1781:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1553
JUMPV
LABELV $1589
line 1782
;1782:		}
LABELV $1571
line 1771
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 120
INDIRF4
ADDF4
ASGNF4
LABELV $1573
ADDRLP4 12
INDIRF4
ADDRLP4 120
INDIRF4
LTF4 $1570
line 1783
;1783:	}
LABELV $1561
line 1768
ADDRLP4 124
ADDRLP4 124
INDIRF4
ADDRLP4 152
INDIRF4
ADDF4
ASGNF4
LABELV $1563
ADDRLP4 124
INDIRF4
ADDRLP4 152
INDIRF4
LTF4 $1560
line 1785
;1784:
;1785:	return qtrue;
CNSTI4 1
RETI4
LABELV $1553
endproc ValidBloodPool 180 28
export CG_BloodPool
proc CG_BloodPool 40 4
line 1788
;1786:}
;1787:
;1788:void CG_BloodPool(localEntity_t* le, qhandle_t pshader, trace_t* tr) {
line 1794
;1789:	cparticle_t* p;
;1790:	qboolean     legit;
;1791:	vec3_t       start;
;1792:	float        rndSize;
;1793:
;1794:	if (!pshader)
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $1595
line 1795
;1795:		CG_Printf("CG_BloodPool pshader == ZERO!\n");
ADDRGP4 $1597
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1595
line 1797
;1796:
;1797:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1598
line 1798
;1798:		return;
ADDRGP4 $1594
JUMPV
LABELV $1598
line 1800
;1799:
;1800:	VectorCopy(tr->endpos, start);
ADDRLP4 8
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1801
;1801:	legit = ValidBloodPool(start);
ADDRLP4 8
ARGP4
ADDRLP4 24
ADDRGP4 ValidBloodPool
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 24
INDIRI4
ASGNI4
line 1803
;1802:
;1803:	if (!legit)
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $1600
line 1804
;1804:		return;
ADDRGP4 $1594
JUMPV
LABELV $1600
line 1806
;1805:
;1806:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1807
;1807:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1808
;1808:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1809
;1809:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1810
;1810:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1812
;1811:
;1812:	p->endtime   = cg.time + 3000;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 3000
ADDI4
ASGNI4
line 1813
;1813:	p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1815
;1814:
;1815:	p->alpha    = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1816
;1816:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1817
;1817:	p->roll     = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1819
;1818:
;1819:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 1821
;1820:
;1821:	rndSize = 0.4 + random() * 0.6;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 932813517
MULF4
CNSTF4 1053609165
ADDF4
ASGNF4
line 1823
;1822:
;1823:	p->width  = 8 * rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1824
;1824:	p->height = 8 * rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1826
;1825:
;1826:	p->endheight = 16 * rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
line 1827
;1827:	p->endwidth  = 16 * rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
line 1829
;1828:
;1829:	p->type = P_FLAT_SCALEUP;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 9
ASGNI4
line 1831
;1830:
;1831:	VectorCopy(start, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 8
INDIRB
ASGNB 12
line 1833
;1832:
;1833:	p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 1834
;1834:	p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 1835
;1835:	p->vel[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 0
ASGNF4
line 1836
;1836:	VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1838
;1837:
;1838:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1840
;1839:
;1840:	p->roll = rand() % 179;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 36
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 1842
;1841:
;1842:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 1844
;1843:
;1844:	p->color = BLOODRED;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
line 1845
;1845:}
LABELV $1594
endproc CG_BloodPool 40 4
export CG_ParticleBloodCloud
proc CG_ParticleBloodCloud 72 16
line 1850
;1846:
;1847:#define NORMALSIZE 16
;1848:#define LARGESIZE  32
;1849:
;1850:void CG_ParticleBloodCloud(centity_t* cent, vec3_t origin, vec3_t dir) {
line 1859
;1851:	float        length;
;1852:	float        dist;
;1853:	float        crittersize;
;1854:	vec3_t       angles, forward;
;1855:	vec3_t       point;
;1856:	cparticle_t* p;
;1857:	int          i;
;1858:
;1859:	dist = 0;
ADDRLP4 36
CNSTF4 0
ASGNF4
line 1861
;1860:
;1861:	length = VectorLength(dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 40
ADDRLP4 56
INDIRF4
ASGNF4
line 1862
;1862:	vectoangles(dir, angles);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1863
;1863:	AngleVectors(angles, forward, NULL, NULL);
ADDRLP4 44
ARGP4
ADDRLP4 20
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1865
;1864:
;1865:	crittersize = LARGESIZE;
ADDRLP4 16
CNSTF4 1107296256
ASGNF4
line 1867
;1866:
;1867:	if (length)
ADDRLP4 40
INDIRF4
CNSTF4 0
EQF4 $1605
line 1868
;1868:		dist = length / crittersize;
ADDRLP4 36
ADDRLP4 40
INDIRF4
ADDRLP4 16
INDIRF4
DIVF4
ASGNF4
LABELV $1605
line 1870
;1869:
;1870:	if (dist < 1)
ADDRLP4 36
INDIRF4
CNSTF4 1065353216
GEF4 $1607
line 1871
;1871:		dist = 1;
ADDRLP4 36
CNSTF4 1065353216
ASGNF4
LABELV $1607
line 1873
;1872:
;1873:	VectorCopy(origin, point);
ADDRLP4 4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1875
;1874:
;1875:	for (i = 0; i < dist; i++) {
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRGP4 $1612
JUMPV
LABELV $1609
line 1876
;1876:		VectorMA(point, crittersize, forward, point);
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 20
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 4+4
INDIRF4
ADDRLP4 20+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRLP4 20+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1878
;1877:
;1878:		if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1619
line 1879
;1879:			return;
ADDRGP4 $1604
JUMPV
LABELV $1619
line 1881
;1880:
;1881:		p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1882
;1882:		free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1883
;1883:		p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1884
;1884:		active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1886
;1885:
;1886:		p->time     = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1887
;1887:		p->alpha    = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1888
;1888:		p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1889
;1889:		p->roll     = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1891
;1890:
;1891:		p->pshader = cgs.media.smokePuffShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+148692+276
INDIRI4
ASGNI4
line 1893
;1892:
;1893:		p->endtime = cg.time + 350 + (crandom() * 100);
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 350
ADDI4
CVIF4 4
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1895
;1894:
;1895:		p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1897
;1896:
;1897:		p->width     = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1107296256
ASGNF4
line 1898
;1898:		p->height    = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1107296256
ASGNF4
line 1899
;1899:		p->endheight = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1107296256
ASGNF4
line 1900
;1900:		p->endwidth  = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1107296256
ASGNF4
line 1902
;1901:
;1902:		p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1904
;1903:
;1904:		VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1906
;1905:
;1906:		p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 1907
;1907:		p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 1908
;1908:		p->vel[2] = -1;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3212836864
ASGNF4
line 1910
;1909:
;1910:		VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 1912
;1911:
;1912:		p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1914
;1913:
;1914:		p->roll = rand() % 179;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 68
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 1916
;1915:
;1916:		p->color = BLOODRED;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
line 1918
;1917:
;1918:		p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 1919
;1919:	}
LABELV $1610
line 1875
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1612
ADDRLP4 32
INDIRI4
CVIF4 4
ADDRLP4 36
INDIRF4
LTF4 $1609
line 1920
;1920:}
LABELV $1604
endproc CG_ParticleBloodCloud 72 16
export CG_ParticleSparks
proc CG_ParticleSparks 60 0
line 1922
;1921:
;1922:void CG_ParticleSparks(vec3_t org, vec3_t vel, int duration, float x, float y, float speed) {
line 1925
;1923:	cparticle_t* p;
;1924:
;1925:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1627
line 1926
;1926:		return;
ADDRGP4 $1626
JUMPV
LABELV $1627
line 1927
;1927:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1928
;1928:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1929
;1929:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1930
;1930:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1931
;1931:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1933
;1932:
;1933:	p->endtime   = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 1934
;1934:	p->startfade = cg.time + duration / 2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRI4
CNSTI4 2
DIVI4
ADDI4
ASGNI4
line 1936
;1935:
;1936:	p->color    = EMISIVEFADE;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 3
ASGNI4
line 1937
;1937:	p->alpha    = 0.4f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1053609165
ASGNF4
line 1938
;1938:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1940
;1939:
;1940:	p->height    = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1056964608
ASGNF4
line 1941
;1941:	p->width     = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1056964608
ASGNF4
line 1942
;1942:	p->endheight = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1056964608
ASGNF4
line 1943
;1943:	p->endwidth  = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1056964608
ASGNF4
line 1945
;1944:
;1945:	p->pshader = cgs.media.tracerShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+148692+220
INDIRI4
ASGNI4
line 1947
;1946:
;1947:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1949
;1948:
;1949:	VectorCopy(org, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 1951
;1950:
;1951:	p->org[0] += (crandom() * x);
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1952
;1952:	p->org[1] += (crandom() * y);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1954
;1953:
;1954:	p->vel[0] = vel[0];
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
ASGNF4
line 1955
;1955:	p->vel[1] = vel[1];
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1956
;1956:	p->vel[2] = vel[2];
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1958
;1957:
;1958:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1960
;1959:
;1960:	p->vel[0] += (crandom() * 4);
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ADDF4
ASGNF4
line 1961
;1961:	p->vel[1] += (crandom() * 4);
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ADDF4
ASGNF4
line 1962
;1962:	p->vel[2] += (20 + (crandom() * 10)) * speed;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 48
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1101004800
MULF4
CNSTF4 1101004800
ADDF4
ADDRFP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
line 1964
;1963:
;1964:	p->accel[0] = crandom() * 4;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1965
;1965:	p->accel[1] = crandom() * 4;
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1966
;1966:}
LABELV $1626
endproc CG_ParticleSparks 60 0
export CG_ParticleDust
proc CG_ParticleDust 108 16
line 1968
;1967:
;1968:void CG_ParticleDust(centity_t* cent, vec3_t origin, vec3_t dir) {
line 1977
;1969:	float        length;
;1970:	float        dist;
;1971:	float        crittersize;
;1972:	vec3_t       angles, forward;
;1973:	vec3_t       point;
;1974:	cparticle_t* p;
;1975:	int          i;
;1976:
;1977:	dist = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 1979
;1978:
;1979:	VectorNegate(dir, dir);
ADDRLP4 56
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
NEGF4
ASGNF4
ADDRLP4 60
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
NEGF4
ASGNF4
ADDRLP4 64
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
NEGF4
ASGNF4
line 1980
;1980:	length = VectorLength(dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 68
INDIRF4
ASGNF4
line 1981
;1981:	vectoangles(dir, angles);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1982
;1982:	AngleVectors(angles, forward, NULL, NULL);
ADDRLP4 44
ARGP4
ADDRLP4 20
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1984
;1983:
;1984:	crittersize = LARGESIZE;
ADDRLP4 16
CNSTF4 1107296256
ASGNF4
line 1986
;1985:
;1986:	if (length)
ADDRLP4 32
INDIRF4
CNSTF4 0
EQF4 $1635
line 1987
;1987:		dist = length / crittersize;
ADDRLP4 40
ADDRLP4 32
INDIRF4
ADDRLP4 16
INDIRF4
DIVF4
ASGNF4
LABELV $1635
line 1989
;1988:
;1989:	if (dist < 1)
ADDRLP4 40
INDIRF4
CNSTF4 1065353216
GEF4 $1637
line 1990
;1990:		dist = 1;
ADDRLP4 40
CNSTF4 1065353216
ASGNF4
LABELV $1637
line 1992
;1991:
;1992:	VectorCopy(origin, point);
ADDRLP4 4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1994
;1993:
;1994:	for (i = 0; i < dist; i++) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRGP4 $1642
JUMPV
LABELV $1639
line 1995
;1995:		VectorMA(point, crittersize, forward, point);
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 20
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 4+4
INDIRF4
ADDRLP4 20+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRLP4 20+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1997
;1996:
;1997:		if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1649
line 1998
;1998:			return;
ADDRGP4 $1634
JUMPV
LABELV $1649
line 2000
;1999:
;2000:		p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2001
;2001:		free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2002
;2002:		p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2003
;2003:		active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2005
;2004:
;2005:		p->time     = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2006
;2006:		p->alpha    = 5.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1084227584
ASGNF4
line 2007
;2007:		p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2008
;2008:		p->roll     = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 2010
;2009:
;2010:		p->pshader = cgs.media.smokePuffShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+148692+276
INDIRI4
ASGNI4
line 2013
;2011:
;2012:		// RF, stay around for long enough to expand and dissipate naturally
;2013:		if (length)
ADDRLP4 32
INDIRF4
CNSTF4 0
EQF4 $1654
line 2014
;2014:			p->endtime = cg.time + 4500 + (crandom() * 3500);
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 4500
ADDI4
CVIF4 4
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1171963904
MULF4
ADDF4
CVFI4 4
ASGNI4
ADDRGP4 $1655
JUMPV
LABELV $1654
line 2016
;2015:		else
;2016:			p->endtime = cg.time + 750 + (crandom() * 500);
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 750
ADDI4
CVIF4 4
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1148846080
MULF4
ADDF4
CVFI4 4
ASGNI4
LABELV $1655
line 2018
;2017:
;2018:		p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2020
;2019:
;2020:		p->width  = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1107296256
ASGNF4
line 2021
;2021:		p->height = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1107296256
ASGNF4
line 2024
;2022:
;2023:		// RF, expand while falling
;2024:		p->endheight = LARGESIZE * 3.0;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1119879168
ASGNF4
line 2025
;2025:		p->endwidth  = LARGESIZE * 3.0;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1119879168
ASGNF4
line 2027
;2026:
;2027:		if (!length) {
ADDRLP4 32
INDIRF4
CNSTF4 0
NEF4 $1659
line 2028
;2028:			p->width *= 0.2f;
ADDRLP4 84
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 2029
;2029:			p->height *= 0.2f;
ADDRLP4 88
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 2031
;2030:
;2031:			p->endheight = NORMALSIZE;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1098907648
ASGNF4
line 2032
;2032:			p->endwidth  = NORMALSIZE;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1098907648
ASGNF4
line 2033
;2033:		}
LABELV $1659
line 2035
;2034:
;2035:		p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 2037
;2036:
;2037:		VectorCopy(point, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 2039
;2038:
;2039:		p->vel[0] = crandom() * 6;
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1094713344
MULF4
ASGNF4
line 2040
;2040:		p->vel[1] = crandom() * 6;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1094713344
MULF4
ASGNF4
line 2041
;2041:		p->vel[2] = random() * 20;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 975176000
MULF4
ASGNF4
line 2044
;2042:
;2043:		// RF, add some gravity/randomness
;2044:		p->accel[0] = crandom() * 3;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086324736
MULF4
ASGNF4
line 2045
;2045:		p->accel[1] = crandom() * 3;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 939524352
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086324736
MULF4
ASGNF4
line 2046
;2046:		p->accel[2] = -PARTICLE_GRAVITY * 0.4;
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 3246391296
ASGNF4
line 2048
;2047:
;2048:		VectorClear(p->accel);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 0
ASGNF4
line 2050
;2049:
;2050:		p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2052
;2051:
;2052:		p->roll = rand() % 179;
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 104
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 2054
;2053:
;2054:		p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 2055
;2055:	}
LABELV $1640
line 1994
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1642
ADDRLP4 36
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
LTF4 $1639
line 2056
;2056:}
LABELV $1634
endproc CG_ParticleDust 108 16
export CG_ParticleMisc
proc CG_ParticleMisc 8 4
line 2058
;2057:
;2058:void CG_ParticleMisc(qhandle_t pshader, vec3_t origin, int size, int duration, float alpha) {
line 2061
;2059:	cparticle_t* p;
;2060:
;2061:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1662
line 2062
;2062:		CG_Printf("CG_ParticleImpactSmokePuff pshader == ZERO!\n");
ADDRGP4 $1497
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1662
line 2064
;2063:
;2064:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1664
line 2065
;2065:		return;
ADDRGP4 $1661
JUMPV
LABELV $1664
line 2067
;2066:
;2067:	p                = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2068
;2068:	free_particles   = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2069
;2069:	p->next          = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2070
;2070:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2071
;2071:	p->time          = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2072
;2072:	p->alpha         = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 2073
;2073:	p->alphavel      = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2074
;2074:	p->roll          = rand() % 179;
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 2076
;2075:
;2076:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 2078
;2077:
;2078:	if (duration > 0)
ADDRFP4 12
INDIRI4
CNSTI4 0
LEI4 $1667
line 2079
;2079:		p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 12
INDIRI4
ADDI4
ASGNI4
ADDRGP4 $1668
JUMPV
LABELV $1667
line 2081
;2080:	else
;2081:		p->endtime = duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $1668
line 2083
;2082:
;2083:	p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2085
;2084:
;2085:	p->width  = size;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2086
;2086:	p->height = size;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2088
;2087:
;2088:	p->endheight = size;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2089
;2089:	p->endwidth  = size;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2091
;2090:
;2091:	p->type = P_SPRITE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 15
ASGNI4
line 2093
;2092:
;2093:	VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 2095
;2094:
;2095:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2096
;2096:}
LABELV $1661
endproc CG_ParticleMisc 8 4
bss
export oldtime
align 4
LABELV oldtime
skip 4
export rup
align 4
LABELV rup
skip 12
export rright
align 4
LABELV rright
skip 12
export rforward
align 4
LABELV rforward
skip 12
export pvup
align 4
LABELV pvup
skip 12
export pvright
align 4
LABELV pvright
skip 12
export pvforward
align 4
LABELV pvforward
skip 12
export particles
align 4
LABELV particles
skip 126976
export free_particles
align 4
LABELV free_particles
skip 4
export active_particles
align 4
LABELV active_particles
skip 4
align 4
LABELV numShaderAnims
skip 4
align 4
LABELV shaderAnims
skip 8192
align 4
LABELV markTotal
skip 4
export cg_freeMarkPolys
align 4
LABELV cg_freeMarkPolys
skip 4
export cg_activeMarkPolys
align 4
LABELV cg_activeMarkPolys
skip 288
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import phy_movetype
import cg_timerBest_y
import cg_timerBest_x
import cg_timerActive_y
import cg_timerActive_x
import cg_timerSkim_y
import cg_timerSkim_x
import cg_speed_y
import cg_speed_x
import cg_followKiller
import cg_fovAdjust
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import cg_smoothClients
import cg_scorePlum
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_drawSpeed
import cg_drawAttacker
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailRadius
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_drawWeaponSelect
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
export cg_markPolys
align 4
LABELV cg_markPolys
skip 73728
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import VectorMAM
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1597
byte 1 67
byte 1 71
byte 1 95
byte 1 66
byte 1 108
byte 1 111
byte 1 111
byte 1 100
byte 1 80
byte 1 111
byte 1 111
byte 1 108
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1543
byte 1 67
byte 1 71
byte 1 95
byte 1 79
byte 1 105
byte 1 108
byte 1 83
byte 1 108
byte 1 105
byte 1 99
byte 1 107
byte 1 82
byte 1 101
byte 1 118
byte 1 111
byte 1 118
byte 1 101
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 32
byte 1 105
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $1529
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 95
byte 1 79
byte 1 105
byte 1 108
byte 1 83
byte 1 108
byte 1 105
byte 1 99
byte 1 107
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1521
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 95
byte 1 79
byte 1 105
byte 1 108
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1507
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 95
byte 1 66
byte 1 108
byte 1 101
byte 1 101
byte 1 100
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1497
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 73
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 83
byte 1 109
byte 1 111
byte 1 107
byte 1 101
byte 1 80
byte 1 117
byte 1 102
byte 1 102
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1437
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 115
byte 1 116
byte 1 114
byte 1 105
byte 1 110
byte 1 103
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1428
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 83
byte 1 116
byte 1 114
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 112
byte 1 114
byte 1 111
byte 1 98
byte 1 97
byte 1 98
byte 1 108
byte 1 121
byte 1 32
byte 1 97
byte 1 110
byte 1 32
byte 1 105
byte 1 110
byte 1 100
byte 1 101
byte 1 120
byte 1 32
byte 1 114
byte 1 97
byte 1 116
byte 1 104
byte 1 101
byte 1 114
byte 1 32
byte 1 116
byte 1 104
byte 1 97
byte 1 110
byte 1 32
byte 1 97
byte 1 32
byte 1 115
byte 1 116
byte 1 114
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $1409
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 109
byte 1 111
byte 1 107
byte 1 101
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1388
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 110
byte 1 111
byte 1 119
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1377
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 110
byte 1 111
byte 1 119
byte 1 70
byte 1 108
byte 1 117
byte 1 114
byte 1 114
byte 1 121
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $244
byte 1 37
byte 1 115
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $226
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 100
byte 1 101
byte 1 49
byte 1 0
align 1
LABELV $100
byte 1 67
byte 1 71
byte 1 95
byte 1 73
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 77
byte 1 97
byte 1 114
byte 1 107
byte 1 32
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 60
byte 1 61
byte 1 32
byte 1 48
byte 1 32
byte 1 114
byte 1 97
byte 1 100
byte 1 105
byte 1 117
byte 1 115
byte 1 0
align 1
LABELV $83
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 76
byte 1 111
byte 1 99
byte 1 97
byte 1 108
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 58
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 0
