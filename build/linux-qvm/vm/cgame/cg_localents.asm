export CG_InitLocalEntities
code
proc CG_InitLocalEntities 12 12
file "../../../../code/cgame/cg_localents.c"
line 21
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:
;4:// cg_localents.c -- every frame, generate renderer commands for locally
;5:// processed entities, like smoke puffs, gibs, shells, etc.
;6:
;7:#include "cg_local.h"
;8:
;9:#define MAX_LOCAL_ENTITIES 2048
;10:localEntity_t  cg_localEntities[MAX_LOCAL_ENTITIES];
;11:localEntity_t  cg_activeLocalEntities;  // double linked list
;12:localEntity_t* cg_freeLocalEntities;    // single linked list
;13:
;14:/*
;15:===================
;16:CG_InitLocalEntities
;17:
;18:This is called at startup and for tournement restarts
;19:===================
;20:*/
;21:void CG_InitLocalEntities(void) {
line 24
;22:	int i;
;23:
;24:	memset(cg_localEntities, 0, sizeof(cg_localEntities));
ADDRGP4 cg_localEntities
ARGP4
CNSTI4 0
ARGI4
CNSTI4 598016
ARGI4
ADDRGP4 memset
CALLP4
pop
line 25
;25:	cg_activeLocalEntities.next = &cg_activeLocalEntities;
ADDRGP4 cg_activeLocalEntities+4
ADDRGP4 cg_activeLocalEntities
ASGNP4
line 26
;26:	cg_activeLocalEntities.prev = &cg_activeLocalEntities;
ADDRLP4 4
ADDRGP4 cg_activeLocalEntities
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 27
;27:	cg_freeLocalEntities        = cg_localEntities;
ADDRGP4 cg_freeLocalEntities
ADDRGP4 cg_localEntities
ASGNP4
line 28
;28:	for (i = 0; i < MAX_LOCAL_ENTITIES - 1; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $74
line 29
;29:		cg_localEntities[i].next = &cg_localEntities[i + 1];
ADDRLP4 0
INDIRI4
CNSTI4 292
MULI4
ADDRGP4 cg_localEntities+4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 292
MULI4
ADDRGP4 cg_localEntities+292
ADDP4
ASGNP4
line 30
;30:	}
LABELV $75
line 28
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2047
LTI4 $74
line 31
;31:}
LABELV $72
endproc CG_InitLocalEntities 12 12
export CG_FreeLocalEntity
proc CG_FreeLocalEntity 8 4
line 38
;32:
;33:/*
;34:==================
;35:CG_FreeLocalEntity
;36:==================
;37:*/
;38:void CG_FreeLocalEntity(localEntity_t* le) {
line 39
;39:	if (!le->prev) {
ADDRFP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $81
line 40
;40:		CG_Error("CG_FreeLocalEntity: not active");
ADDRGP4 $83
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 41
;41:	}
LABELV $81
line 44
;42:
;43:	// remove from the doubly linked active list
;44:	le->prev->next = le->next;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 45
;45:	le->next->prev = le->prev;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRP4
ASGNP4
line 48
;46:
;47:	// the free list is only singly linked
;48:	le->next             = cg_freeLocalEntities;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_freeLocalEntities
INDIRP4
ASGNP4
line 49
;49:	cg_freeLocalEntities = le;
ADDRGP4 cg_freeLocalEntities
ADDRFP4 0
INDIRP4
ASGNP4
line 50
;50:}
LABELV $80
endproc CG_FreeLocalEntity 8 4
export CG_AllocLocalEntity
proc CG_AllocLocalEntity 8 12
line 59
;51:
;52:/*
;53:===================
;54:CG_AllocLocalEntity
;55:
;56:Will always succeed, even if it requires freeing an old active entity
;57:===================
;58:*/
;59:localEntity_t* CG_AllocLocalEntity(void) {
line 62
;60:	localEntity_t* le;
;61:
;62:	if (!cg_freeLocalEntities) {
ADDRGP4 cg_freeLocalEntities
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $85
line 65
;63:		// no free entities, so free the one at the end of the chain
;64:		// remove the oldest active entity
;65:		CG_FreeLocalEntity(cg_activeLocalEntities.prev);
ADDRGP4 cg_activeLocalEntities
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 66
;66:	}
LABELV $85
line 68
;67:
;68:	le                   = cg_freeLocalEntities;
ADDRLP4 0
ADDRGP4 cg_freeLocalEntities
INDIRP4
ASGNP4
line 69
;69:	cg_freeLocalEntities = cg_freeLocalEntities->next;
ADDRLP4 4
ADDRGP4 cg_freeLocalEntities
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 71
;70:
;71:	memset(le, 0, sizeof(*le));
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 292
ARGI4
ADDRGP4 memset
CALLP4
pop
line 74
;72:
;73:	// link into the active list
;74:	le->next                          = cg_activeLocalEntities.next;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_activeLocalEntities+4
INDIRP4
ASGNP4
line 75
;75:	le->prev                          = &cg_activeLocalEntities;
ADDRLP4 0
INDIRP4
ADDRGP4 cg_activeLocalEntities
ASGNP4
line 76
;76:	cg_activeLocalEntities.next->prev = le;
ADDRGP4 cg_activeLocalEntities+4
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 77
;77:	cg_activeLocalEntities.next       = le;
ADDRGP4 cg_activeLocalEntities+4
ADDRLP4 0
INDIRP4
ASGNP4
line 78
;78:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $84
endproc CG_AllocLocalEntity 8 12
export CG_BloodTrail
proc CG_BloodTrail 40 48
line 99
;79:}
;80:
;81:/*
;82:====================================================================================
;83:
;84:FRAGMENT PROCESSING
;85:
;86:A fragment localentity interacts with the environment in some way (hitting walls),
;87:or generates more localentities along a trail.
;88:
;89:====================================================================================
;90:*/
;91:
;92:/*
;93:================
;94:CG_BloodTrail
;95:
;96:Leave expanding blood puffs behind gibs
;97:================
;98:*/
;99:void CG_BloodTrail(localEntity_t* le) {
line 106
;100:	int            t;
;101:	int            t2;
;102:	int            step;
;103:	vec3_t         newOrigin;
;104:	localEntity_t* blood;
;105:
;106:	step = 150;
ADDRLP4 20
CNSTI4 150
ASGNI4
line 107
;107:	t    = step * ((cg.time - cg.frametime + step) / step);
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+107600
INDIRI4
SUBI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 108
;108:	t2   = step * (cg.time / step);
ADDRLP4 24
ADDRLP4 20
INDIRI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 110
;109:
;110:	for (; t <= t2; t += step) {
ADDRGP4 $97
JUMPV
LABELV $94
line 111
;111:		BG_EvaluateTrajectory(&le->pos, t, newOrigin);
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 113
;112:
;113:		blood = CG_SmokePuff(
ADDRLP4 8
ARGP4
ADDRGP4 vec3_origin
ARGP4
CNSTF4 1101004800
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1157234688
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+148692+296
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 36
INDIRP4
ASGNP4
line 123
;114:			newOrigin, vec3_origin,
;115:			20,          // radius
;116:			1, 1, 1, 1,  // color
;117:			2000,        // trailTime
;118:			t,           // startTime
;119:			0,           // fadeInTime
;120:			0,           // flags
;121:			cgs.media.bloodTrailShader);
;122:		// use the optimized version
;123:		blood->leType = LE_FALL_SCALE_FADE;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 125
;124:		// drop a total of 40 units over its lifetime
;125:		blood->pos.trDelta[2] = 40;
ADDRLP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1109393408
ASGNF4
line 126
;126:	}
LABELV $95
line 110
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $97
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
LEI4 $94
line 127
;127:}
LABELV $90
endproc CG_BloodTrail 40 48
export CG_FragmentBounceMark
proc CG_FragmentBounceMark 16 44
line 134
;128:
;129:/*
;130:================
;131:CG_FragmentBounceMark
;132:================
;133:*/
;134:void CG_FragmentBounceMark(localEntity_t* le, trace_t* trace) {
line 137
;135:	int radius;
;136:
;137:	if (le->leMarkType == LEMT_BLOOD) {
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
NEI4 $101
line 139
;138:
;139:		radius = 16 + (rand() & 31);
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 16
ADDI4
ASGNI4
line 140
;140:		CG_ImpactMark(cgs.media.bloodMarkShader, trace->endpos, trace->plane.normal, random() * 360, 1, 1, 1, 1, qtrue, radius, qfalse);
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cgs+148692+372
INDIRI4
ARGI4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 8
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 141
;141:	} else if (le->leMarkType == LEMT_BURN) {
ADDRGP4 $102
JUMPV
LABELV $101
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
NEI4 $105
line 143
;142:
;143:		radius = 8 + (rand() & 15);
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 15
BANDI4
CNSTI4 8
ADDI4
ASGNI4
line 144
;144:		CG_ImpactMark(cgs.media.burnMarkShader, trace->endpos, trace->plane.normal, random() * 360, 1, 1, 1, 1, qtrue, radius, qfalse);
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cgs+148692+380
INDIRI4
ARGI4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 8
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1010041192
MULF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 145
;145:	}
LABELV $105
LABELV $102
line 149
;146:
;147:	// don't allow a fragment to make multiple marks, or they
;148:	// pile up while settling
;149:	le->leMarkType = LEMT_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 150
;150:}
LABELV $100
endproc CG_FragmentBounceMark 16 44
export CG_FragmentBounceSound
proc CG_FragmentBounceSound 16 16
line 157
;151:
;152:/*
;153:================
;154:CG_FragmentBounceSound
;155:================
;156:*/
;157:void CG_FragmentBounceSound(localEntity_t* le, trace_t* trace) {
line 158
;158:	if (le->leBounceSoundType == LEBS_BLOOD) {
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
NEI4 $110
line 160
;159:		// half the gibs will make splat sounds
;160:		if (rand() & 1) {
ADDRLP4 0
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $111
line 161
;161:			int         r = rand() & 3;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 164
;162:			sfxHandle_t s;
;163:
;164:			if (r == 0) {
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $114
line 165
;165:				s = cgs.media.gibBounce1Sound;
ADDRLP4 8
ADDRGP4 cgs+148692+688
INDIRI4
ASGNI4
line 166
;166:			} else if (r == 1) {
ADDRGP4 $115
JUMPV
LABELV $114
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $118
line 167
;167:				s = cgs.media.gibBounce2Sound;
ADDRLP4 8
ADDRGP4 cgs+148692+692
INDIRI4
ASGNI4
line 168
;168:			} else {
ADDRGP4 $119
JUMPV
LABELV $118
line 169
;169:				s = cgs.media.gibBounce3Sound;
ADDRLP4 8
ADDRGP4 cgs+148692+696
INDIRI4
ASGNI4
line 170
;170:			}
LABELV $119
LABELV $115
line 171
;171:			trap_S_StartSound(trace->endpos, ENTITYNUM_WORLD, CHAN_AUTO, s);
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 172
;172:		}
line 173
;173:	} else if (le->leBounceSoundType == LEBS_BRASS) {
ADDRGP4 $111
JUMPV
LABELV $110
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $124
line 174
;174:	}
LABELV $124
LABELV $111
line 178
;175:
;176:	// don't allow a fragment to make multiple bounce sounds,
;177:	// or it gets too noisy as they settle
;178:	le->leBounceSoundType = LEBS_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 179
;179:}
LABELV $109
endproc CG_FragmentBounceSound 16 16
export CG_ReflectVelocity
proc CG_ReflectVelocity 44 12
line 186
;180:
;181:/*
;182:================
;183:CG_ReflectVelocity
;184:================
;185:*/
;186:void CG_ReflectVelocity(localEntity_t* le, trace_t* trace) {
line 192
;187:	vec3_t velocity;
;188:	float  dot;
;189:	int    hitTime;
;190:
;191:	// reflect the velocity on the trace plane
;192:	hitTime = cg.time - cg.frametime + cg.frametime * trace->fraction;
ADDRLP4 16
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+107600
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cg+107600
INDIRI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 193
;193:	BG_EvaluateTrajectoryDelta(&le->pos, hitTime, velocity);
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 194
;194:	dot = DotProduct(velocity, trace->plane.normal);
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 195
;195:	VectorMA(velocity, -2 * dot, trace->plane.normal, le->pos.trDelta);
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 197
;196:
;197:	VectorScale(le->pos.trDelta, le->bounceFactor, le->pos.trDelta);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
line 199
;198:
;199:	VectorCopy(trace->endpos, le->pos.trBase);
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 200
;200:	le->pos.trTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 203
;201:
;202:	// check for stop, making sure that even on low FPS systems it doesn't bobble
;203:	if (trace->allsolid || (trace->plane.normal[2] > 0 && (le->pos.trDelta[2] < 40 || le->pos.trDelta[2] < -cg.frametime * le->pos.trDelta[2]))) {
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $139
ADDRLP4 36
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 0
LEF4 $135
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
CNSTF4 1109393408
LTF4 $139
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
ADDRGP4 cg+107600
INDIRI4
NEGI4
CVIF4 4
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
MULF4
GEF4 $135
LABELV $139
line 204
;204:		le->pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 0
ASGNI4
line 205
;205:	} else {
LABELV $135
line 206
;206:	}
LABELV $136
line 207
;207:}
LABELV $126
endproc CG_ReflectVelocity 44 12
proc CG_AddFragment 88 28
line 214
;208:
;209:/*
;210:================
;211:CG_AddFragment
;212:================
;213:*/
;214:static void CG_AddFragment(localEntity_t* le) {
line 218
;215:	vec3_t  newOrigin;
;216:	trace_t trace;
;217:
;218:	if (le->pos.trType == TR_STATIONARY) {
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 0
NEI4 $141
line 223
;219:		// sink into the ground if near the removal time
;220:		int   t;
;221:		float oldZ;
;222:
;223:		t = le->endTime - cg.time;
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 224
;224:		if (t < SINK_TIME) {
ADDRLP4 68
INDIRI4
CNSTI4 1000
GEI4 $144
line 228
;225:			// we must use an explicit lighting origin, otherwise the
;226:			// lighting would be lost as soon as the origin went
;227:			// into the ground
;228:			VectorCopy(le->refEntity.origin, le->refEntity.lightingOrigin);
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 164
ADDP4
ADDRLP4 76
INDIRP4
CNSTI4 220
ADDP4
INDIRB
ASGNB 12
line 229
;229:			le->refEntity.renderfx |= RF_LIGHTING_ORIGIN;
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 230
;230:			oldZ = le->refEntity.origin[2];
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
INDIRF4
ASGNF4
line 231
;231:			le->refEntity.origin[2] -= 16 * (1.0 - (float)t / SINK_TIME);
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 68
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
SUBF4
CNSTF4 1098907648
MULF4
SUBF4
ASGNF4
line 232
;232:			trap_R_AddRefEntityToScene(&le->refEntity);
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 233
;233:			le->refEntity.origin[2] = oldZ;
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
line 234
;234:		} else {
ADDRGP4 $140
JUMPV
LABELV $144
line 235
;235:			trap_R_AddRefEntityToScene(&le->refEntity);
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 236
;236:		}
line 238
;237:
;238:		return;
ADDRGP4 $140
JUMPV
LABELV $141
line 242
;239:	}
;240:
;241:	// calculate new position
;242:	BG_EvaluateTrajectory(&le->pos, cg.time, newOrigin);
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 56
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 245
;243:
;244:	// trace a line from previous position to new position
;245:	CG_Trace(&trace, le->refEntity.origin, NULL, NULL, newOrigin, -1, CONTENTS_SOLID);
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 56
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 246
;246:	if (trace.fraction == 1.0) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $147
line 248
;247:		// still in free fall
;248:		VectorCopy(newOrigin, le->refEntity.origin);
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
ADDRLP4 56
INDIRB
ASGNB 12
line 250
;249:
;250:		if (le->leFlags & LEF_TUMBLE) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $150
line 253
;251:			vec3_t angles;
;252:
;253:			BG_EvaluateTrajectory(&le->angles, cg.time, angles);
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 68
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 254
;254:			AnglesToAxis(angles, le->refEntity.axis);
ADDRLP4 68
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 255
;255:		}
LABELV $150
line 257
;256:
;257:		trap_R_AddRefEntityToScene(&le->refEntity);
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 260
;258:
;259:		// add a blood trail
;260:		if (le->leBounceSoundType == LEBS_BLOOD) {
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
NEI4 $140
line 261
;261:			CG_BloodTrail(le);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_BloodTrail
CALLV
pop
line 262
;262:		}
line 264
;263:
;264:		return;
ADDRGP4 $140
JUMPV
LABELV $147
line 270
;265:	}
;266:
;267:	// if it is in a nodrop zone, remove it
;268:	// this keeps gibs from waiting at the bottom of pits of death
;269:	// and floating levels
;270:	if (CG_PointContents(trace.endpos, 0) & CONTENTS_NODROP) {
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CVIU4 4
CNSTU4 2147483648
BANDU4
CNSTU4 0
EQU4 $155
line 271
;271:		CG_FreeLocalEntity(le);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 272
;272:		return;
ADDRGP4 $140
JUMPV
LABELV $155
line 276
;273:	}
;274:
;275:	// leave a mark
;276:	CG_FragmentBounceMark(le, &trace);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FragmentBounceMark
CALLV
pop
line 279
;277:
;278:	// do a bouncy sound
;279:	CG_FragmentBounceSound(le, &trace);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FragmentBounceSound
CALLV
pop
line 282
;280:
;281:	// reflect the velocity on the trace plane
;282:	CG_ReflectVelocity(le, &trace);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_ReflectVelocity
CALLV
pop
line 284
;283:
;284:	trap_R_AddRefEntityToScene(&le->refEntity);
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 285
;285:}
LABELV $140
endproc CG_AddFragment 88 28
proc CG_AddFadeRGB 60 24
line 301
;286:
;287:/*
;288:=====================================================================
;289:
;290:TRIVIAL LOCAL ENTITIES
;291:
;292:These only do simple scaling or modulation before passing to the renderer
;293:=====================================================================
;294:*/
;295:
;296:/*
;297:====================
;298:CG_AddFadeRGB
;299:====================
;300:*/
;301:static void CG_AddFadeRGB(localEntity_t* le) {
line 305
;302:	refEntity_t* re;
;303:	float        c;
;304:
;305:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 307
;306:
;307:	c = (le->endTime - cg.time) * le->lifeRate;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 309
;308:
;309:	if (re->reType == RT_RAIL_CORE && cg_railTrailRadius.integer && linearLight) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 4
NEI4 $160
ADDRGP4 cg_railTrailRadius+12
INDIRI4
CNSTI4 0
EQI4 $160
ADDRGP4 linearLight
INDIRI4
CNSTI4 0
EQI4 $160
line 310
;310:		trap_R_AddLinearLightToScene(re->origin, re->oldorigin, cg_railTrailRadius.value, le->color[0] * c, le->color[1] * c, le->color[2] * c);
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ARGP4
ADDRGP4 cg_railTrailRadius+8
INDIRF4
ARGF4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ARGF4
ADDRGP4 trap_R_AddLinearLightToScene
INDIRP4
CALLV
pop
line 311
;311:	}
LABELV $160
line 313
;312:
;313:	c *= 0xff;
ADDRLP4 4
ADDRLP4 4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
line 315
;314:
;315:	re->shaderRGBA[0] = le->color[0] * c;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 20
CNSTF4 1325400064
ASGNF4
ADDRLP4 16
INDIRF4
ADDRLP4 20
INDIRF4
LTF4 $165
ADDRLP4 12
ADDRLP4 16
INDIRF4
ADDRLP4 20
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $166
JUMPV
LABELV $165
ADDRLP4 12
ADDRLP4 16
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $166
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 12
INDIRU4
CVUU1 4
ASGNU1
line 316
;316:	re->shaderRGBA[1] = le->color[1] * c;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
CNSTF4 1325400064
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
LTF4 $168
ADDRLP4 24
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $169
JUMPV
LABELV $168
ADDRLP4 24
ADDRLP4 28
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $169
ADDRLP4 0
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 24
INDIRU4
CVUU1 4
ASGNU1
line 317
;317:	re->shaderRGBA[2] = le->color[2] * c;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44
CNSTF4 1325400064
ASGNF4
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
LTF4 $171
ADDRLP4 36
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $172
JUMPV
LABELV $171
ADDRLP4 36
ADDRLP4 40
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $172
ADDRLP4 0
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 36
INDIRU4
CVUU1 4
ASGNU1
line 318
;318:	re->shaderRGBA[3] = le->color[3] * c;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 56
CNSTF4 1325400064
ASGNF4
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
LTF4 $174
ADDRLP4 48
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $175
JUMPV
LABELV $174
ADDRLP4 48
ADDRLP4 52
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $175
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 48
INDIRU4
CVUU1 4
ASGNU1
line 320
;319:
;320:	if (intShaderTime)
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $176
line 321
;321:		trap_R_AddRefEntityToScene2(re);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene2
INDIRP4
CALLV
pop
ADDRGP4 $177
JUMPV
LABELV $176
line 323
;322:	else
;323:		trap_R_AddRefEntityToScene(re);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $177
line 324
;324:}
LABELV $158
endproc CG_AddFadeRGB 60 24
proc CG_AddMoveScaleFade 48 12
line 331
;325:
;326:/*
;327:==================
;328:CG_AddMoveScaleFade
;329:==================
;330:*/
;331:static void CG_AddMoveScaleFade(localEntity_t* le) {
line 337
;332:	refEntity_t* re;
;333:	float        c;
;334:	vec3_t       delta;
;335:	float        len;
;336:
;337:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 339
;338:
;339:	if (le->fadeInTime > le->startTime && cg.time < le->fadeInTime) {
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
LEI4 $179
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
GEI4 $179
line 341
;340:		// fade / grow time
;341:		c = 1.0 - (float)(le->fadeInTime - cg.time) / (le->fadeInTime - le->startTime);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
CNSTF4 1065353216
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ADDRLP4 28
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 342
;342:	} else {
ADDRGP4 $180
JUMPV
LABELV $179
line 344
;343:		// fade / grow time
;344:		c = (le->endTime - cg.time) * le->lifeRate;
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 28
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 28
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 345
;345:	}
LABELV $180
line 347
;346:
;347:	re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 32
ADDRLP4 16
INDIRF4
CNSTF4 1132396544
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $185
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $186
JUMPV
LABELV $185
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $186
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 349
;348:
;349:	if (!(le->leFlags & LEF_PUFF_DONT_SCALE)) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $187
line 350
;350:		re->radius = le->radius * (1.0 - c) + 8;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 16
INDIRF4
SUBF4
MULF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 351
;351:	}
LABELV $187
line 353
;352:
;353:	BG_EvaluateTrajectory(&le->pos, cg.time, re->origin);
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 357
;354:
;355:	// if the view would be "inside" the sprite, kill the sprite
;356:	// so it doesn't add too much overdraw
;357:	VectorSubtract(re->origin, cg.refdef.vieworg, delta);
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRGP4 cg+109056+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+8
INDIRF4
SUBF4
ASGNF4
line 358
;358:	len = VectorLength(delta);
ADDRLP4 4
ARGP4
ADDRLP4 44
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 44
INDIRF4
ASGNF4
line 359
;359:	if (len < le->radius) {
ADDRLP4 20
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
GEF4 $200
line 360
;360:		CG_FreeLocalEntity(le);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 361
;361:		return;
ADDRGP4 $178
JUMPV
LABELV $200
line 364
;362:	}
;363:
;364:	if (intShaderTime)
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $202
line 365
;365:		trap_R_AddRefEntityToScene2(re);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene2
INDIRP4
CALLV
pop
ADDRGP4 $203
JUMPV
LABELV $202
line 367
;366:	else
;367:		trap_R_AddRefEntityToScene(re);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $203
line 368
;368:}
LABELV $178
endproc CG_AddMoveScaleFade 48 12
proc CG_EmitPolyVerts 176 12
line 375
;369:
;370:/*
;371:===================
;372:CG_EmitPolyVerts
;373:===================
;374:*/
;375:static void CG_EmitPolyVerts(const refEntity_t* re) {
line 382
;376:	polyVert_t verts[4];
;377:	float      sinR, cosR;
;378:	float      angle;
;379:	vec3_t     left, up;
;380:	int        i;
;381:
;382:	if (re->rotation) {
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
CNSTF4 0
EQF4 $205
line 383
;383:		angle = M_PI * re->rotation / 180.0;
ADDRLP4 132
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
CNSTF4 1016003125
MULF4
ASGNF4
line 384
;384:		sinR  = sin(angle);
ADDRLP4 132
INDIRF4
ARGF4
ADDRLP4 136
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 124
ADDRLP4 136
INDIRF4
ASGNF4
line 385
;385:		cosR  = cos(angle);
ADDRLP4 132
INDIRF4
ARGF4
ADDRLP4 140
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 128
ADDRLP4 140
INDIRF4
ASGNF4
line 387
;386:
;387:		VectorScale(cg.refdef.viewaxis[1], cosR * re->radius, left);
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRLP4 128
INDIRF4
ADDRLP4 148
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 100+4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRLP4 128
INDIRF4
ADDRLP4 148
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 100+8
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRLP4 128
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
line 388
;388:		VectorMA(left, -sinR * re->radius, cg.refdef.viewaxis[2], left);
ADDRLP4 152
ADDRLP4 124
INDIRF4
NEGF4
ASGNF4
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
ADDRLP4 100
INDIRF4
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 100+4
ADDRLP4 100+4
INDIRF4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 100+8
ADDRLP4 100+8
INDIRF4
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRLP4 124
INDIRF4
NEGF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 390
;389:
;390:		VectorScale(cg.refdef.viewaxis[2], cosR * re->radius, up);
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRLP4 128
INDIRF4
ADDRLP4 164
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 112+4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRLP4 128
INDIRF4
ADDRLP4 164
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 112+8
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRLP4 128
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ASGNF4
line 391
;391:		VectorMA(up, sinR * re->radius, cg.refdef.viewaxis[1], up);
ADDRLP4 172
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
ADDRLP4 112
INDIRF4
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 172
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 112+4
ADDRLP4 112+4
INDIRF4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 172
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 112+8
ADDRLP4 112+8
INDIRF4
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRLP4 124
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 392
;392:	} else {
ADDRGP4 $206
JUMPV
LABELV $205
line 393
;393:		VectorScale(cg.refdef.viewaxis[1], re->radius, left);
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
ADDRGP4 cg+109056+36+12
INDIRF4
ADDRLP4 136
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 100+4
ADDRGP4 cg+109056+36+12+4
INDIRF4
ADDRLP4 136
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 100+8
ADDRGP4 cg+109056+36+12+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
line 394
;394:		VectorScale(cg.refdef.viewaxis[2], re->radius, up);
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
ADDRGP4 cg+109056+36+24
INDIRF4
ADDRLP4 140
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 112+4
ADDRGP4 cg+109056+36+24+4
INDIRF4
ADDRLP4 140
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 112+8
ADDRGP4 cg+109056+36+24+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
MULF4
ASGNF4
line 395
;395:	}
LABELV $206
line 397
;396:
;397:	verts[0].xyz[0] = re->origin[0] + left[0] + up[0];
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRLP4 100
INDIRF4
ADDF4
ADDRLP4 112
INDIRF4
ADDF4
ASGNF4
line 398
;398:	verts[0].xyz[1] = re->origin[1] + left[1] + up[1];
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 100+4
INDIRF4
ADDF4
ADDRLP4 112+4
INDIRF4
ADDF4
ASGNF4
line 399
;399:	verts[0].xyz[2] = re->origin[2] + left[2] + up[2];
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 100+8
INDIRF4
ADDF4
ADDRLP4 112+8
INDIRF4
ADDF4
ASGNF4
line 400
;400:	verts[0].st[0]  = 0.0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 401
;401:	verts[0].st[1]  = 0.0;
ADDRLP4 0+12+4
CNSTF4 0
ASGNF4
line 403
;402:
;403:	verts[1].xyz[0] = re->origin[0] - left[0] + up[0];
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRLP4 100
INDIRF4
SUBF4
ADDRLP4 112
INDIRF4
ADDF4
ASGNF4
line 404
;404:	verts[1].xyz[1] = re->origin[1] - left[1] + up[1];
ADDRLP4 0+24+4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 100+4
INDIRF4
SUBF4
ADDRLP4 112+4
INDIRF4
ADDF4
ASGNF4
line 405
;405:	verts[1].xyz[2] = re->origin[2] - left[2] + up[2];
ADDRLP4 0+24+8
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 100+8
INDIRF4
SUBF4
ADDRLP4 112+8
INDIRF4
ADDF4
ASGNF4
line 406
;406:	verts[1].st[0]  = 1.0;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 407
;407:	verts[1].st[1]  = 0.0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 409
;408:
;409:	verts[2].xyz[0] = re->origin[0] - left[0] - up[0];
ADDRLP4 0+48
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRLP4 100
INDIRF4
SUBF4
ADDRLP4 112
INDIRF4
SUBF4
ASGNF4
line 410
;410:	verts[2].xyz[1] = re->origin[1] - left[1] - up[1];
ADDRLP4 0+48+4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 100+4
INDIRF4
SUBF4
ADDRLP4 112+4
INDIRF4
SUBF4
ASGNF4
line 411
;411:	verts[2].xyz[2] = re->origin[2] - left[2] - up[2];
ADDRLP4 0+48+8
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 100+8
INDIRF4
SUBF4
ADDRLP4 112+8
INDIRF4
SUBF4
ASGNF4
line 412
;412:	verts[2].st[0]  = 1.0;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 413
;413:	verts[2].st[1]  = 1.0;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 415
;414:
;415:	verts[3].xyz[0] = re->origin[0] + left[0] - up[0];
ADDRLP4 0+72
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRLP4 100
INDIRF4
ADDF4
ADDRLP4 112
INDIRF4
SUBF4
ASGNF4
line 416
;416:	verts[3].xyz[1] = re->origin[1] + left[1] - up[1];
ADDRLP4 0+72+4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 100+4
INDIRF4
ADDF4
ADDRLP4 112+4
INDIRF4
SUBF4
ASGNF4
line 417
;417:	verts[3].xyz[2] = re->origin[2] + left[2] - up[2];
ADDRLP4 0+72+8
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 100+8
INDIRF4
ADDF4
ADDRLP4 112+8
INDIRF4
SUBF4
ASGNF4
line 418
;418:	verts[3].st[0]  = 0.0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 419
;419:	verts[3].st[1]  = 1.0;
ADDRLP4 0+72+12+4
CNSTF4 1065353216
ASGNF4
line 421
;420:
;421:	for (i = 0; i < 4; i++) {
ADDRLP4 96
CNSTI4 0
ASGNI4
LABELV $340
line 422
;422:		verts[i].modulate[0] = re->shaderRGBA[0];
ADDRLP4 96
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0+20
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRU1
ASGNU1
line 423
;423:		verts[i].modulate[1] = re->shaderRGBA[1];
ADDRLP4 96
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0+20+1
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 117
ADDP4
INDIRU1
ASGNU1
line 424
;424:		verts[i].modulate[2] = re->shaderRGBA[2];
ADDRLP4 96
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0+20+2
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 118
ADDP4
INDIRU1
ASGNU1
line 425
;425:		verts[i].modulate[3] = re->shaderRGBA[3];
ADDRLP4 96
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0+20+3
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 119
ADDP4
INDIRU1
ASGNU1
line 426
;426:	}
LABELV $341
line 421
ADDRLP4 96
ADDRLP4 96
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 4
LTI4 $340
line 428
;427:
;428:	trap_R_AddPolyToScene(re->customShader, 4, verts);
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 429
;429:}
LABELV $204
endproc CG_EmitPolyVerts 176 12
proc CG_AddScaleFade 52 4
line 440
;430:
;431:/*
;432:===================
;433:CG_AddScaleFade
;434:
;435:For rocket smokes that hang in place, fade out, and are
;436:removed if the view passes through them.
;437:There are often many of these, so it needs to be simple.
;438:===================
;439:*/
;440:static void CG_AddScaleFade(localEntity_t* le) {
line 446
;441:	refEntity_t* re;
;442:	float        c;
;443:	vec3_t       delta;
;444:	float        len;
;445:
;446:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 449
;447:
;448:	// fade / grow time
;449:	c = (le->endTime - cg.time) * le->lifeRate;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 451
;450:
;451:	re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 32
ADDRLP4 16
INDIRF4
CNSTF4 1132396544
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $354
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $355
JUMPV
LABELV $354
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $355
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 452
;452:	re->radius        = le->radius * (1.0 - c) + 8;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 16
INDIRF4
SUBF4
MULF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 456
;453:
;454:	// if the view would be "inside" the sprite, kill the sprite
;455:	// so it doesn't add too much overdraw
;456:	VectorSubtract(re->origin, cg.refdef.vieworg, delta);
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRGP4 cg+109056+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+8
INDIRF4
SUBF4
ASGNF4
line 457
;457:	len = VectorLengthSquared(delta);
ADDRLP4 4
ARGP4
ADDRLP4 44
ADDRGP4 VectorLengthSquared
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 44
INDIRF4
ASGNF4
line 458
;458:	if (len < le->radius * le->radius) {
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
GEF4 $366
line 459
;459:		CG_FreeLocalEntity(le);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 460
;460:		return;
ADDRGP4 $351
JUMPV
LABELV $366
line 463
;461:	}
;462:#if 1
;463:	CG_EmitPolyVerts(re);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_EmitPolyVerts
CALLV
pop
line 467
;464:#else
;465:	trap_R_AddRefEntityToScene(re);
;466:#endif
;467:}
LABELV $351
endproc CG_AddScaleFade 52 4
proc CG_AddFallScaleFade 56 4
line 479
;468:
;469:/*
;470:=================
;471:CG_AddFallScaleFade
;472:
;473:This is just an optimized CG_AddMoveScaleFade
;474:For blood mists that drift down, fade out, and are
;475:removed if the view passes through them.
;476:There are often 100+ of these, so it needs to be simple.
;477:=================
;478:*/
;479:static void CG_AddFallScaleFade(localEntity_t* le) {
line 485
;480:	refEntity_t* re;
;481:	float        c;
;482:	vec3_t       delta;
;483:	float        len;
;484:
;485:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 488
;486:
;487:	// fade time
;488:	c = (le->endTime - cg.time) * le->lifeRate;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 490
;489:
;490:	re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 32
ADDRLP4 4
INDIRF4
CNSTF4 1132396544
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $371
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $372
JUMPV
LABELV $371
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $372
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 492
;491:
;492:	re->origin[2] = le->pos.trBase[2] - (1.0 - c) * le->pos.trDelta[2];
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
SUBF4
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 494
;493:
;494:	re->radius = le->radius * (1.0 - c) + 16;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
SUBF4
MULF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 498
;495:
;496:	// if the view would be "inside" the sprite, kill the sprite
;497:	// so it doesn't add too much overdraw
;498:	VectorSubtract(re->origin, cg.refdef.vieworg, delta);
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRGP4 cg+109056+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRGP4 cg+109056+24+8
INDIRF4
SUBF4
ASGNF4
line 499
;499:	len = VectorLengthSquared(delta);
ADDRLP4 8
ARGP4
ADDRLP4 48
ADDRGP4 VectorLengthSquared
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 48
INDIRF4
ASGNF4
line 500
;500:	if (len < le->radius * le->radius) {
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
GEF4 $383
line 501
;501:		CG_FreeLocalEntity(le);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 502
;502:		return;
ADDRGP4 $368
JUMPV
LABELV $383
line 505
;503:	}
;504:#if 1
;505:	CG_EmitPolyVerts(re);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_EmitPolyVerts
CALLV
pop
line 509
;506:#else
;507:	trap_R_AddRefEntityToScene(re);
;508:#endif
;509:}
LABELV $368
endproc CG_AddFallScaleFade 56 4
proc CG_AddExplosion 16 20
line 516
;510:
;511:/*
;512:================
;513:CG_AddExplosion
;514:================
;515:*/
;516:static void CG_AddExplosion(localEntity_t* ex) {
line 519
;517:	refEntity_t* ent;
;518:
;519:	ent = &ex->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 522
;520:
;521:	// add the entity
;522:	if (intShaderTime)
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $386
line 523
;523:		trap_R_AddRefEntityToScene2(ent);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene2
INDIRP4
CALLV
pop
ADDRGP4 $387
JUMPV
LABELV $386
line 525
;524:	else
;525:		trap_R_AddRefEntityToScene(ent);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $387
line 528
;526:
;527:	// add the dlight
;528:	if (ex->light) {
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 0
EQF4 $388
line 531
;529:		float light;
;530:
;531:		light = (float)(cg.time - ex->startTime) / (ex->endTime - ex->startTime);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 8
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 532
;532:		if (light < 0.5) {
ADDRLP4 4
INDIRF4
CNSTF4 1056964608
GEF4 $391
line 533
;533:			light = 1.0;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 534
;534:		} else {
ADDRGP4 $392
JUMPV
LABELV $391
line 535
;535:			light = 1.0 - (light - 0.5) * 2;
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
SUBF4
ASGNF4
line 536
;536:		}
LABELV $392
line 537
;537:		light = ex->light * light;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 538
;538:		trap_R_AddLightToScene(ent->origin, light, ex->lightColor[0], ex->lightColor[1], ex->lightColor[2]);
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 539
;539:	}
LABELV $388
line 540
;540:}
LABELV $385
endproc CG_AddExplosion 16 20
proc CG_AddSpriteExplosion 172 20
line 547
;541:
;542:/*
;543:================
;544:CG_AddSpriteExplosion
;545:================
;546:*/
;547:static void CG_AddSpriteExplosion(localEntity_t* le) {
line 551
;548:	refEntity_t re;
;549:	float       c;
;550:
;551:	re = le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
INDIRB
ASGNB 140
line 553
;552:
;553:	c = (le->endTime - cg.time) / (float)(le->endTime - le->startTime);
ADDRLP4 144
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
ADDRLP4 144
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 144
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 144
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 554
;554:	if (c > 1) {
ADDRLP4 140
INDIRF4
CNSTF4 1065353216
LEF4 $395
line 555
;555:		c = 1.0;  // can happen during connection problems
ADDRLP4 140
CNSTF4 1065353216
ASGNF4
line 556
;556:	}
LABELV $395
line 558
;557:
;558:	re.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 559
;559:	re.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 560
;560:	re.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 561
;561:	re.shaderRGBA[3] = 0xff * c * 0.33;
ADDRLP4 152
ADDRLP4 140
INDIRF4
CNSTF4 1118325965
MULF4
ASGNF4
ADDRLP4 156
CNSTF4 1325400064
ASGNF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
LTF4 $405
ADDRLP4 148
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $406
JUMPV
LABELV $405
ADDRLP4 148
ADDRLP4 152
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $406
ADDRLP4 0+116+3
ADDRLP4 148
INDIRU4
CVUU1 4
ASGNU1
line 563
;562:
;563:	re.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 564
;564:	re.radius = 42 * (1.0 - c) + 30;
ADDRLP4 0+132
CNSTF4 1065353216
ADDRLP4 140
INDIRF4
SUBF4
CNSTF4 1109917696
MULF4
CNSTF4 1106247680
ADDF4
ASGNF4
line 566
;565:
;566:	if (intShaderTime)
ADDRGP4 intShaderTime
INDIRI4
CNSTI4 0
EQI4 $408
line 567
;567:		trap_R_AddRefEntityToScene2(&re);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene2
INDIRP4
CALLV
pop
ADDRGP4 $409
JUMPV
LABELV $408
line 569
;568:	else
;569:		trap_R_AddRefEntityToScene(&re);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $409
line 572
;570:
;571:	// add the dlight
;572:	if (le->light) {
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 0
EQF4 $410
line 575
;573:		float light;
;574:
;575:		light = (float)(cg.time - le->startTime) / (le->endTime - le->startTime);
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 160
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 164
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 164
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 164
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 576
;576:		if (light < 0.5) {
ADDRLP4 160
INDIRF4
CNSTF4 1056964608
GEF4 $413
line 577
;577:			light = 1.0;
ADDRLP4 160
CNSTF4 1065353216
ASGNF4
line 578
;578:		} else {
ADDRGP4 $414
JUMPV
LABELV $413
line 579
;579:			light = 1.0 - (light - 0.5) * 2;
ADDRLP4 160
CNSTF4 1065353216
ADDRLP4 160
INDIRF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
SUBF4
ASGNF4
line 580
;580:		}
LABELV $414
line 581
;581:		light = le->light * light;
ADDRLP4 160
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ASGNF4
line 582
;582:		trap_R_AddLightToScene(re.origin, light, le->lightColor[0], le->lightColor[1], le->lightColor[2]);
ADDRLP4 0+68
ARGP4
ADDRLP4 160
INDIRF4
ARGF4
ADDRLP4 168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 168
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ARGF4
ADDRLP4 168
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
ADDRLP4 168
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 583
;583:	}
LABELV $410
line 584
;584:}
LABELV $393
endproc CG_AddSpriteExplosion 172 20
proc CG_AddRefEntity 0 4
line 746
;585:
;586:#ifdef MISSIONPACK
;587:/*
;588:====================
;589:CG_AddKamikaze
;590:====================
;591:*/
;592:void CG_AddKamikaze(localEntity_t* le) {
;593:	refEntity_t* re;
;594:	refEntity_t  shockwave;
;595:	float        c;
;596:	vec3_t       test, axis[3];
;597:	int          t;
;598:
;599:	re = &le->refEntity;
;600:
;601:	t = cg.time - le->startTime;
;602:	VectorClear(test);
;603:	AnglesToAxis(test, axis);
;604:
;605:	if (t > KAMI_SHOCKWAVE_STARTTIME && t < KAMI_SHOCKWAVE_ENDTIME) {
;606:
;607:		if (!(le->leFlags & LEF_SOUND1)) {
;608:			//			trap_S_StartSound (re->origin, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.kamikazeExplodeSound );
;609:			trap_S_StartLocalSound(cgs.media.kamikazeExplodeSound, CHAN_AUTO);
;610:			le->leFlags |= LEF_SOUND1;
;611:		}
;612:		// 1st kamikaze shockwave
;613:		memset(&shockwave, 0, sizeof(shockwave));
;614:		shockwave.hModel     = cgs.media.kamikazeShockWave;
;615:		shockwave.reType     = RT_MODEL;
;616:		shockwave.shaderTime = re->shaderTime;
;617:		VectorCopy(re->origin, shockwave.origin);
;618:
;619:		c = (float)(t - KAMI_SHOCKWAVE_STARTTIME) / (float)(KAMI_SHOCKWAVE_ENDTIME - KAMI_SHOCKWAVE_STARTTIME);
;620:		VectorScale(axis[0], c * KAMI_SHOCKWAVE_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[0]);
;621:		VectorScale(axis[1], c * KAMI_SHOCKWAVE_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[1]);
;622:		VectorScale(axis[2], c * KAMI_SHOCKWAVE_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[2]);
;623:		shockwave.nonNormalizedAxes = qtrue;
;624:
;625:		if (t > KAMI_SHOCKWAVEFADE_STARTTIME) {
;626:			c = (float)(t - KAMI_SHOCKWAVEFADE_STARTTIME) / (float)(KAMI_SHOCKWAVE_ENDTIME - KAMI_SHOCKWAVEFADE_STARTTIME);
;627:		} else {
;628:			c = 0;
;629:		}
;630:		c *= 0xff;
;631:		shockwave.shaderRGBA[0] = 0xff - c;
;632:		shockwave.shaderRGBA[1] = 0xff - c;
;633:		shockwave.shaderRGBA[2] = 0xff - c;
;634:		shockwave.shaderRGBA[3] = 0xff - c;
;635:
;636:		trap_R_AddRefEntityToScene(&shockwave);
;637:	}
;638:
;639:	if (t > KAMI_EXPLODE_STARTTIME && t < KAMI_IMPLODE_ENDTIME) {
;640:		// explosion and implosion
;641:		c = (le->endTime - cg.time) * le->lifeRate;
;642:		c *= 0xff;
;643:		re->shaderRGBA[0] = le->color[0] * c;
;644:		re->shaderRGBA[1] = le->color[1] * c;
;645:		re->shaderRGBA[2] = le->color[2] * c;
;646:		re->shaderRGBA[3] = le->color[3] * c;
;647:
;648:		if (t < KAMI_IMPLODE_STARTTIME) {
;649:			c = (float)(t - KAMI_EXPLODE_STARTTIME) / (float)(KAMI_IMPLODE_STARTTIME - KAMI_EXPLODE_STARTTIME);
;650:		} else {
;651:			if (!(le->leFlags & LEF_SOUND2)) {
;652:				//				trap_S_StartSound (re->origin, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.kamikazeImplodeSound );
;653:				trap_S_StartLocalSound(cgs.media.kamikazeImplodeSound, CHAN_AUTO);
;654:				le->leFlags |= LEF_SOUND2;
;655:			}
;656:			c = (float)(KAMI_IMPLODE_ENDTIME - t) / (float)(KAMI_IMPLODE_ENDTIME - KAMI_IMPLODE_STARTTIME);
;657:		}
;658:		VectorScale(axis[0], c * KAMI_BOOMSPHERE_MAXRADIUS / KAMI_BOOMSPHEREMODEL_RADIUS, re->axis[0]);
;659:		VectorScale(axis[1], c * KAMI_BOOMSPHERE_MAXRADIUS / KAMI_BOOMSPHEREMODEL_RADIUS, re->axis[1]);
;660:		VectorScale(axis[2], c * KAMI_BOOMSPHERE_MAXRADIUS / KAMI_BOOMSPHEREMODEL_RADIUS, re->axis[2]);
;661:		re->nonNormalizedAxes = qtrue;
;662:
;663:		trap_R_AddRefEntityToScene(re);
;664:		// add the dlight
;665:		trap_R_AddLightToScene(re->origin, c * 1000.0, 1.0, 1.0, c);
;666:	}
;667:
;668:	if (t > KAMI_SHOCKWAVE2_STARTTIME && t < KAMI_SHOCKWAVE2_ENDTIME) {
;669:		// 2nd kamikaze shockwave
;670:		if (le->angles.trBase[0] == 0 && le->angles.trBase[1] == 0 && le->angles.trBase[2] == 0) {
;671:			le->angles.trBase[0] = random() * 360;
;672:			le->angles.trBase[1] = random() * 360;
;673:			le->angles.trBase[2] = random() * 360;
;674:		} else {
;675:			c = 0;
;676:		}
;677:		memset(&shockwave, 0, sizeof(shockwave));
;678:		shockwave.hModel     = cgs.media.kamikazeShockWave;
;679:		shockwave.reType     = RT_MODEL;
;680:		shockwave.shaderTime = re->shaderTime;
;681:		VectorCopy(re->origin, shockwave.origin);
;682:
;683:		test[0] = le->angles.trBase[0];
;684:		test[1] = le->angles.trBase[1];
;685:		test[2] = le->angles.trBase[2];
;686:		AnglesToAxis(test, axis);
;687:
;688:		c = (float)(t - KAMI_SHOCKWAVE2_STARTTIME) / (float)(KAMI_SHOCKWAVE2_ENDTIME - KAMI_SHOCKWAVE2_STARTTIME);
;689:		VectorScale(axis[0], c * KAMI_SHOCKWAVE2_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[0]);
;690:		VectorScale(axis[1], c * KAMI_SHOCKWAVE2_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[1]);
;691:		VectorScale(axis[2], c * KAMI_SHOCKWAVE2_MAXRADIUS / KAMI_SHOCKWAVEMODEL_RADIUS, shockwave.axis[2]);
;692:		shockwave.nonNormalizedAxes = qtrue;
;693:
;694:		if (t > KAMI_SHOCKWAVE2FADE_STARTTIME) {
;695:			c = (float)(t - KAMI_SHOCKWAVE2FADE_STARTTIME) / (float)(KAMI_SHOCKWAVE2_ENDTIME - KAMI_SHOCKWAVE2FADE_STARTTIME);
;696:		} else {
;697:			c = 0;
;698:		}
;699:		c *= 0xff;
;700:		shockwave.shaderRGBA[0] = 0xff - c;
;701:		shockwave.shaderRGBA[1] = 0xff - c;
;702:		shockwave.shaderRGBA[2] = 0xff - c;
;703:		shockwave.shaderRGBA[3] = 0xff - c;
;704:
;705:		trap_R_AddRefEntityToScene(&shockwave);
;706:	}
;707:}
;708:
;709:/*
;710:===================
;711:CG_AddInvulnerabilityImpact
;712:===================
;713:*/
;714:void CG_AddInvulnerabilityImpact(localEntity_t* le) {
;715:	trap_R_AddRefEntityToScene(&le->refEntity);
;716:}
;717:
;718:/*
;719:===================
;720:CG_AddInvulnerabilityJuiced
;721:===================
;722:*/
;723:void CG_AddInvulnerabilityJuiced(localEntity_t* le) {
;724:	int t;
;725:
;726:	t = cg.time - le->startTime;
;727:	if (t > 3000) {
;728:		le->refEntity.axis[0][0] = (float)1.0 + 0.3 * (t - 3000) / 2000;
;729:		le->refEntity.axis[1][1] = (float)1.0 + 0.3 * (t - 3000) / 2000;
;730:		le->refEntity.axis[2][2] = (float)0.7 + 0.3 * (2000 - (t - 3000)) / 2000;
;731:	}
;732:	if (t > 5000) {
;733:		le->endTime = 0;
;734:		CG_GibPlayer(le->refEntity.origin);
;735:	} else {
;736:		trap_R_AddRefEntityToScene(&le->refEntity);
;737:	}
;738:}
;739:#endif
;740:
;741:/*
;742:===================
;743:CG_AddRefEntity
;744:===================
;745:*/
;746:static void CG_AddRefEntity(localEntity_t* le) {
line 747
;747:	if (le->endTime < cg.time) {
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $417
line 748
;748:		CG_FreeLocalEntity(le);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 749
;749:		return;
ADDRGP4 $416
JUMPV
LABELV $417
line 751
;750:	}
;751:	trap_R_AddRefEntityToScene(&le->refEntity);
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 752
;752:}
LABELV $416
endproc CG_AddRefEntity 0 4
data
align 4
LABELV $421
byte 4 0
byte 4 0
byte 4 1065353216
export CG_AddScorePlum
code
proc CG_AddScorePlum 160 12
line 761
;753:
;754:/*
;755:===================
;756:CG_AddScorePlum
;757:===================
;758:*/
;759:#define NUMBER_SIZE 8
;760:
;761:void CG_AddScorePlum(localEntity_t* le) {
line 763
;762:	refEntity_t* re;
;763:	vec3_t       origin, delta, dir, vec, up = {0, 0, 1};
ADDRLP4 112
ADDRGP4 $421
INDIRB
ASGNB 12
line 767
;764:	float        c, len;
;765:	int          i, score, digits[10], numdigits, negative;
;766:
;767:	re = &le->refEntity;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 769
;768:
;769:	c = (le->endTime - cg.time) * le->lifeRate;
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 128
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 128
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 771
;770:
;771:	score = le->radius;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 772
;772:	if (score < 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $423
line 773
;773:		re->shaderRGBA[0] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 774
;774:		re->shaderRGBA[1] = 0x11;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 17
ASGNU1
line 775
;775:		re->shaderRGBA[2] = 0x11;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 17
ASGNU1
line 776
;776:	} else {
ADDRGP4 $424
JUMPV
LABELV $423
line 777
;777:		re->shaderRGBA[0] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 778
;778:		re->shaderRGBA[1] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 779
;779:		re->shaderRGBA[2] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 780
;780:		if (score >= 50) {
ADDRLP4 12
INDIRI4
CNSTI4 50
LTI4 $425
line 781
;781:			re->shaderRGBA[1] = 0;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 0
ASGNU1
line 782
;782:		} else if (score >= 20) {
ADDRGP4 $426
JUMPV
LABELV $425
ADDRLP4 12
INDIRI4
CNSTI4 20
LTI4 $427
line 783
;783:			re->shaderRGBA[0] = re->shaderRGBA[1] = 0;
ADDRLP4 136
CNSTU1 0
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
line 784
;784:		} else if (score >= 10) {
ADDRGP4 $428
JUMPV
LABELV $427
ADDRLP4 12
INDIRI4
CNSTI4 10
LTI4 $429
line 785
;785:			re->shaderRGBA[2] = 0;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 0
ASGNU1
line 786
;786:		} else if (score >= 2) {
ADDRGP4 $430
JUMPV
LABELV $429
ADDRLP4 12
INDIRI4
CNSTI4 2
LTI4 $431
line 787
;787:			re->shaderRGBA[0] = re->shaderRGBA[2] = 0;
ADDRLP4 136
CNSTU1 0
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
line 788
;788:		}
LABELV $431
LABELV $430
LABELV $428
LABELV $426
line 789
;789:	}
LABELV $424
line 790
;790:	if (c < 0.25f)
ADDRLP4 80
INDIRF4
CNSTF4 1048576000
GEF4 $433
line 791
;791:		re->shaderRGBA[3] = 0xff * 4.0f * c;
ADDRLP4 136
ADDRLP4 80
INDIRF4
CNSTF4 1149173760
MULF4
ASGNF4
ADDRLP4 140
CNSTF4 1325400064
ASGNF4
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
LTF4 $436
ADDRLP4 132
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $437
JUMPV
LABELV $436
ADDRLP4 132
ADDRLP4 136
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $437
ADDRLP4 8
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 132
INDIRU4
CVUU1 4
ASGNU1
ADDRGP4 $434
JUMPV
LABELV $433
line 793
;792:	else
;793:		re->shaderRGBA[3] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
LABELV $434
line 795
;794:
;795:	re->radius = NUMBER_SIZE / 2;
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1082130432
ASGNF4
line 797
;796:
;797:	VectorCopy(le->pos.trBase, origin);
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRB
ASGNB 12
line 798
;798:	origin[2] += 110.0f - c * 100.0f;
ADDRLP4 16+8
ADDRLP4 16+8
INDIRF4
CNSTF4 1121714176
ADDRLP4 80
INDIRF4
CNSTF4 1120403456
MULF4
SUBF4
ADDF4
ASGNF4
line 800
;799:
;800:	VectorSubtract(cg.refdef.vieworg, origin, dir);
ADDRLP4 96
ADDRGP4 cg+109056+24
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109056+24+4
INDIRF4
ADDRLP4 16+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109056+24+8
INDIRF4
ADDRLP4 16+8
INDIRF4
SUBF4
ASGNF4
line 801
;801:	CrossProduct(dir, up, vec);
ADDRLP4 96
ARGP4
ADDRLP4 112
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 802
;802:	VectorNormalize(vec);
ADDRLP4 28
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 804
;803:
;804:	VectorMA(origin, -10.0f + 20 * sin(c * 2 * M_PI), vec, origin);
ADDRLP4 80
INDIRF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 144
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
ADDRLP4 144
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
INDIRF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 148
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 16+4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDRLP4 148
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
INDIRF4
CNSTF4 1086918619
MULF4
ARGF4
ADDRLP4 152
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 16+8
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDRLP4 152
INDIRF4
CNSTF4 1101004800
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
line 808
;805:
;806:	// if the view would be "inside" the sprite, kill the sprite
;807:	// so it doesn't add too much overdraw
;808:	VectorSubtract(origin, cg.refdef.vieworg, delta);
ADDRLP4 84
ADDRLP4 16
INDIRF4
ADDRGP4 cg+109056+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 84+4
ADDRLP4 16+4
INDIRF4
ADDRGP4 cg+109056+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 84+8
ADDRLP4 16+8
INDIRF4
ADDRGP4 cg+109056+24+8
INDIRF4
SUBF4
ASGNF4
line 809
;809:	len = VectorLengthSquared(delta);
ADDRLP4 84
ARGP4
ADDRLP4 156
ADDRGP4 VectorLengthSquared
CALLF4
ASGNF4
ADDRLP4 124
ADDRLP4 156
INDIRF4
ASGNF4
line 810
;810:	if (len < 20 * 20) {
ADDRLP4 124
INDIRF4
CNSTF4 1137180672
GEF4 $469
line 811
;811:		CG_FreeLocalEntity(le);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 812
;812:		return;
ADDRGP4 $420
JUMPV
LABELV $469
line 815
;813:	}
;814:
;815:	negative = qfalse;
ADDRLP4 108
CNSTI4 0
ASGNI4
line 816
;816:	if (score < 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $471
line 817
;817:		negative = qtrue;
ADDRLP4 108
CNSTI4 1
ASGNI4
line 818
;818:		score    = -score;
ADDRLP4 12
ADDRLP4 12
INDIRI4
NEGI4
ASGNI4
line 819
;819:	}
LABELV $471
line 821
;820:
;821:	for (numdigits = 0; !(numdigits && !score); numdigits++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $476
JUMPV
LABELV $473
line 822
;822:		digits[numdigits] = score % 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 10
MODI4
ASGNI4
line 823
;823:		score             = score / 10;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 824
;824:	}
LABELV $474
line 821
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $476
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $473
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $473
line 826
;825:
;826:	if (negative) {
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $477
line 827
;827:		digits[numdigits] = 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
CNSTI4 10
ASGNI4
line 828
;828:		numdigits++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 829
;829:	}
LABELV $477
line 831
;830:
;831:	for (i = 0; i < numdigits; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $482
JUMPV
LABELV $479
line 832
;832:		VectorMA(origin, (float)(((float)numdigits / 2) - i) * NUMBER_SIZE, vec, re->origin);
ADDRLP4 8
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1056964608
MULF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1090519040
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 16+4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1056964608
MULF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1090519040
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 16+8
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1056964608
MULF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1090519040
MULF4
MULF4
ADDF4
ASGNF4
line 833
;833:		re->customShader = cgs.media.numberShaders[digits[numdigits - 1 - i]];
ADDRLP4 8
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+148692+300
ADDP4
INDIRI4
ASGNI4
line 834
;834:		trap_R_AddRefEntityToScene(re);
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 835
;835:	}
LABELV $480
line 831
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $482
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LTI4 $479
line 836
;836:}
LABELV $420
endproc CG_AddScorePlum 160 12
export CG_AddLocalEntities
proc CG_AddLocalEntities 16 8
line 846
;837:
;838://==============================================================================
;839:
;840:/*
;841:===================
;842:CG_AddLocalEntities
;843:
;844:===================
;845:*/
;846:void CG_AddLocalEntities(void) {
line 851
;847:	localEntity_t *le, *next;
;848:
;849:	// walk the list backwards, so any new local entities generated
;850:	// (trails, marks, etc) will be present this frame
;851:	le = cg_activeLocalEntities.prev;
ADDRLP4 0
ADDRGP4 cg_activeLocalEntities
INDIRP4
ASGNP4
line 852
;852:	for (; le != &cg_activeLocalEntities; le = next) {
ADDRGP4 $493
JUMPV
LABELV $490
line 855
;853:		// grab next now, so if the local entity is freed we
;854:		// still have it
;855:		next = le->prev;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 857
;856:
;857:		if (cg.time >= le->endTime) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
LTI4 $494
line 858
;858:			CG_FreeLocalEntity(le);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 859
;859:			continue;
ADDRGP4 $491
JUMPV
LABELV $494
line 861
;860:		}
;861:		switch (le->leType) {
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $497
ADDRLP4 8
INDIRI4
CNSTI4 9
GTI4 $497
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $511
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $511
address $498
address $503
address $502
address $504
address $505
address $507
address $506
address $508
address $509
address $510
code
LABELV $497
line 863
;862:		default:
;863:			CG_Error("Bad leType: %i", le->leType);
ADDRGP4 $500
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 864
;864:			break;
ADDRGP4 $498
JUMPV
line 867
;865:
;866:		case LE_MARK:
;867:			break;
LABELV $502
line 870
;868:
;869:		case LE_SPRITE_EXPLOSION:
;870:			CG_AddSpriteExplosion(le);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddSpriteExplosion
CALLV
pop
line 871
;871:			break;
ADDRGP4 $498
JUMPV
LABELV $503
line 874
;872:
;873:		case LE_EXPLOSION:
;874:			CG_AddExplosion(le);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddExplosion
CALLV
pop
line 875
;875:			break;
ADDRGP4 $498
JUMPV
LABELV $504
line 878
;876:
;877:		case LE_FRAGMENT:  // gibs and brass
;878:			CG_AddFragment(le);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFragment
CALLV
pop
line 879
;879:			break;
ADDRGP4 $498
JUMPV
LABELV $505
line 882
;880:
;881:		case LE_MOVE_SCALE_FADE:  // water bubbles, plasma trails, smoke puff
;882:			CG_AddMoveScaleFade(le);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddMoveScaleFade
CALLV
pop
line 883
;883:			break;
ADDRGP4 $498
JUMPV
LABELV $506
line 886
;884:
;885:		case LE_FADE_RGB:  // teleporters, railtrails
;886:			CG_AddFadeRGB(le);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFadeRGB
CALLV
pop
line 887
;887:			break;
ADDRGP4 $498
JUMPV
LABELV $507
line 890
;888:
;889:		case LE_FALL_SCALE_FADE:  // gib blood trails
;890:			CG_AddFallScaleFade(le);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFallScaleFade
CALLV
pop
line 891
;891:			break;
ADDRGP4 $498
JUMPV
LABELV $508
line 894
;892:
;893:		case LE_SCALE_FADE:  // rocket trails
;894:			CG_AddScaleFade(le);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddScaleFade
CALLV
pop
line 895
;895:			break;
ADDRGP4 $498
JUMPV
LABELV $509
line 898
;896:
;897:		case LE_SCOREPLUM:
;898:			CG_AddScorePlum(le);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddScorePlum
CALLV
pop
line 899
;899:			break;
ADDRGP4 $498
JUMPV
LABELV $510
line 913
;900:
;901:#ifdef MISSIONPACK
;902:		case LE_KAMIKAZE:
;903:			CG_AddKamikaze(le);
;904:			break;
;905:		case LE_INVULIMPACT:
;906:			CG_AddInvulnerabilityImpact(le);
;907:			break;
;908:		case LE_INVULJUICED:
;909:			CG_AddInvulnerabilityJuiced(le);
;910:			break;
;911:#endif
;912:		case LE_SHOWREFENTITY:
;913:			CG_AddRefEntity(le);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddRefEntity
CALLV
pop
line 914
;914:			break;
LABELV $498
line 916
;915:		}
;916:	}
LABELV $491
line 852
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $493
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg_activeLocalEntities
CVPU4 4
NEU4 $490
line 917
;917:}
LABELV $489
endproc CG_AddLocalEntities 16 8
bss
export cg_freeLocalEntities
align 4
LABELV cg_freeLocalEntities
skip 4
export cg_activeLocalEntities
align 4
LABELV cg_activeLocalEntities
skip 292
export cg_localEntities
align 4
LABELV cg_localEntities
skip 598016
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_ShaderStateChanged
import CG_SetConfigValues
import CG_ParseSysteminfo
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import phy_movetype
import cg_timerBest_y
import cg_timerBest_x
import cg_timerActive_y
import cg_timerActive_x
import cg_timerSkim_y
import cg_timerSkim_x
import cg_speed_y
import cg_speed_x
import cg_followKiller
import cg_fovAdjust
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import cg_smoothClients
import cg_scorePlum
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_drawSpeed
import cg_drawAttacker
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailRadius
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_drawWeaponSelect
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import VectorMAM
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $500
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 108
byte 1 101
byte 1 84
byte 1 121
byte 1 112
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $83
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 76
byte 1 111
byte 1 99
byte 1 97
byte 1 108
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 58
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 0
