code
proc UI_PlayerInfo_SetWeapon 84 12
file "../../../../code/q3_ui/ui_players.c"
line 30
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// ui_players.c
;4:
;5:#include "ui_local.h"
;6:
;7:#define UI_TIMER_GESTURE       2300
;8:#define UI_TIMER_JUMP          1000
;9:#define UI_TIMER_LAND          130
;10:#define UI_TIMER_WEAPON_SWITCH 300
;11:#define UI_TIMER_ATTACK        500
;12:#define UI_TIMER_MUZZLE_FLASH  20
;13:#define UI_TIMER_WEAPON_DELAY  250
;14:
;15:#define JUMP_HEIGHT 56
;16:
;17:#define SWINGSPEED 0.3f
;18:
;19:#define SPIN_SPEED 0.9f
;20:#define COAST_TIME 1000
;21:
;22:static int   dp_realtime;
;23:static float jumpHeight;
;24:
;25:/*
;26:===============
;27:UI_PlayerInfo_SetWeapon
;28:===============
;29:*/
;30:static void UI_PlayerInfo_SetWeapon(playerInfo_t* pi, weapon_t weaponNum) {
line 34
;31:	gitem_t* item;
;32:	char     path[MAX_QPATH];
;33:
;34:	pi->currentWeapon = weaponNum;
ADDRFP4 0
INDIRP4
CNSTI4 1040
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
LABELV $69
line 36
;35:tryagain:
;36:	pi->realWeapon  = weaponNum;
ADDRFP4 0
INDIRP4
CNSTI4 1104
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 37
;37:	pi->weaponModel = 0;
ADDRFP4 0
INDIRP4
CNSTI4 988
ADDP4
CNSTI4 0
ASGNI4
line 38
;38:	pi->barrelModel = 0;
ADDRFP4 0
INDIRP4
CNSTI4 992
ADDP4
CNSTI4 0
ASGNI4
line 39
;39:	pi->flashModel  = 0;
ADDRFP4 0
INDIRP4
CNSTI4 996
ADDP4
CNSTI4 0
ASGNI4
line 41
;40:
;41:	if (weaponNum == WP_NONE) {
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $70
line 42
;42:		return;
ADDRGP4 $68
JUMPV
LABELV $70
line 45
;43:	}
;44:
;45:	for (item = bg_itemlist + 1; item->classname; item++) {
ADDRLP4 0
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $75
JUMPV
LABELV $72
line 46
;46:		if (item->giType != IT_WEAPON) {
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
EQI4 $77
line 47
;47:			continue;
ADDRGP4 $73
JUMPV
LABELV $77
line 49
;48:		}
;49:		if (item->giTag == weaponNum) {
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 4
INDIRI4
NEI4 $79
line 50
;50:			break;
ADDRGP4 $74
JUMPV
LABELV $79
line 52
;51:		}
;52:	}
LABELV $73
line 45
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $75
ADDRLP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $72
LABELV $74
line 54
;53:
;54:	if (item->classname) {
ADDRLP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $81
line 55
;55:		pi->weaponModel = trap_R_RegisterModel(item->world_model[0]);
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 988
ADDP4
ADDRLP4 68
INDIRI4
ASGNI4
line 56
;56:	}
LABELV $81
line 58
;57:
;58:	if (pi->weaponModel == 0) {
ADDRFP4 0
INDIRP4
CNSTI4 988
ADDP4
INDIRI4
CNSTI4 0
NEI4 $83
line 59
;59:		if (weaponNum == WP_MACHINEGUN) {
ADDRFP4 4
INDIRI4
CNSTI4 2
NEI4 $85
line 60
;60:			weaponNum = WP_NONE;
ADDRFP4 4
CNSTI4 0
ASGNI4
line 61
;61:			goto tryagain;
ADDRGP4 $69
JUMPV
LABELV $85
line 63
;62:		}
;63:		weaponNum = WP_MACHINEGUN;
ADDRFP4 4
CNSTI4 2
ASGNI4
line 64
;64:		goto tryagain;
ADDRGP4 $69
JUMPV
LABELV $83
line 67
;65:	}
;66:
;67:	if (weaponNum == WP_MACHINEGUN || weaponNum == WP_GAUNTLET || weaponNum == WP_BFG) {
ADDRLP4 68
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 2
EQI4 $90
ADDRLP4 68
INDIRI4
CNSTI4 1
EQI4 $90
ADDRLP4 68
INDIRI4
CNSTI4 9
NEI4 $87
LABELV $90
line 68
;68:		COM_StripExtension(item->world_model[0], path, sizeof(path));
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 69
;69:		Q_strcat(path, sizeof(path), "_barrel.md3");
ADDRLP4 4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $91
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 70
;70:		pi->barrelModel = trap_R_RegisterModel(path);
ADDRLP4 4
ARGP4
ADDRLP4 72
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 992
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 71
;71:	}
LABELV $87
line 73
;72:
;73:	COM_StripExtension(item->world_model[0], path, sizeof(path));
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 74
;74:	Q_strcat(path, sizeof(path), "_flash.md3");
ADDRLP4 4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $92
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 75
;75:	pi->flashModel = trap_R_RegisterModel(path);
ADDRLP4 4
ARGP4
ADDRLP4 72
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 996
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 77
;76:
;77:	switch (weaponNum) {
ADDRLP4 76
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 1
LTI4 $93
ADDRLP4 76
INDIRI4
CNSTI4 10
GTI4 $93
ADDRLP4 76
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $106-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $106
address $96
address $97
address $98
address $99
address $100
address $101
address $102
address $103
address $104
address $105
code
LABELV $96
line 79
;78:	case WP_GAUNTLET:
;79:		MAKERGB(pi->flashDlightColor, 0.6f, 0.6f, 1);
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 1065353216
ASGNF4
line 80
;80:		break;
ADDRGP4 $94
JUMPV
LABELV $97
line 83
;81:
;82:	case WP_MACHINEGUN:
;83:		MAKERGB(pi->flashDlightColor, 1, 1, 0);
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 0
ASGNF4
line 84
;84:		break;
ADDRGP4 $94
JUMPV
LABELV $98
line 87
;85:
;86:	case WP_SHOTGUN:
;87:		MAKERGB(pi->flashDlightColor, 1, 1, 0);
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 0
ASGNF4
line 88
;88:		break;
ADDRGP4 $94
JUMPV
LABELV $99
line 91
;89:
;90:	case WP_GRENADE_LAUNCHER:
;91:		MAKERGB(pi->flashDlightColor, 1, 0.7f, 0.5f);
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 1056964608
ASGNF4
line 92
;92:		break;
ADDRGP4 $94
JUMPV
LABELV $100
line 95
;93:
;94:	case WP_ROCKET_LAUNCHER:
;95:		MAKERGB(pi->flashDlightColor, 1, 0.75f, 0);
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 0
ASGNF4
line 96
;96:		break;
ADDRGP4 $94
JUMPV
LABELV $101
line 99
;97:
;98:	case WP_LIGHTNING:
;99:		MAKERGB(pi->flashDlightColor, 0.6f, 0.6f, 1);
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 1065353216
ASGNF4
line 100
;100:		break;
ADDRGP4 $94
JUMPV
LABELV $102
line 103
;101:
;102:	case WP_RAILGUN:
;103:		MAKERGB(pi->flashDlightColor, 1, 0.5f, 0);
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1056964608
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 0
ASGNF4
line 104
;104:		break;
ADDRGP4 $94
JUMPV
LABELV $103
line 107
;105:
;106:	case WP_PLASMAGUN:
;107:		MAKERGB(pi->flashDlightColor, 0.6f, 0.6f, 1);
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 1065353216
ASGNF4
line 108
;108:		break;
ADDRGP4 $94
JUMPV
LABELV $104
line 111
;109:
;110:	case WP_BFG:
;111:		MAKERGB(pi->flashDlightColor, 1, 0.7f, 1);
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 1065353216
ASGNF4
line 112
;112:		break;
ADDRGP4 $94
JUMPV
LABELV $105
line 115
;113:
;114:	case WP_GRAPPLING_HOOK:
;115:		MAKERGB(pi->flashDlightColor, 0.6f, 0.6f, 1);
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 1065353216
ASGNF4
line 116
;116:		break;
ADDRGP4 $94
JUMPV
LABELV $93
line 119
;117:
;118:	default:
;119:		MAKERGB(pi->flashDlightColor, 1, 1, 1);
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 1065353216
ASGNF4
line 120
;120:		break;
LABELV $94
line 122
;121:	}
;122:}
LABELV $68
endproc UI_PlayerInfo_SetWeapon 84 12
proc UI_ForceLegsAnim 4 0
line 129
;123:
;124:/*
;125:===============
;126:UI_ForceLegsAnim
;127:===============
;128:*/
;129:static void UI_ForceLegsAnim(playerInfo_t* pi, int anim) {
line 130
;130:	pi->legsAnim = ((pi->legsAnim & ANIM_TOGGLEBIT) ^ ANIM_TOGGLEBIT) | anim;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 1044
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 128
BXORI4
ADDRFP4 4
INDIRI4
BORI4
ASGNI4
line 132
;131:
;132:	if (anim == LEGS_JUMP) {
ADDRFP4 4
INDIRI4
CNSTI4 18
NEI4 $109
line 133
;133:		pi->legsAnimationTimer = UI_TIMER_JUMP;
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
CNSTI4 1000
ASGNI4
line 134
;134:	}
LABELV $109
line 135
;135:}
LABELV $108
endproc UI_ForceLegsAnim 4 0
proc UI_SetLegsAnim 0 8
line 142
;136:
;137:/*
;138:===============
;139:UI_SetLegsAnim
;140:===============
;141:*/
;142:static void UI_SetLegsAnim(playerInfo_t* pi, int anim) {
line 143
;143:	if (pi->pendingLegsAnim) {
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
INDIRI4
CNSTI4 0
EQI4 $112
line 144
;144:		anim                = pi->pendingLegsAnim;
ADDRFP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
INDIRI4
ASGNI4
line 145
;145:		pi->pendingLegsAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
CNSTI4 0
ASGNI4
line 146
;146:	}
LABELV $112
line 147
;147:	UI_ForceLegsAnim(pi, anim);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 UI_ForceLegsAnim
CALLV
pop
line 148
;148:}
LABELV $111
endproc UI_SetLegsAnim 0 8
proc UI_ForceTorsoAnim 8 0
line 155
;149:
;150:/*
;151:===============
;152:UI_ForceTorsoAnim
;153:===============
;154:*/
;155:static void UI_ForceTorsoAnim(playerInfo_t* pi, int anim) {
line 156
;156:	pi->torsoAnim = ((pi->torsoAnim & ANIM_TOGGLEBIT) ^ ANIM_TOGGLEBIT) | anim;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 1048
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 1048
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 128
BXORI4
ADDRFP4 4
INDIRI4
BORI4
ASGNI4
line 158
;157:
;158:	if (anim == TORSO_GESTURE) {
ADDRFP4 4
INDIRI4
CNSTI4 6
NEI4 $115
line 159
;159:		pi->torsoAnimationTimer = UI_TIMER_GESTURE;
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
CNSTI4 2300
ASGNI4
line 160
;160:	}
LABELV $115
line 162
;161:
;162:	if (anim == TORSO_ATTACK || anim == TORSO_ATTACK2) {
ADDRLP4 4
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 7
EQI4 $119
ADDRLP4 4
INDIRI4
CNSTI4 8
NEI4 $117
LABELV $119
line 163
;163:		pi->torsoAnimationTimer = UI_TIMER_ATTACK;
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
CNSTI4 500
ASGNI4
line 164
;164:	}
LABELV $117
line 165
;165:}
LABELV $114
endproc UI_ForceTorsoAnim 8 0
proc UI_SetTorsoAnim 0 8
line 172
;166:
;167:/*
;168:===============
;169:UI_SetTorsoAnim
;170:===============
;171:*/
;172:static void UI_SetTorsoAnim(playerInfo_t* pi, int anim) {
line 173
;173:	if (pi->pendingTorsoAnim) {
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
INDIRI4
CNSTI4 0
EQI4 $121
line 174
;174:		anim                 = pi->pendingTorsoAnim;
ADDRFP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
INDIRI4
ASGNI4
line 175
;175:		pi->pendingTorsoAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
CNSTI4 0
ASGNI4
line 176
;176:	}
LABELV $121
line 178
;177:
;178:	UI_ForceTorsoAnim(pi, anim);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 179
;179:}
LABELV $120
endproc UI_SetTorsoAnim 0 8
proc UI_TorsoSequencing 16 8
line 186
;180:
;181:/*
;182:===============
;183:UI_TorsoSequencing
;184:===============
;185:*/
;186:static void UI_TorsoSequencing(playerInfo_t* pi) {
line 189
;187:	int currentAnim;
;188:
;189:	currentAnim = pi->torsoAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1048
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 191
;190:
;191:	if (pi->weapon != pi->currentWeapon) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 1040
ADDP4
INDIRI4
EQI4 $124
line 192
;192:		if (currentAnim != TORSO_DROP) {
ADDRLP4 0
INDIRI4
CNSTI4 9
EQI4 $126
line 193
;193:			pi->torsoAnimationTimer = UI_TIMER_WEAPON_SWITCH;
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
CNSTI4 300
ASGNI4
line 194
;194:			UI_ForceTorsoAnim(pi, TORSO_DROP);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 9
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 195
;195:		}
LABELV $126
line 196
;196:	}
LABELV $124
line 198
;197:
;198:	if (pi->torsoAnimationTimer > 0) {
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
INDIRI4
CNSTI4 0
LEI4 $128
line 199
;199:		return;
ADDRGP4 $123
JUMPV
LABELV $128
line 202
;200:	}
;201:
;202:	if (currentAnim == TORSO_GESTURE) {
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $130
line 203
;203:		UI_SetTorsoAnim(pi, TORSO_STAND);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 11
ARGI4
ADDRGP4 UI_SetTorsoAnim
CALLV
pop
line 204
;204:		return;
ADDRGP4 $123
JUMPV
LABELV $130
line 207
;205:	}
;206:
;207:	if (currentAnim == TORSO_ATTACK || currentAnim == TORSO_ATTACK2) {
ADDRLP4 0
INDIRI4
CNSTI4 7
EQI4 $134
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $132
LABELV $134
line 208
;208:		UI_SetTorsoAnim(pi, TORSO_STAND);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 11
ARGI4
ADDRGP4 UI_SetTorsoAnim
CALLV
pop
line 209
;209:		return;
ADDRGP4 $123
JUMPV
LABELV $132
line 212
;210:	}
;211:
;212:	if (currentAnim == TORSO_DROP) {
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $135
line 213
;213:		UI_PlayerInfo_SetWeapon(pi, pi->weapon);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_PlayerInfo_SetWeapon
CALLV
pop
line 214
;214:		pi->torsoAnimationTimer = UI_TIMER_WEAPON_SWITCH;
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
CNSTI4 300
ASGNI4
line 215
;215:		UI_ForceTorsoAnim(pi, TORSO_RAISE);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 10
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 216
;216:		return;
ADDRGP4 $123
JUMPV
LABELV $135
line 219
;217:	}
;218:
;219:	if (currentAnim == TORSO_RAISE) {
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $137
line 220
;220:		UI_SetTorsoAnim(pi, TORSO_STAND);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 11
ARGI4
ADDRGP4 UI_SetTorsoAnim
CALLV
pop
line 221
;221:		return;
LABELV $137
line 223
;222:	}
;223:}
LABELV $123
endproc UI_TorsoSequencing 16 8
proc UI_LegsSequencing 8 8
line 230
;224:
;225:/*
;226:===============
;227:UI_LegsSequencing
;228:===============
;229:*/
;230:static void UI_LegsSequencing(playerInfo_t* pi) {
line 233
;231:	int currentAnim;
;232:
;233:	currentAnim = pi->legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 235
;234:
;235:	if (pi->legsAnimationTimer > 0) {
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
INDIRI4
CNSTI4 0
LEI4 $140
line 236
;236:		if (currentAnim == LEGS_JUMP) {
ADDRLP4 0
INDIRI4
CNSTI4 18
NEI4 $139
line 237
;237:			jumpHeight = JUMP_HEIGHT * sin(M_PI * (UI_TIMER_JUMP - pi->legsAnimationTimer) / UI_TIMER_JUMP);
CNSTI4 1000
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 994960174
MULF4
ARGF4
ADDRLP4 4
ADDRGP4 sin
CALLF4
ASGNF4
ADDRGP4 jumpHeight
ADDRLP4 4
INDIRF4
CNSTF4 1113587712
MULF4
ASGNF4
line 238
;238:		}
line 239
;239:		return;
ADDRGP4 $139
JUMPV
LABELV $140
line 242
;240:	}
;241:
;242:	if (currentAnim == LEGS_JUMP) {
ADDRLP4 0
INDIRI4
CNSTI4 18
NEI4 $144
line 243
;243:		UI_ForceLegsAnim(pi, LEGS_LAND);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 19
ARGI4
ADDRGP4 UI_ForceLegsAnim
CALLV
pop
line 244
;244:		pi->legsAnimationTimer = UI_TIMER_LAND;
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
CNSTI4 130
ASGNI4
line 245
;245:		jumpHeight             = 0;
ADDRGP4 jumpHeight
CNSTF4 0
ASGNF4
line 246
;246:		return;
ADDRGP4 $139
JUMPV
LABELV $144
line 249
;247:	}
;248:
;249:	if (currentAnim == LEGS_LAND) {
ADDRLP4 0
INDIRI4
CNSTI4 19
NEI4 $146
line 250
;250:		UI_SetLegsAnim(pi, LEGS_IDLE);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 22
ARGI4
ADDRGP4 UI_SetLegsAnim
CALLV
pop
line 251
;251:		return;
LABELV $146
line 253
;252:	}
;253:}
LABELV $139
endproc UI_LegsSequencing 8 8
proc UI_PositionEntityOnTag 80 24
line 260
;254:
;255:/*
;256:======================
;257:UI_PositionEntityOnTag
;258:======================
;259:*/
;260:static void UI_PositionEntityOnTag(refEntity_t* entity, const refEntity_t* parent, clipHandle_t parentModel, char* tagName) {
line 265
;261:	int           i;
;262:	orientation_t lerped;
;263:
;264:	// lerp the tag
;265:	trap_CM_LerpTag(&lerped, parentModel, parent->oldframe, parent->frame, 1.0 - parent->backlerp, tagName);
ADDRLP4 4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 52
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 52
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ADDRLP4 52
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ARGF4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_CM_LerpTag
CALLI4
pop
line 268
;266:
;267:	// FIXME: allow origin offsets along tag?
;268:	VectorCopy(parent->origin, entity->origin);
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 269
;269:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $149
line 270
;270:		VectorMA(entity->origin, lerped.origin[i], parent->axis[i], entity->origin);
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 56
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 271
;271:	}
LABELV $150
line 269
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $149
line 274
;272:
;273:	// cast away const because of compiler problems
;274:	MatrixMultiply(lerped.axis, ((refEntity_t*)parent)->axis, entity->axis);
ADDRLP4 4+12
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 275
;275:	entity->backlerp = parent->backlerp;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ASGNF4
line 276
;276:}
LABELV $148
endproc UI_PositionEntityOnTag 80 24
proc UI_PositionRotatedEntityOnTag 116 24
line 283
;277:
;278:/*
;279:======================
;280:UI_PositionRotatedEntityOnTag
;281:======================
;282:*/
;283:static void UI_PositionRotatedEntityOnTag(refEntity_t* entity, const refEntity_t* parent, clipHandle_t parentModel, char* tagName) {
line 289
;284:	int           i;
;285:	orientation_t lerped;
;286:	vec3_t        tempAxis[3];
;287:
;288:	// lerp the tag
;289:	trap_CM_LerpTag(&lerped, parentModel, parent->oldframe, parent->frame, 1.0 - parent->backlerp, tagName);
ADDRLP4 4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 88
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 88
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ADDRLP4 88
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ARGF4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_CM_LerpTag
CALLI4
pop
line 292
;290:
;291:	// FIXME: allow origin offsets along tag?
;292:	VectorCopy(parent->origin, entity->origin);
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 293
;293:	for (i = 0; i < 3; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $155
line 294
;294:		VectorMA(entity->origin, lerped.origin[i], parent->axis[i], entity->origin);
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 92
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 100
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 108
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 295
;295:	}
LABELV $156
line 293
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $155
line 298
;296:
;297:	// cast away const because of compiler problems
;298:	MatrixMultiply(entity->axis, ((refEntity_t*)parent)->axis, tempAxis);
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRLP4 52
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 299
;299:	MatrixMultiply(lerped.axis, tempAxis, entity->axis);
ADDRLP4 4+12
ARGP4
ADDRLP4 52
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 300
;300:}
LABELV $154
endproc UI_PositionRotatedEntityOnTag 116 24
proc UI_SetLerpFrameAnimation 12 8
line 307
;301:
;302:/*
;303:===============
;304:UI_SetLerpFrameAnimation
;305:===============
;306:*/
;307:static void UI_SetLerpFrameAnimation(playerInfo_t* ci, lerpFrame_t* lf, int newAnimation) {
line 310
;308:	animation_t* anim;
;309:
;310:	lf->animationNumber = newAnimation;
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 311
;311:	newAnimation &= ~ANIM_TOGGLEBIT;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 313
;312:
;313:	if (newAnimation < 0 || newAnimation >= MAX_ANIMATIONS) {
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $163
ADDRLP4 4
INDIRI4
CNSTI4 31
LTI4 $161
LABELV $163
line 314
;314:		trap_Error(va("Bad animation number: %i", newAnimation));
ADDRGP4 $164
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_Error
CALLV
pop
line 315
;315:	}
LABELV $161
line 317
;316:
;317:	anim = &ci->animations[newAnimation];
ADDRLP4 0
ADDRFP4 8
INDIRI4
CNSTI4 28
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDP4
ASGNP4
line 319
;318:
;319:	lf->animation     = anim;
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 320
;320:	lf->animationTime = lf->frameTime + anim->initialLerp;
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDI4
ASGNI4
line 321
;321:}
LABELV $160
endproc UI_SetLerpFrameAnimation 12 8
proc UI_RunLerpFrame 28 12
line 328
;322:
;323:/*
;324:===============
;325:UI_RunLerpFrame
;326:===============
;327:*/
;328:static void UI_RunLerpFrame(playerInfo_t* ci, lerpFrame_t* lf, int newAnimation) {
line 333
;329:	int          f;
;330:	animation_t* anim;
;331:
;332:	// see if the animation sequence is switching
;333:	if (newAnimation != lf->animationNumber || !lf->animation) {
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
NEI4 $168
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $166
LABELV $168
line 334
;334:		UI_SetLerpFrameAnimation(ci, lf, newAnimation);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 UI_SetLerpFrameAnimation
CALLV
pop
line 335
;335:	}
LABELV $166
line 339
;336:
;337:	// if we have passed the current frame, move it to
;338:	// oldFrame and calculate a new frame
;339:	if (dp_realtime >= lf->frameTime) {
ADDRGP4 dp_realtime
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LTI4 $169
line 340
;340:		lf->oldFrame     = lf->frame;
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 341
;341:		lf->oldFrameTime = lf->frameTime;
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 344
;342:
;343:		// get the next frame based on the animation
;344:		anim = lf->animation;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
ASGNP4
line 345
;345:		if (dp_realtime < lf->animationTime) {
ADDRGP4 dp_realtime
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
GEI4 $171
line 346
;346:			lf->frameTime = lf->animationTime;  // initial lerp
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
line 347
;347:		} else {
ADDRGP4 $172
JUMPV
LABELV $171
line 348
;348:			lf->frameTime = lf->oldFrameTime + anim->frameLerp;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDI4
ASGNI4
line 349
;349:		}
LABELV $172
line 350
;350:		f = (lf->frameTime - lf->animationTime) / anim->frameLerp;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
SUBI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
DIVI4
ASGNI4
line 351
;351:		if (f >= anim->numFrames) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $173
line 352
;352:			f -= anim->numFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 353
;353:			if (anim->loopFrames) {
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
EQI4 $175
line 354
;354:				f %= anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
MODI4
ASGNI4
line 355
;355:				f += anim->numFrames - anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
ADDI4
ASGNI4
line 356
;356:			} else {
ADDRGP4 $176
JUMPV
LABELV $175
line 357
;357:				f = anim->numFrames - 1;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 360
;358:				// the animation is stuck at the end, so it
;359:				// can immediately transition to another sequence
;360:				lf->frameTime = dp_realtime;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 361
;361:			}
LABELV $176
line 362
;362:		}
LABELV $173
line 363
;363:		lf->frame = anim->firstFrame + f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 364
;364:		if (dp_realtime > lf->frameTime) {
ADDRGP4 dp_realtime
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LEI4 $177
line 365
;365:			lf->frameTime = dp_realtime;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 366
;366:		}
LABELV $177
line 367
;367:	}
LABELV $169
line 369
;368:
;369:	if (lf->frameTime > dp_realtime + 200) {
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 dp_realtime
INDIRI4
CNSTI4 200
ADDI4
LEI4 $179
line 370
;370:		lf->frameTime = dp_realtime;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 371
;371:	}
LABELV $179
line 373
;372:
;373:	if (lf->oldFrameTime > dp_realtime) {
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRGP4 dp_realtime
INDIRI4
LEI4 $181
line 374
;374:		lf->oldFrameTime = dp_realtime;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 375
;375:	}
LABELV $181
line 377
;376:	// calculate current lerp value
;377:	if (lf->frameTime == lf->oldFrameTime) {
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
NEI4 $183
line 378
;378:		lf->backlerp = 0;
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 0
ASGNF4
line 379
;379:	} else {
ADDRGP4 $184
JUMPV
LABELV $183
line 380
;380:		lf->backlerp = 1.0 - (float)(dp_realtime - lf->oldFrameTime) / (lf->frameTime - lf->oldFrameTime);
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 1065353216
ADDRGP4 dp_realtime
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 381
;381:	}
LABELV $184
line 382
;382:}
LABELV $165
endproc UI_RunLerpFrame 28 12
proc UI_PlayerAnimation 16 12
line 389
;383:
;384:/*
;385:===============
;386:UI_PlayerAnimation
;387:===============
;388:*/
;389:static void UI_PlayerAnimation(playerInfo_t* pi, int* legsOld, int* legs, float* legsBackLerp, int* torsoOld, int* torso, float* torsoBackLerp) {
line 392
;390:
;391:	// legs animation
;392:	pi->legsAnimationTimer -= uis.frametime;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRGP4 uis
INDIRI4
SUBI4
ASGNI4
line 393
;393:	if (pi->legsAnimationTimer < 0) {
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
INDIRI4
CNSTI4 0
GEI4 $186
line 394
;394:		pi->legsAnimationTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
CNSTI4 0
ASGNI4
line 395
;395:	}
LABELV $186
line 397
;396:
;397:	UI_LegsSequencing(pi);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 UI_LegsSequencing
CALLV
pop
line 399
;398:
;399:	if (pi->legs.yawing && (pi->legsAnim & ~ANIM_TOGGLEBIT) == LEGS_IDLE) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 0
EQI4 $188
ADDRLP4 4
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
CNSTI4 22
NEI4 $188
line 400
;400:		UI_RunLerpFrame(pi, &pi->legs, LEGS_TURN);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ARGP4
CNSTI4 24
ARGI4
ADDRGP4 UI_RunLerpFrame
CALLV
pop
line 401
;401:	} else {
ADDRGP4 $189
JUMPV
LABELV $188
line 402
;402:		UI_RunLerpFrame(pi, &pi->legs, pi->legsAnim);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_RunLerpFrame
CALLV
pop
line 403
;403:	}
LABELV $189
line 404
;404:	*legsOld      = pi->legs.oldFrame;
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 405
;405:	*legs         = pi->legs.frame;
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 406
;406:	*legsBackLerp = pi->legs.backlerp;
ADDRFP4 12
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 409
;407:
;408:	// torso animation
;409:	pi->torsoAnimationTimer -= uis.frametime;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
ADDRGP4 uis
INDIRI4
SUBI4
ASGNI4
line 410
;410:	if (pi->torsoAnimationTimer < 0) {
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
INDIRI4
CNSTI4 0
GEI4 $190
line 411
;411:		pi->torsoAnimationTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
CNSTI4 0
ASGNI4
line 412
;412:	}
LABELV $190
line 414
;413:
;414:	UI_TorsoSequencing(pi);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 UI_TorsoSequencing
CALLV
pop
line 416
;415:
;416:	UI_RunLerpFrame(pi, &pi->torso, pi->torsoAnim);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 1048
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_RunLerpFrame
CALLV
pop
line 417
;417:	*torsoOld      = pi->torso.oldFrame;
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
ASGNI4
line 418
;418:	*torso         = pi->torso.frame;
ADDRFP4 20
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
ASGNI4
line 419
;419:	*torsoBackLerp = pi->torso.backlerp;
ADDRFP4 24
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ASGNF4
line 420
;420:}
LABELV $185
endproc UI_PlayerAnimation 16 12
proc UI_SwingAngles 28 8
line 427
;421:
;422:/*
;423:==================
;424:UI_SwingAngles
;425:==================
;426:*/
;427:static void UI_SwingAngles(float destination, float swingTolerance, float clampTolerance, float speed, float* angle, qboolean* swinging) {
line 432
;428:	float swing;
;429:	float move;
;430:	float scale;
;431:
;432:	if (!*swinging) {
ADDRFP4 20
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $193
line 434
;433:		// see if a swing should be started
;434:		swing = AngleSubtract(*angle, destination);
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 435
;435:		if (swing > swingTolerance || swing < -swingTolerance) {
ADDRLP4 20
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRF4
GTF4 $197
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRF4
NEGF4
GEF4 $195
LABELV $197
line 436
;436:			*swinging = qtrue;
ADDRFP4 20
INDIRP4
CNSTI4 1
ASGNI4
line 437
;437:		}
LABELV $195
line 438
;438:	}
LABELV $193
line 440
;439:
;440:	if (!*swinging) {
ADDRFP4 20
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $198
line 441
;441:		return;
ADDRGP4 $192
JUMPV
LABELV $198
line 446
;442:	}
;443:
;444:	// modify the speed depending on the delta
;445:	// so it doesn't seem so linear
;446:	swing = AngleSubtract(destination, *angle);
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 447
;447:	scale = fabs(swing);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 16
INDIRF4
ASGNF4
line 448
;448:	if (scale < swingTolerance * 0.5) {
ADDRLP4 4
INDIRF4
ADDRFP4 4
INDIRF4
CNSTF4 1056964608
MULF4
GEF4 $200
line 449
;449:		scale = 0.5;
ADDRLP4 4
CNSTF4 1056964608
ASGNF4
line 450
;450:	} else if (scale < swingTolerance) {
ADDRGP4 $201
JUMPV
LABELV $200
ADDRLP4 4
INDIRF4
ADDRFP4 4
INDIRF4
GEF4 $202
line 451
;451:		scale = 1.0;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 452
;452:	} else {
ADDRGP4 $203
JUMPV
LABELV $202
line 453
;453:		scale = 2.0;
ADDRLP4 4
CNSTF4 1073741824
ASGNF4
line 454
;454:	}
LABELV $203
LABELV $201
line 457
;455:
;456:	// swing towards the destination angle
;457:	if (swing >= 0) {
ADDRLP4 0
INDIRF4
CNSTF4 0
LTF4 $204
line 458
;458:		move = uis.frametime * scale * speed;
ADDRLP4 8
ADDRGP4 uis
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 12
INDIRF4
MULF4
ASGNF4
line 459
;459:		if (move >= swing) {
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRF4
LTF4 $206
line 460
;460:			move      = swing;
ADDRLP4 8
ADDRLP4 0
INDIRF4
ASGNF4
line 461
;461:			*swinging = qfalse;
ADDRFP4 20
INDIRP4
CNSTI4 0
ASGNI4
line 462
;462:		}
LABELV $206
line 463
;463:		*angle = AngleMod(*angle + move);
ADDRLP4 20
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 464
;464:	} else {
ADDRGP4 $205
JUMPV
LABELV $204
line 465
;465:		move = uis.frametime * scale * -speed;
ADDRLP4 8
ADDRGP4 uis
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 12
INDIRF4
NEGF4
MULF4
ASGNF4
line 466
;466:		if (move <= swing) {
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRF4
GTF4 $208
line 467
;467:			move      = swing;
ADDRLP4 8
ADDRLP4 0
INDIRF4
ASGNF4
line 468
;468:			*swinging = qfalse;
ADDRFP4 20
INDIRP4
CNSTI4 0
ASGNI4
line 469
;469:		}
LABELV $208
line 470
;470:		*angle = AngleMod(*angle + move);
ADDRLP4 20
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 471
;471:	}
LABELV $205
line 474
;472:
;473:	// clamp to no more than tolerance
;474:	swing = AngleSubtract(destination, *angle);
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 20
INDIRF4
ASGNF4
line 475
;475:	if (swing > clampTolerance) {
ADDRLP4 0
INDIRF4
ADDRFP4 8
INDIRF4
LEF4 $210
line 476
;476:		*angle = AngleMod(destination - (clampTolerance - 1));
ADDRFP4 0
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
SUBF4
SUBF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 16
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 477
;477:	} else if (swing < -clampTolerance) {
ADDRGP4 $211
JUMPV
LABELV $210
ADDRLP4 0
INDIRF4
ADDRFP4 8
INDIRF4
NEGF4
GEF4 $212
line 478
;478:		*angle = AngleMod(destination + (clampTolerance - 1));
ADDRFP4 0
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
SUBF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 16
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 479
;479:	}
LABELV $212
LABELV $211
line 480
;480:}
LABELV $192
endproc UI_SwingAngles 28 8
proc UI_MovedirAdjustment 40 16
line 487
;481:
;482:/*
;483:======================
;484:UI_MovedirAdjustment
;485:======================
;486:*/
;487:static float UI_MovedirAdjustment(playerInfo_t* pi) {
line 491
;488:	vec3_t relativeAngles;
;489:	vec3_t moveVector;
;490:
;491:	VectorSubtract(pi->viewAngles, pi->moveAngles, relativeAngles);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 24
INDIRP4
CNSTI4 1016
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 1028
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 24
INDIRP4
CNSTI4 1020
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 1032
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 28
INDIRP4
CNSTI4 1024
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 1036
ADDP4
INDIRF4
SUBF4
ASGNF4
line 492
;492:	AngleVectors(relativeAngles, moveVector, NULL, NULL);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 493
;493:	if (Q_fabs(moveVector[0]) < 0.01) {
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 32
ADDRGP4 Q_fabs
CALLF4
ASGNF4
ADDRLP4 32
INDIRF4
CNSTF4 1008981770
GEF4 $217
line 494
;494:		moveVector[0] = 0.0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 495
;495:	}
LABELV $217
line 496
;496:	if (Q_fabs(moveVector[1]) < 0.01) {
ADDRLP4 0+4
INDIRF4
ARGF4
ADDRLP4 36
ADDRGP4 Q_fabs
CALLF4
ASGNF4
ADDRLP4 36
INDIRF4
CNSTF4 1008981770
GEF4 $219
line 497
;497:		moveVector[1] = 0.0;
ADDRLP4 0+4
CNSTF4 0
ASGNF4
line 498
;498:	}
LABELV $219
line 500
;499:
;500:	if (moveVector[1] == 0 && moveVector[0] > 0) {
ADDRLP4 0+4
INDIRF4
CNSTF4 0
NEF4 $223
ADDRLP4 0
INDIRF4
CNSTF4 0
LEF4 $223
line 501
;501:		return 0;
CNSTF4 0
RETF4
ADDRGP4 $214
JUMPV
LABELV $223
line 503
;502:	}
;503:	if (moveVector[1] < 0 && moveVector[0] > 0) {
ADDRLP4 0+4
INDIRF4
CNSTF4 0
GEF4 $226
ADDRLP4 0
INDIRF4
CNSTF4 0
LEF4 $226
line 504
;504:		return 22;
CNSTF4 1102053376
RETF4
ADDRGP4 $214
JUMPV
LABELV $226
line 506
;505:	}
;506:	if (moveVector[1] < 0 && moveVector[0] == 0) {
ADDRLP4 0+4
INDIRF4
CNSTF4 0
GEF4 $229
ADDRLP4 0
INDIRF4
CNSTF4 0
NEF4 $229
line 507
;507:		return 45;
CNSTF4 1110704128
RETF4
ADDRGP4 $214
JUMPV
LABELV $229
line 509
;508:	}
;509:	if (moveVector[1] < 0 && moveVector[0] < 0) {
ADDRLP4 0+4
INDIRF4
CNSTF4 0
GEF4 $232
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $232
line 510
;510:		return -22;
CNSTF4 3249537024
RETF4
ADDRGP4 $214
JUMPV
LABELV $232
line 512
;511:	}
;512:	if (moveVector[1] == 0 && moveVector[0] < 0) {
ADDRLP4 0+4
INDIRF4
CNSTF4 0
NEF4 $235
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $235
line 513
;513:		return 0;
CNSTF4 0
RETF4
ADDRGP4 $214
JUMPV
LABELV $235
line 515
;514:	}
;515:	if (moveVector[1] > 0 && moveVector[0] < 0) {
ADDRLP4 0+4
INDIRF4
CNSTF4 0
LEF4 $238
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $238
line 516
;516:		return 22;
CNSTF4 1102053376
RETF4
ADDRGP4 $214
JUMPV
LABELV $238
line 518
;517:	}
;518:	if (moveVector[1] > 0 && moveVector[0] == 0) {
ADDRLP4 0+4
INDIRF4
CNSTF4 0
LEF4 $241
ADDRLP4 0
INDIRF4
CNSTF4 0
NEF4 $241
line 519
;519:		return -45;
CNSTF4 3258187776
RETF4
ADDRGP4 $214
JUMPV
LABELV $241
line 522
;520:	}
;521:
;522:	return -22;
CNSTF4 3249537024
RETF4
LABELV $214
endproc UI_MovedirAdjustment 40 16
proc UI_PlayerAngles 68 24
line 530
;523:}
;524:
;525:/*
;526:===============
;527:UI_PlayerAngles
;528:===============
;529:*/
;530:static void UI_PlayerAngles(playerInfo_t* pi, vec3_t legs[3], vec3_t torso[3], vec3_t head[3]) {
line 535
;531:	vec3_t legsAngles, torsoAngles, headAngles;
;532:	float  dest;
;533:	float  adjust;
;534:
;535:	VectorCopy(pi->viewAngles, headAngles);
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 1016
ADDP4
INDIRB
ASGNB 12
line 536
;536:	headAngles[YAW] = AngleMod(headAngles[YAW]);
ADDRLP4 12+4
INDIRF4
ARGF4
ADDRLP4 44
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 44
INDIRF4
ASGNF4
line 537
;537:	VectorClear(legsAngles);
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 24+4
CNSTF4 0
ASGNF4
ADDRLP4 24+8
CNSTF4 0
ASGNF4
line 538
;538:	VectorClear(torsoAngles);
ADDRLP4 0
CNSTF4 0
ASGNF4
ADDRLP4 0+4
CNSTF4 0
ASGNF4
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 543
;539:
;540:	// --------- yaw -------------
;541:
;542:	// allow yaw to drift a bit
;543:	if ((pi->legsAnim & ~ANIM_TOGGLEBIT) != LEGS_IDLE || (pi->torsoAnim & ~ANIM_TOGGLEBIT) != TORSO_STAND) {
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
CNSTI4 22
NEI4 $253
ADDRLP4 48
INDIRP4
CNSTI4 1048
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
CNSTI4 11
EQI4 $251
LABELV $253
line 545
;544:		// if not standing still, always point all in the same direction
;545:		pi->torso.yawing   = qtrue;  // always center
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 1
ASGNI4
line 546
;546:		pi->torso.pitching = qtrue;  // always center
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTI4 1
ASGNI4
line 547
;547:		pi->legs.yawing    = qtrue;  // always center
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 1
ASGNI4
line 548
;548:	}
LABELV $251
line 551
;549:
;550:	// adjust legs for movement dir
;551:	adjust           = UI_MovedirAdjustment(pi);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 UI_MovedirAdjustment
CALLF4
ASGNF4
ADDRLP4 36
ADDRLP4 52
INDIRF4
ASGNF4
line 552
;552:	legsAngles[YAW]  = headAngles[YAW] + adjust;
ADDRLP4 24+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 36
INDIRF4
ADDF4
ASGNF4
line 553
;553:	torsoAngles[YAW] = headAngles[YAW] + 0.25 * adjust;
ADDRLP4 0+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 36
INDIRF4
CNSTF4 1048576000
MULF4
ADDF4
ASGNF4
line 556
;554:
;555:	// torso
;556:	UI_SwingAngles(torsoAngles[YAW], 25, 90, SWINGSPEED, &pi->torso.yawAngle, &pi->torso.yawing);
ADDRLP4 0+4
INDIRF4
ARGF4
CNSTF4 1103626240
ARGF4
CNSTF4 1119092736
ARGF4
CNSTF4 1050253722
ARGF4
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
CNSTI4 84
ADDP4
ARGP4
ADDRLP4 56
INDIRP4
CNSTI4 88
ADDP4
ARGP4
ADDRGP4 UI_SwingAngles
CALLV
pop
line 557
;557:	UI_SwingAngles(legsAngles[YAW], 40, 90, SWINGSPEED, &pi->legs.yawAngle, &pi->legs.yawing);
ADDRLP4 24+4
INDIRF4
ARGF4
CNSTF4 1109393408
ARGF4
CNSTF4 1119092736
ARGF4
CNSTF4 1050253722
ARGF4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 UI_SwingAngles
CALLV
pop
line 559
;558:
;559:	torsoAngles[YAW] = pi->torso.yawAngle;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ASGNF4
line 560
;560:	legsAngles[YAW]  = pi->legs.yawAngle;
ADDRLP4 24+4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ASGNF4
line 565
;561:
;562:	// --------- pitch -------------
;563:
;564:	// only show a fraction of the pitch angle in the torso
;565:	if (headAngles[PITCH] > 180) {
ADDRLP4 12
INDIRF4
CNSTF4 1127481344
LEF4 $262
line 566
;566:		dest = (-360 + headAngles[PITCH]) * 0.75;
ADDRLP4 40
ADDRLP4 12
INDIRF4
CNSTF4 3283353600
ADDF4
CNSTF4 1061158912
MULF4
ASGNF4
line 567
;567:	} else {
ADDRGP4 $263
JUMPV
LABELV $262
line 568
;568:		dest = headAngles[PITCH] * 0.75;
ADDRLP4 40
ADDRLP4 12
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 569
;569:	}
LABELV $263
line 570
;570:	UI_SwingAngles(dest, 15, 30, 0.1f, &pi->torso.pitchAngle, &pi->torso.pitching);
ADDRLP4 40
INDIRF4
ARGF4
CNSTF4 1097859072
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1036831949
ARGF4
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 96
ADDP4
ARGP4
ADDRGP4 UI_SwingAngles
CALLV
pop
line 571
;571:	torsoAngles[PITCH] = pi->torso.pitchAngle;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ASGNF4
line 574
;572:
;573:	// pull the angles back out of the hierarchial chain
;574:	AnglesSubtract(headAngles, torsoAngles, headAngles);
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 AnglesSubtract
CALLV
pop
line 575
;575:	AnglesSubtract(torsoAngles, legsAngles, torsoAngles);
ADDRLP4 0
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 AnglesSubtract
CALLV
pop
line 576
;576:	AnglesToAxis(legsAngles, legs);
ADDRLP4 24
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 577
;577:	AnglesToAxis(torsoAngles, torso);
ADDRLP4 0
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 578
;578:	AnglesToAxis(headAngles, head);
ADDRLP4 12
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 579
;579:}
LABELV $244
endproc UI_PlayerAngles 68 24
proc UI_PlayerFloatSprite 140 12
line 586
;580:
;581:/*
;582:===============
;583:UI_PlayerFloatSprite
;584:===============
;585:*/
;586:static void UI_PlayerFloatSprite(playerInfo_t* pi, vec3_t origin, qhandle_t shader) {
line 589
;587:	refEntity_t ent;
;588:
;589:	memset(&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 590
;590:	VectorCopy(origin, ent.origin);
ADDRLP4 0+68
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 591
;591:	ent.origin[2] += 48;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1111490560
ADDF4
ASGNF4
line 592
;592:	ent.reType       = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 593
;593:	ent.customShader = shader;
ADDRLP4 0+112
ADDRFP4 8
INDIRI4
ASGNI4
line 594
;594:	ent.radius       = 10;
ADDRLP4 0+132
CNSTF4 1092616192
ASGNF4
line 595
;595:	ent.renderfx     = 0;
ADDRLP4 0+4
CNSTI4 0
ASGNI4
line 596
;596:	trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 597
;597:}
LABELV $264
endproc UI_PlayerFloatSprite 140 12
export UI_MachinegunSpinAngle
proc UI_MachinegunSpinAngle 28 4
line 604
;598:
;599:/*
;600:======================
;601:UI_MachinegunSpinAngle
;602:======================
;603:*/
;604:float UI_MachinegunSpinAngle(playerInfo_t* pi) {
line 610
;605:	int   delta;
;606:	float angle;
;607:	float speed;
;608:	int   torsoAnim;
;609:
;610:	delta = dp_realtime - pi->barrelTime;
ADDRLP4 4
ADDRGP4 dp_realtime
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1100
ADDP4
INDIRI4
SUBI4
ASGNI4
line 611
;611:	if (pi->barrelSpinning) {
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRI4
CNSTI4 0
EQI4 $272
line 612
;612:		angle = pi->barrelAngle + delta * SPIN_SPEED;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 1096
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CVIF4 4
CNSTF4 1063675494
MULF4
ADDF4
ASGNF4
line 613
;613:	} else {
ADDRGP4 $273
JUMPV
LABELV $272
line 614
;614:		if (delta > COAST_TIME) {
ADDRLP4 4
INDIRI4
CNSTI4 1000
LEI4 $274
line 615
;615:			delta = COAST_TIME;
ADDRLP4 4
CNSTI4 1000
ASGNI4
line 616
;616:		}
LABELV $274
line 618
;617:
;618:		speed = 0.5 * (SPIN_SPEED + (float)(COAST_TIME - delta) / COAST_TIME);
ADDRLP4 12
CNSTI4 1000
ADDRLP4 4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 981668463
MULF4
CNSTF4 1063675494
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 619
;619:		angle = pi->barrelAngle + delta * speed;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 1096
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 620
;620:	}
LABELV $273
line 622
;621:
;622:	torsoAnim = pi->torsoAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1048
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 623
;623:	if (torsoAnim == TORSO_ATTACK2) {
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $276
line 624
;624:		torsoAnim = TORSO_ATTACK;
ADDRLP4 0
CNSTI4 7
ASGNI4
line 625
;625:	}
LABELV $276
line 626
;626:	if (pi->barrelSpinning == !(torsoAnim == TORSO_ATTACK)) {
ADDRLP4 0
INDIRI4
CNSTI4 7
EQI4 $281
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRGP4 $282
JUMPV
LABELV $281
ADDRLP4 16
CNSTI4 0
ASGNI4
LABELV $282
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $278
line 627
;627:		pi->barrelTime     = dp_realtime;
ADDRFP4 0
INDIRP4
CNSTI4 1100
ADDP4
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 628
;628:		pi->barrelAngle    = AngleMod(angle);
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1096
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 629
;629:		pi->barrelSpinning = !!(torsoAnim == TORSO_ATTACK);
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $284
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $285
JUMPV
LABELV $284
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $285
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 630
;630:	}
LABELV $278
line 632
;631:
;632:	return angle;
ADDRLP4 8
INDIRF4
RETF4
LABELV $271
endproc UI_MachinegunSpinAngle 28 4
data
align 4
LABELV $287
byte 4 3246391296
byte 4 3246391296
byte 4 3250585600
align 4
LABELV $288
byte 4 1098907648
byte 4 1098907648
byte 4 1107296256
export UI_DrawPlayer
code
proc UI_DrawPlayer 1300 28
line 640
;633:}
;634:
;635:/*
;636:===============
;637:UI_DrawPlayer
;638:===============
;639:*/
;640:void UI_DrawPlayer(float x, float y, float w, float h, playerInfo_t* pi, int time) {
line 650
;641:	refdef_t    refdef;
;642:	refEntity_t legs;
;643:	refEntity_t torso;
;644:	refEntity_t head;
;645:	refEntity_t gun;
;646:	refEntity_t barrel;
;647:	refEntity_t flash;
;648:	vec3_t      origin;
;649:	int         renderfx;
;650:	vec3_t      mins = {-16, -16, -24};
ADDRLP4 1084
ADDRGP4 $287
INDIRB
ASGNB 12
line 651
;651:	vec3_t      maxs = {16, 16, 32};
ADDRLP4 1096
ADDRGP4 $288
INDIRB
ASGNB 12
line 655
;652:	float       len;
;653:	float       xx;
;654:
;655:	if (!pi->legsModel || !pi->torsoModel || !pi->headModel || !pi->animations[0].numFrames) {
ADDRLP4 1256
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 1256
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $293
ADDRLP4 1256
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 0
EQI4 $293
ADDRLP4 1256
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
CNSTI4 0
EQI4 $293
ADDRLP4 1256
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
NEI4 $289
LABELV $293
line 656
;656:		return;
ADDRGP4 $286
JUMPV
LABELV $289
line 659
;657:	}
;658:
;659:	dp_realtime = time;
ADDRGP4 dp_realtime
ADDRFP4 20
INDIRI4
ASGNI4
line 661
;660:
;661:	if (pi->pendingWeapon != WP_PENDING && dp_realtime > pi->weaponTimer) {
ADDRLP4 1260
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 1260
INDIRP4
CNSTI4 1060
ADDP4
INDIRI4
CNSTI4 11
EQI4 $294
ADDRGP4 dp_realtime
INDIRI4
ADDRLP4 1260
INDIRP4
CNSTI4 1064
ADDP4
INDIRI4
LEI4 $294
line 662
;662:		pi->weapon        = pi->pendingWeapon;
ADDRLP4 1264
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 1264
INDIRP4
CNSTI4 1052
ADDP4
ADDRLP4 1264
INDIRP4
CNSTI4 1060
ADDP4
INDIRI4
ASGNI4
line 663
;663:		pi->lastWeapon    = pi->pendingWeapon;
ADDRLP4 1268
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 1268
INDIRP4
CNSTI4 1056
ADDP4
ADDRLP4 1268
INDIRP4
CNSTI4 1060
ADDP4
INDIRI4
ASGNI4
line 664
;664:		pi->pendingWeapon = WP_PENDING;
ADDRFP4 16
INDIRP4
CNSTI4 1060
ADDP4
CNSTI4 11
ASGNI4
line 665
;665:		pi->weaponTimer   = 0;
ADDRFP4 16
INDIRP4
CNSTI4 1064
ADDP4
CNSTI4 0
ASGNI4
line 666
;666:		if (pi->currentWeapon != pi->weapon) {
ADDRLP4 1272
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 1272
INDIRP4
CNSTI4 1040
ADDP4
INDIRI4
ADDRLP4 1272
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
EQI4 $296
line 667
;667:			trap_S_StartLocalSound(weaponChangeSound, CHAN_LOCAL);
ADDRGP4 weaponChangeSound
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 668
;668:		}
LABELV $296
line 669
;669:	}
LABELV $294
line 671
;670:
;671:	memset(&refdef, 0, sizeof(refdef));
ADDRLP4 292
ARGP4
CNSTI4 0
ARGI4
CNSTI4 368
ARGI4
ADDRGP4 memset
CALLP4
pop
line 672
;672:	memset(&legs, 0, sizeof(legs));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 673
;673:	memset(&torso, 0, sizeof(torso));
ADDRLP4 152
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 674
;674:	memset(&head, 0, sizeof(head));
ADDRLP4 660
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 678
;675:
;676:	// calculate fov from virtual dimensions
;677:	// so it will be resolution-independent
;678:	refdef.fov_x = (int)(w / 640.0f * 90.0f);
ADDRLP4 292+16
ADDRFP4 8
INDIRF4
CNSTF4 1041235968
MULF4
CVFI4 4
CVIF4 4
ASGNF4
line 679
;679:	xx           = w / tan(refdef.fov_x / 360 * M_PI);
ADDRLP4 292+16
INDIRF4
CNSTF4 1007614517
MULF4
ARGF4
ADDRLP4 1264
ADDRGP4 tan
CALLF4
ASGNF4
ADDRLP4 1252
ADDRFP4 8
INDIRF4
ADDRLP4 1264
INDIRF4
DIVF4
ASGNF4
line 680
;680:	refdef.fov_y = atan2(h, xx);
ADDRFP4 12
INDIRF4
ARGF4
ADDRLP4 1252
INDIRF4
ARGF4
ADDRLP4 1268
ADDRGP4 atan2
CALLF4
ASGNF4
ADDRLP4 292+20
ADDRLP4 1268
INDIRF4
ASGNF4
line 681
;681:	refdef.fov_y *= (360 / M_PI);
ADDRLP4 292+20
ADDRLP4 292+20
INDIRF4
CNSTF4 1122316001
MULF4
ASGNF4
line 683
;682:
;683:	UI_AdjustFrom640(&x, &y, &w, &h);
ADDRFP4 0
ARGP4
ADDRFP4 4
ARGP4
ADDRFP4 8
ARGP4
ADDRFP4 12
ARGP4
ADDRGP4 UI_AdjustFrom640
CALLV
pop
line 685
;684:
;685:	y -= jumpHeight;
ADDRFP4 4
ADDRFP4 4
INDIRF4
ADDRGP4 jumpHeight
INDIRF4
SUBF4
ASGNF4
line 687
;686:
;687:	refdef.rdflags = RDF_NOWORLDMODEL;
ADDRLP4 292+76
CNSTI4 1
ASGNI4
line 689
;688:
;689:	AxisClear(refdef.viewaxis);
ADDRLP4 292+36
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 691
;690:
;691:	refdef.x      = x;
ADDRLP4 292
ADDRFP4 0
INDIRF4
CVFI4 4
ASGNI4
line 692
;692:	refdef.y      = y;
ADDRLP4 292+4
ADDRFP4 4
INDIRF4
CVFI4 4
ASGNI4
line 693
;693:	refdef.width  = w;
ADDRLP4 292+8
ADDRFP4 8
INDIRF4
CVFI4 4
ASGNI4
line 694
;694:	refdef.height = h;
ADDRLP4 292+12
ADDRFP4 12
INDIRF4
CVFI4 4
ASGNI4
line 697
;695:
;696:	// calculate distance so the player nearly fills the box
;697:	len       = 0.7 * (maxs[2] - mins[2]);
ADDRLP4 1248
ADDRLP4 1096+8
INDIRF4
ADDRLP4 1084+8
INDIRF4
SUBF4
CNSTF4 1060320051
MULF4
ASGNF4
line 698
;698:	origin[0] = len / tan(DEG2RAD(refdef.fov_x) * 0.5);
ADDRLP4 292+16
INDIRF4
CNSTF4 1007614517
MULF4
ARGF4
ADDRLP4 1272
ADDRGP4 tan
CALLF4
ASGNF4
ADDRLP4 140
ADDRLP4 1248
INDIRF4
ADDRLP4 1272
INDIRF4
DIVF4
ASGNF4
line 699
;699:	origin[1] = 0.5 * (mins[1] + maxs[1]);
ADDRLP4 140+4
ADDRLP4 1084+4
INDIRF4
ADDRLP4 1096+4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 700
;700:	origin[2] = -0.5 * (mins[2] + maxs[2]);
ADDRLP4 140+8
ADDRLP4 1084+8
INDIRF4
ADDRLP4 1096+8
INDIRF4
ADDF4
CNSTF4 3204448256
MULF4
ASGNF4
line 702
;701:
;702:	refdef.time = dp_realtime;
ADDRLP4 292+72
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 704
;703:
;704:	trap_R_ClearScene();
ADDRGP4 trap_R_ClearScene
CALLV
pop
line 707
;705:
;706:	// get the rotation information
;707:	UI_PlayerAngles(pi, legs.axis, torso.axis, head.axis);
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRLP4 152+28
ARGP4
ADDRLP4 660+28
ARGP4
ADDRGP4 UI_PlayerAngles
CALLV
pop
line 710
;708:
;709:	// get the animation state (after rotation, to allow feet shuffle)
;710:	UI_PlayerAnimation(pi, &legs.oldframe, &legs.frame, &legs.backlerp, &torso.oldframe, &torso.frame, &torso.backlerp);
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 0+96
ARGP4
ADDRLP4 0+80
ARGP4
ADDRLP4 0+100
ARGP4
ADDRLP4 152+96
ARGP4
ADDRLP4 152+80
ARGP4
ADDRLP4 152+100
ARGP4
ADDRGP4 UI_PlayerAnimation
CALLV
pop
line 712
;711:
;712:	renderfx = RF_LIGHTING_ORIGIN | RF_NOSHADOW;
ADDRLP4 800
CNSTI4 192
ASGNI4
line 717
;713:
;714:	//
;715:	// add the legs
;716:	//
;717:	legs.hModel     = pi->legsModel;
ADDRLP4 0+8
ADDRFP4 16
INDIRP4
INDIRI4
ASGNI4
line 718
;718:	legs.customSkin = pi->legsSkin;
ADDRLP4 0+108
ADDRFP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 720
;719:	// for colored skins
;720:	memset(legs.shaderRGBA, 255, sizeof(legs.shaderRGBA));
ADDRLP4 0+116
ARGP4
CNSTI4 255
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 memset
CALLP4
pop
line 722
;721:
;722:	VectorCopy(origin, legs.origin);
ADDRLP4 0+68
ADDRLP4 140
INDIRB
ASGNB 12
line 724
;723:
;724:	VectorCopy(origin, legs.lightingOrigin);
ADDRLP4 0+12
ADDRLP4 140
INDIRB
ASGNB 12
line 725
;725:	legs.renderfx = renderfx;
ADDRLP4 0+4
ADDRLP4 800
INDIRI4
ASGNI4
line 726
;726:	VectorCopy(legs.origin, legs.oldorigin);
ADDRLP4 0+84
ADDRLP4 0+68
INDIRB
ASGNB 12
line 728
;727:
;728:	trap_R_AddRefEntityToScene(&legs);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 730
;729:
;730:	if (!legs.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $335
line 731
;731:		return;
ADDRGP4 $286
JUMPV
LABELV $335
line 737
;732:	}
;733:
;734:	//
;735:	// add the torso
;736:	//
;737:	torso.hModel = pi->torsoModel;
ADDRLP4 152+8
ADDRFP4 16
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ASGNI4
line 738
;738:	if (!torso.hModel) {
ADDRLP4 152+8
INDIRI4
CNSTI4 0
NEI4 $339
line 739
;739:		return;
ADDRGP4 $286
JUMPV
LABELV $339
line 742
;740:	}
;741:
;742:	torso.customSkin = pi->torsoSkin;
ADDRLP4 152+108
ADDRFP4 16
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ASGNI4
line 744
;743:	// for colored skins
;744:	memset(torso.shaderRGBA, 255, sizeof(torso.shaderRGBA));
ADDRLP4 152+116
ARGP4
CNSTI4 255
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 memset
CALLP4
pop
line 746
;745:
;746:	VectorCopy(origin, torso.lightingOrigin);
ADDRLP4 152+12
ADDRLP4 140
INDIRB
ASGNB 12
line 748
;747:
;748:	UI_PositionRotatedEntityOnTag(&torso, &legs, pi->legsModel, "tag_torso");
ADDRLP4 152
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 16
INDIRP4
INDIRI4
ARGI4
ADDRGP4 $346
ARGP4
ADDRGP4 UI_PositionRotatedEntityOnTag
CALLV
pop
line 750
;749:
;750:	torso.renderfx = renderfx;
ADDRLP4 152+4
ADDRLP4 800
INDIRI4
ASGNI4
line 752
;751:
;752:	trap_R_AddRefEntityToScene(&torso);
ADDRLP4 152
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 757
;753:
;754:	//
;755:	// add the head
;756:	//
;757:	head.hModel = pi->headModel;
ADDRLP4 660+8
ADDRFP4 16
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ASGNI4
line 758
;758:	if (!head.hModel) {
ADDRLP4 660+8
INDIRI4
CNSTI4 0
NEI4 $349
line 759
;759:		return;
ADDRGP4 $286
JUMPV
LABELV $349
line 761
;760:	}
;761:	head.customSkin = pi->headSkin;
ADDRLP4 660+108
ADDRFP4 16
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ASGNI4
line 763
;762:	// for colored skins
;763:	memset(head.shaderRGBA, 255, sizeof(head.shaderRGBA));
ADDRLP4 660+116
ARGP4
CNSTI4 255
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 memset
CALLP4
pop
line 765
;764:
;765:	VectorCopy(origin, head.lightingOrigin);
ADDRLP4 660+12
ADDRLP4 140
INDIRB
ASGNB 12
line 767
;766:
;767:	UI_PositionRotatedEntityOnTag(&head, &torso, pi->torsoModel, "tag_head");
ADDRLP4 660
ARGP4
ADDRLP4 152
ARGP4
ADDRFP4 16
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ARGI4
ADDRGP4 $356
ARGP4
ADDRGP4 UI_PositionRotatedEntityOnTag
CALLV
pop
line 769
;768:
;769:	head.renderfx = renderfx;
ADDRLP4 660+4
ADDRLP4 800
INDIRI4
ASGNI4
line 771
;770:
;771:	trap_R_AddRefEntityToScene(&head);
ADDRLP4 660
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 776
;772:
;773:	//
;774:	// add the gun
;775:	//
;776:	if (pi->currentWeapon != WP_NONE) {
ADDRFP4 16
INDIRP4
CNSTI4 1040
ADDP4
INDIRI4
CNSTI4 0
EQI4 $358
line 777
;777:		memset(&gun, 0, sizeof(gun));
ADDRLP4 804
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 778
;778:		gun.hModel = pi->weaponModel;
ADDRLP4 804+8
ADDRFP4 16
INDIRP4
CNSTI4 988
ADDP4
INDIRI4
ASGNI4
line 779
;779:		VectorCopy(origin, gun.lightingOrigin);
ADDRLP4 804+12
ADDRLP4 140
INDIRB
ASGNB 12
line 780
;780:		UI_PositionEntityOnTag(&gun, &torso, pi->torsoModel, "tag_weapon");
ADDRLP4 804
ARGP4
ADDRLP4 152
ARGP4
ADDRFP4 16
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ARGI4
ADDRGP4 $362
ARGP4
ADDRGP4 UI_PositionEntityOnTag
CALLV
pop
line 781
;781:		gun.renderfx = renderfx;
ADDRLP4 804+4
ADDRLP4 800
INDIRI4
ASGNI4
line 782
;782:		trap_R_AddRefEntityToScene(&gun);
ADDRLP4 804
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 783
;783:	}
LABELV $358
line 788
;784:
;785:	//
;786:	// add the spinning barrel
;787:	//
;788:	if (pi->realWeapon == WP_MACHINEGUN || pi->realWeapon == WP_GAUNTLET || pi->realWeapon == WP_BFG) {
ADDRLP4 1276
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 1276
INDIRP4
CNSTI4 1104
ADDP4
INDIRI4
CNSTI4 2
EQI4 $367
ADDRLP4 1276
INDIRP4
CNSTI4 1104
ADDP4
INDIRI4
CNSTI4 1
EQI4 $367
ADDRLP4 1276
INDIRP4
CNSTI4 1104
ADDP4
INDIRI4
CNSTI4 9
NEI4 $364
LABELV $367
line 791
;789:		vec3_t angles;
;790:
;791:		memset(&barrel, 0, sizeof(barrel));
ADDRLP4 944
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 792
;792:		VectorCopy(origin, barrel.lightingOrigin);
ADDRLP4 944+12
ADDRLP4 140
INDIRB
ASGNB 12
line 793
;793:		barrel.renderfx = renderfx;
ADDRLP4 944+4
ADDRLP4 800
INDIRI4
ASGNI4
line 795
;794:
;795:		barrel.hModel = pi->barrelModel;
ADDRLP4 944+8
ADDRFP4 16
INDIRP4
CNSTI4 992
ADDP4
INDIRI4
ASGNI4
line 796
;796:		angles[YAW]   = 0;
ADDRLP4 1280+4
CNSTF4 0
ASGNF4
line 797
;797:		angles[PITCH] = 0;
ADDRLP4 1280
CNSTF4 0
ASGNF4
line 798
;798:		angles[ROLL]  = UI_MachinegunSpinAngle(pi);
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 1292
ADDRGP4 UI_MachinegunSpinAngle
CALLF4
ASGNF4
ADDRLP4 1280+8
ADDRLP4 1292
INDIRF4
ASGNF4
line 799
;799:		if (pi->realWeapon == WP_GAUNTLET || pi->realWeapon == WP_BFG) {
ADDRLP4 1296
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 1296
INDIRP4
CNSTI4 1104
ADDP4
INDIRI4
CNSTI4 1
EQI4 $375
ADDRLP4 1296
INDIRP4
CNSTI4 1104
ADDP4
INDIRI4
CNSTI4 9
NEI4 $373
LABELV $375
line 800
;800:			angles[PITCH] = angles[ROLL];
ADDRLP4 1280
ADDRLP4 1280+8
INDIRF4
ASGNF4
line 801
;801:			angles[ROLL]  = 0;
ADDRLP4 1280+8
CNSTF4 0
ASGNF4
line 802
;802:		}
LABELV $373
line 803
;803:		AnglesToAxis(angles, barrel.axis);
ADDRLP4 1280
ARGP4
ADDRLP4 944+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 805
;804:
;805:		UI_PositionRotatedEntityOnTag(&barrel, &gun, pi->weaponModel, "tag_barrel");
ADDRLP4 944
ARGP4
ADDRLP4 804
ARGP4
ADDRFP4 16
INDIRP4
CNSTI4 988
ADDP4
INDIRI4
ARGI4
ADDRGP4 $379
ARGP4
ADDRGP4 UI_PositionRotatedEntityOnTag
CALLV
pop
line 807
;806:
;807:		trap_R_AddRefEntityToScene(&barrel);
ADDRLP4 944
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 808
;808:	}
LABELV $364
line 813
;809:
;810:	//
;811:	// add muzzle flash
;812:	//
;813:	if (dp_realtime <= pi->muzzleFlashTime && pi->currentWeapon != WP_NONE) {
ADDRLP4 1280
ADDRFP4 16
INDIRP4
ASGNP4
ADDRGP4 dp_realtime
INDIRI4
ADDRLP4 1280
INDIRP4
CNSTI4 1012
ADDP4
INDIRI4
GTI4 $380
ADDRLP4 1280
INDIRP4
CNSTI4 1040
ADDP4
INDIRI4
CNSTI4 0
EQI4 $380
line 814
;814:		if (pi->flashModel) {
ADDRFP4 16
INDIRP4
CNSTI4 996
ADDP4
INDIRI4
CNSTI4 0
EQI4 $382
line 815
;815:			memset(&flash, 0, sizeof(flash));
ADDRLP4 1108
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 816
;816:			flash.hModel = pi->flashModel;
ADDRLP4 1108+8
ADDRFP4 16
INDIRP4
CNSTI4 996
ADDP4
INDIRI4
ASGNI4
line 817
;817:			VectorCopy(origin, flash.lightingOrigin);
ADDRLP4 1108+12
ADDRLP4 140
INDIRB
ASGNB 12
line 818
;818:			UI_PositionEntityOnTag(&flash, &gun, pi->weaponModel, "tag_flash");
ADDRLP4 1108
ARGP4
ADDRLP4 804
ARGP4
ADDRFP4 16
INDIRP4
CNSTI4 988
ADDP4
INDIRI4
ARGI4
ADDRGP4 $386
ARGP4
ADDRGP4 UI_PositionEntityOnTag
CALLV
pop
line 819
;819:			flash.renderfx = renderfx;
ADDRLP4 1108+4
ADDRLP4 800
INDIRI4
ASGNI4
line 820
;820:			trap_R_AddRefEntityToScene(&flash);
ADDRLP4 1108
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 821
;821:		}
LABELV $382
line 824
;822:
;823:		// make a dlight for the flash
;824:		if (pi->flashDlightColor[0] || pi->flashDlightColor[1] || pi->flashDlightColor[2]) {
ADDRLP4 1284
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 1284
INDIRP4
CNSTI4 1000
ADDP4
INDIRF4
CNSTF4 0
NEF4 $391
ADDRLP4 1284
INDIRP4
CNSTI4 1004
ADDP4
INDIRF4
CNSTF4 0
NEF4 $391
ADDRLP4 1284
INDIRP4
CNSTI4 1008
ADDP4
INDIRF4
CNSTF4 0
EQF4 $388
LABELV $391
line 825
;825:			trap_R_AddLightToScene(flash.origin, 200 + (rand() & 31), pi->flashDlightColor[0], pi->flashDlightColor[1], pi->flashDlightColor[2]);
ADDRLP4 1288
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1108+68
ARGP4
ADDRLP4 1288
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 200
ADDI4
CVIF4 4
ARGF4
ADDRLP4 1292
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 1292
INDIRP4
CNSTI4 1000
ADDP4
INDIRF4
ARGF4
ADDRLP4 1292
INDIRP4
CNSTI4 1004
ADDP4
INDIRF4
ARGF4
ADDRLP4 1292
INDIRP4
CNSTI4 1008
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 826
;826:		}
LABELV $388
line 827
;827:	}
LABELV $380
line 832
;828:
;829:	//
;830:	// add the chat icon
;831:	//
;832:	if (pi->chat) {
ADDRFP4 16
INDIRP4
CNSTI4 1084
ADDP4
INDIRI4
CNSTI4 0
EQI4 $393
line 833
;833:		UI_PlayerFloatSprite(pi, origin, trap_R_RegisterShaderNoMip("sprites/balloon3"));
ADDRGP4 $395
ARGP4
ADDRLP4 1284
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 1284
INDIRI4
ARGI4
ADDRGP4 UI_PlayerFloatSprite
CALLV
pop
line 834
;834:	}
LABELV $393
line 839
;835:
;836:	//
;837:	// add an accent light
;838:	//
;839:	origin[0] -= 100;  // + = behind, - = in front
ADDRLP4 140
ADDRLP4 140
INDIRF4
CNSTF4 1120403456
SUBF4
ASGNF4
line 840
;840:	origin[1] += 100;  // + = left, - = right
ADDRLP4 140+4
ADDRLP4 140+4
INDIRF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 841
;841:	origin[2] += 100;  // + = above, - = below
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 842
;842:	trap_R_AddLightToScene(origin, 500, 1.0, 1.0, 1.0);
ADDRLP4 140
ARGP4
CNSTF4 1140457472
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 844
;843:
;844:	origin[0] -= 100;
ADDRLP4 140
ADDRLP4 140
INDIRF4
CNSTF4 1120403456
SUBF4
ASGNF4
line 845
;845:	origin[1] -= 100;
ADDRLP4 140+4
ADDRLP4 140+4
INDIRF4
CNSTF4 1120403456
SUBF4
ASGNF4
line 846
;846:	origin[2] -= 100;
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
CNSTF4 1120403456
SUBF4
ASGNF4
line 847
;847:	trap_R_AddLightToScene(origin, 500, 1.0, 0.0, 0.0);
ADDRLP4 140
ARGP4
CNSTF4 1140457472
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 849
;848:
;849:	trap_R_RenderScene(&refdef);
ADDRLP4 292
ARGP4
ADDRGP4 trap_R_RenderScene
CALLV
pop
line 850
;850:}
LABELV $286
endproc UI_DrawPlayer 1300 28
proc UI_RegisterClientSkin 80 20
line 857
;851:
;852:/*
;853:==========================
;854:UI_RegisterClientSkin
;855:==========================
;856:*/
;857:static qboolean UI_RegisterClientSkin(playerInfo_t* pi, const char* modelName, const char* skinName) {
line 860
;858:	char filename[MAX_QPATH];
;859:
;860:	Com_sprintf(filename, sizeof(filename), "models/players/%s/lower_%s.skin", modelName, skinName);
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $401
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 861
;861:	pi->legsSkin = trap_R_RegisterSkin(filename);
ADDRLP4 0
ARGP4
ADDRLP4 64
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 863
;862:
;863:	Com_sprintf(filename, sizeof(filename), "models/players/%s/upper_%s.skin", modelName, skinName);
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $402
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 864
;864:	pi->torsoSkin = trap_R_RegisterSkin(filename);
ADDRLP4 0
ARGP4
ADDRLP4 68
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68
INDIRI4
ASGNI4
line 866
;865:
;866:	Com_sprintf(filename, sizeof(filename), "models/players/%s/head_%s.skin", modelName, skinName);
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $403
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 867
;867:	pi->headSkin = trap_R_RegisterSkin(filename);
ADDRLP4 0
ARGP4
ADDRLP4 72
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 869
;868:
;869:	if (!pi->legsSkin || !pi->torsoSkin || !pi->headSkin) {
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $407
ADDRLP4 76
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CNSTI4 0
EQI4 $407
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
NEI4 $404
LABELV $407
line 870
;870:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $400
JUMPV
LABELV $404
line 873
;871:	}
;872:
;873:	return qtrue;
CNSTI4 1
RETI4
LABELV $400
endproc UI_RegisterClientSkin 80 20
proc UI_ParseAnimationFile 20068 12
line 881
;874:}
;875:
;876:/*
;877:======================
;878:UI_ParseAnimationFile
;879:======================
;880:*/
;881:static qboolean UI_ParseAnimationFile(const char* filename, animation_t* animations) {
line 891
;882:	char *       text_p, *prev;
;883:	int          len;
;884:	int          i;
;885:	char*        token;
;886:	float        fps;
;887:	int          skip;
;888:	char         text[20000];
;889:	fileHandle_t f;
;890:
;891:	memset(animations, 0, sizeof(animation_t) * MAX_ANIMATIONS);
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 868
ARGI4
ADDRGP4 memset
CALLP4
pop
line 894
;892:
;893:	// load the file
;894:	len = trap_FS_FOpenFile(filename, &f, FS_READ);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 20032
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 20032
INDIRI4
ASGNI4
line 895
;895:	if (len <= 0) {
ADDRLP4 24
INDIRI4
CNSTI4 0
GTI4 $409
line 896
;896:		if (f != FS_INVALID_HANDLE) {
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $411
line 897
;897:			trap_FS_FCloseFile(f);
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 898
;898:		}
LABELV $411
line 899
;899:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $408
JUMPV
LABELV $409
line 901
;900:	}
;901:	if (len >= (sizeof(text) - 1)) {
ADDRLP4 24
INDIRI4
CVIU4 4
CNSTU4 19999
LTU4 $413
line 902
;902:		Com_Printf("File %s too long\n", filename);
ADDRGP4 $415
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 903
;903:		trap_FS_FCloseFile(f);
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 904
;904:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $408
JUMPV
LABELV $413
line 906
;905:	}
;906:	trap_FS_Read(text, len, f);
ADDRLP4 32
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 907
;907:	text[len] = '\0';
ADDRLP4 24
INDIRI4
ADDRLP4 32
ADDP4
CNSTI1 0
ASGNI1
line 908
;908:	trap_FS_FCloseFile(f);
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 911
;909:
;910:	// parse the text
;911:	text_p = text;
ADDRLP4 8
ADDRLP4 32
ASGNP4
line 912
;912:	skip   = 0;  // quite the compiler warning
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 $417
JUMPV
LABELV $416
line 915
;913:
;914:	// read optional parameters
;915:	while (1) {
line 916
;916:		prev  = text_p;  // so we can unget
ADDRLP4 16
ADDRLP4 8
INDIRP4
ASGNP4
line 917
;917:		token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20036
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20036
INDIRP4
ASGNP4
line 918
;918:		if (!token[0]) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $419
line 919
;919:			break;
ADDRGP4 $418
JUMPV
LABELV $419
line 921
;920:		}
;921:		if (!Q_stricmp(token, "footsteps")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $423
ARGP4
ADDRLP4 20040
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20040
INDIRI4
CNSTI4 0
NEI4 $421
line 922
;922:			token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20044
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20044
INDIRP4
ASGNP4
line 923
;923:			if (!token[0]) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $417
line 924
;924:				break;
ADDRGP4 $418
JUMPV
line 926
;925:			}
;926:			continue;
LABELV $421
line 927
;927:		} else if (!Q_stricmp(token, "headoffset")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $428
ARGP4
ADDRLP4 20044
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20044
INDIRI4
CNSTI4 0
NEI4 $426
line 928
;928:			for (i = 0; i < 3; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $429
line 929
;929:				token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20048
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20048
INDIRP4
ASGNP4
line 930
;930:				if (!token[0]) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $433
line 931
;931:					break;
ADDRGP4 $417
JUMPV
LABELV $433
line 933
;932:				}
;933:			}
LABELV $430
line 928
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $429
line 934
;934:			continue;
ADDRGP4 $417
JUMPV
LABELV $426
line 935
;935:		} else if (!Q_stricmp(token, "sex")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $437
ARGP4
ADDRLP4 20048
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20048
INDIRI4
CNSTI4 0
NEI4 $435
line 936
;936:			token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20052
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20052
INDIRP4
ASGNP4
line 937
;937:			if (!token[0]) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $417
line 938
;938:				break;
ADDRGP4 $418
JUMPV
line 940
;939:			}
;940:			continue;
LABELV $435
line 944
;941:		}
;942:
;943:		// if it is a number, start parsing animations
;944:		if (token[0] >= '0' && token[0] <= '9') {
ADDRLP4 20052
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 20052
INDIRI4
CNSTI4 48
LTI4 $440
ADDRLP4 20052
INDIRI4
CNSTI4 57
GTI4 $440
line 945
;945:			text_p = prev;  // unget the token
ADDRLP4 8
ADDRLP4 16
INDIRP4
ASGNP4
line 946
;946:			break;
ADDRGP4 $418
JUMPV
LABELV $440
line 949
;947:		}
;948:
;949:		Com_Printf("unknown token '%s' in %s\n", token, filename);
ADDRGP4 $442
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 950
;950:	}
LABELV $417
line 915
ADDRGP4 $416
JUMPV
LABELV $418
line 953
;951:
;952:	// read information for each frame
;953:	for (i = 0; i < MAX_ANIMATIONS; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $443
line 955
;954:
;955:		token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20036
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20036
INDIRP4
ASGNP4
line 956
;956:		if (!token[0]) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $447
line 957
;957:			if (i >= TORSO_GETFLAG && i <= TORSO_NEGATIVE) {
ADDRLP4 4
INDIRI4
CNSTI4 25
LTI4 $445
ADDRLP4 4
INDIRI4
CNSTI4 30
GTI4 $445
line 958
;958:				animations[i].firstFrame  = animations[TORSO_GESTURE].firstFrame;
ADDRLP4 20044
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRLP4 20044
INDIRP4
ADDP4
ADDRLP4 20044
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 959
;959:				animations[i].frameLerp   = animations[TORSO_GESTURE].frameLerp;
ADDRLP4 20048
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRLP4 20048
INDIRP4
ADDP4
CNSTI4 12
ADDP4
ADDRLP4 20048
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ASGNI4
line 960
;960:				animations[i].initialLerp = animations[TORSO_GESTURE].initialLerp;
ADDRLP4 20052
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRLP4 20052
INDIRP4
ADDP4
CNSTI4 16
ADDP4
ADDRLP4 20052
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 961
;961:				animations[i].loopFrames  = animations[TORSO_GESTURE].loopFrames;
ADDRLP4 20056
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRLP4 20056
INDIRP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 20056
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
ASGNI4
line 962
;962:				animations[i].numFrames   = animations[TORSO_GESTURE].numFrames;
ADDRLP4 20060
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRLP4 20060
INDIRP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 20060
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ASGNI4
line 963
;963:				animations[i].reversed    = qfalse;
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 20
ADDP4
CNSTI4 0
ASGNI4
line 964
;964:				animations[i].flipflop    = qfalse;
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 24
ADDP4
CNSTI4 0
ASGNI4
line 965
;965:				continue;
ADDRGP4 $444
JUMPV
line 967
;966:			}
;967:			break;
LABELV $447
line 969
;968:		}
;969:		animations[i].firstFrame = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20040
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRFP4 4
INDIRP4
ADDP4
ADDRLP4 20040
INDIRI4
ASGNI4
line 971
;970:		// leg only frames are adjusted to not count the upper body only frames
;971:		if (i == LEGS_WALKCR) {
ADDRLP4 4
INDIRI4
CNSTI4 13
NEI4 $451
line 972
;972:			skip = animations[LEGS_WALKCR].firstFrame - animations[TORSO_GESTURE].firstFrame;
ADDRLP4 20044
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 20044
INDIRP4
CNSTI4 364
ADDP4
INDIRI4
ADDRLP4 20044
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
SUBI4
ASGNI4
line 973
;973:		}
LABELV $451
line 974
;974:		if (i >= LEGS_WALKCR) {
ADDRLP4 4
INDIRI4
CNSTI4 13
LTI4 $453
line 975
;975:			animations[i].firstFrame -= skip;
ADDRLP4 20044
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRFP4 4
INDIRP4
ADDP4
ASGNP4
ADDRLP4 20044
INDIRP4
ADDRLP4 20044
INDIRP4
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
ASGNI4
line 976
;976:		}
LABELV $453
line 978
;977:
;978:		token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20044
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20044
INDIRP4
ASGNP4
line 979
;979:		if (!token[0]) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $455
line 980
;980:			break;
ADDRGP4 $445
JUMPV
LABELV $455
line 982
;981:		}
;982:		animations[i].numFrames = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20048
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 20048
INDIRI4
ASGNI4
line 984
;983:
;984:		token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20052
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20052
INDIRP4
ASGNP4
line 985
;985:		if (!token[0]) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $457
line 986
;986:			break;
ADDRGP4 $445
JUMPV
LABELV $457
line 988
;987:		}
;988:		animations[i].loopFrames = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20056
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 20056
INDIRI4
ASGNI4
line 990
;989:
;990:		token = COM_Parse(&text_p);
ADDRLP4 8
ARGP4
ADDRLP4 20060
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20060
INDIRP4
ASGNP4
line 991
;991:		if (!token[0]) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $459
line 992
;992:			break;
ADDRGP4 $445
JUMPV
LABELV $459
line 994
;993:		}
;994:		fps = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20064
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 20064
INDIRF4
ASGNF4
line 995
;995:		if (fps == 0) {
ADDRLP4 12
INDIRF4
CNSTF4 0
NEF4 $461
line 996
;996:			fps = 1;
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
line 997
;997:		}
LABELV $461
line 998
;998:		animations[i].frameLerp   = 1000 / fps;
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 12
ADDP4
CNSTF4 1148846080
ADDRLP4 12
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 999
;999:		animations[i].initialLerp = 1000 / fps;
ADDRLP4 4
INDIRI4
CNSTI4 28
MULI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 16
ADDP4
CNSTF4 1148846080
ADDRLP4 12
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 1000
;1000:	}
LABELV $444
line 953
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 31
LTI4 $443
LABELV $445
line 1002
;1001:
;1002:	if (i != MAX_ANIMATIONS) {
ADDRLP4 4
INDIRI4
CNSTI4 31
EQI4 $463
line 1003
;1003:		Com_Printf("Error parsing animation file: %s\n", filename);
ADDRGP4 $465
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 1004
;1004:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $408
JUMPV
LABELV $463
line 1007
;1005:	}
;1006:
;1007:	return qtrue;
CNSTI4 1
RETI4
LABELV $408
endproc UI_ParseAnimationFile 20068 12
export UI_RegisterClientModelname
proc UI_RegisterClientModelname 220 16
line 1015
;1008:}
;1009:
;1010:/*
;1011:==========================
;1012:UI_RegisterClientModelname
;1013:==========================
;1014:*/
;1015:qboolean UI_RegisterClientModelname(playerInfo_t* pi, const char* modelSkinName) {
line 1021
;1016:	char  modelName[MAX_QPATH];
;1017:	char  skinName[MAX_QPATH];
;1018:	char  filename[MAX_QPATH];
;1019:	char* slash;
;1020:
;1021:	pi->torsoModel = 0;
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTI4 0
ASGNI4
line 1022
;1022:	pi->headModel  = 0;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTI4 0
ASGNI4
line 1024
;1023:
;1024:	if (!modelSkinName[0]) {
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $467
line 1025
;1025:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $466
JUMPV
LABELV $467
line 1028
;1026:	}
;1027:
;1028:	Q_strncpyz(modelName, modelSkinName, sizeof(modelName));
ADDRLP4 64
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1030
;1029:
;1030:	slash = strchr(modelName, '/');
ADDRLP4 64
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 196
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 192
ADDRLP4 196
INDIRP4
ASGNP4
line 1031
;1031:	if (!slash) {
ADDRLP4 192
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $469
line 1033
;1032:		// modelName did not include a skin name
;1033:		Q_strncpyz(skinName, "default", sizeof(skinName));
ADDRLP4 128
ARGP4
ADDRGP4 $471
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1034
;1034:	} else {
ADDRGP4 $470
JUMPV
LABELV $469
line 1035
;1035:		Q_strncpyz(skinName, slash + 1, sizeof(skinName));
ADDRLP4 128
ARGP4
ADDRLP4 192
INDIRP4
CNSTI4 1
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1037
;1036:		// truncate modelName
;1037:		*slash = '\0';
ADDRLP4 192
INDIRP4
CNSTI1 0
ASGNI1
line 1038
;1038:	}
LABELV $470
line 1042
;1039:
;1040:	// load cmodels before models so filecache works
;1041:
;1042:	Com_sprintf(filename, sizeof(filename), "models/players/%s/lower.md3", modelName);
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $472
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 1043
;1043:	pi->legsModel = trap_R_RegisterModel(filename);
ADDRLP4 0
ARGP4
ADDRLP4 200
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 200
INDIRI4
ASGNI4
line 1044
;1044:	if (!pi->legsModel) {
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $473
line 1045
;1045:		Com_Printf("Failed to load model file %s\n", filename);
ADDRGP4 $475
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 1046
;1046:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $466
JUMPV
LABELV $473
line 1049
;1047:	}
;1048:
;1049:	Com_sprintf(filename, sizeof(filename), "models/players/%s/upper.md3", modelName);
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $476
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 1050
;1050:	pi->torsoModel = trap_R_RegisterModel(filename);
ADDRLP4 0
ARGP4
ADDRLP4 204
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 204
INDIRI4
ASGNI4
line 1051
;1051:	if (!pi->torsoModel) {
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 0
NEI4 $477
line 1052
;1052:		Com_Printf("Failed to load model file %s\n", filename);
ADDRGP4 $475
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 1053
;1053:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $466
JUMPV
LABELV $477
line 1056
;1054:	}
;1055:
;1056:	Com_sprintf(filename, sizeof(filename), "models/players/%s/head.md3", modelName);
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $479
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 1057
;1057:	pi->headModel = trap_R_RegisterModel(filename);
ADDRLP4 0
ARGP4
ADDRLP4 208
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 208
INDIRI4
ASGNI4
line 1058
;1058:	if (!pi->headModel) {
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
CNSTI4 0
NEI4 $480
line 1059
;1059:		Com_Printf("Failed to load model file %s\n", filename);
ADDRGP4 $475
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 1060
;1060:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $466
JUMPV
LABELV $480
line 1064
;1061:	}
;1062:
;1063:	// if any skins failed to load, fall back to default
;1064:	if (!UI_RegisterClientSkin(pi, modelName, skinName)) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 64
ARGP4
ADDRLP4 128
ARGP4
ADDRLP4 212
ADDRGP4 UI_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 0
NEI4 $482
line 1065
;1065:		if (!UI_RegisterClientSkin(pi, modelName, "default")) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 $471
ARGP4
ADDRLP4 216
ADDRGP4 UI_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 216
INDIRI4
CNSTI4 0
NEI4 $484
line 1066
;1066:			Com_Printf("Failed to load skin file: %s : %s\n", modelName, skinName);
ADDRGP4 $486
ARGP4
ADDRLP4 64
ARGP4
ADDRLP4 128
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 1067
;1067:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $466
JUMPV
LABELV $484
line 1069
;1068:		}
;1069:	}
LABELV $482
line 1072
;1070:
;1071:	// load the animations
;1072:	Com_sprintf(filename, sizeof(filename), "models/players/%s/animation.cfg", modelName);
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $487
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 1073
;1073:	if (!UI_ParseAnimationFile(filename, pi->animations)) {
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
ARGP4
ADDRLP4 216
ADDRGP4 UI_ParseAnimationFile
CALLI4
ASGNI4
ADDRLP4 216
INDIRI4
CNSTI4 0
NEI4 $488
line 1074
;1074:		Com_Printf("Failed to load animation file %s\n", filename);
ADDRGP4 $490
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 1075
;1075:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $466
JUMPV
LABELV $488
line 1078
;1076:	}
;1077:
;1078:	return qtrue;
CNSTI4 1
RETI4
LABELV $466
endproc UI_RegisterClientModelname 220 16
export UI_PlayerInfo_SetModel
proc UI_PlayerInfo_SetModel 12 12
line 1086
;1079:}
;1080:
;1081:/*
;1082:===============
;1083:UI_PlayerInfo_SetModel
;1084:===============
;1085:*/
;1086:void UI_PlayerInfo_SetModel(playerInfo_t* pi, const char* model) {
line 1087
;1087:	memset(pi, 0, sizeof(*pi));
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1108
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1088
;1088:	UI_RegisterClientModelname(pi, model);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 UI_RegisterClientModelname
CALLI4
pop
line 1089
;1089:	pi->weapon        = WP_MACHINEGUN;
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
CNSTI4 2
ASGNI4
line 1090
;1090:	pi->currentWeapon = pi->weapon;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 1040
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ASGNI4
line 1091
;1091:	pi->lastWeapon    = pi->weapon;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 1056
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ASGNI4
line 1092
;1092:	pi->pendingWeapon = WP_PENDING;
ADDRFP4 0
INDIRP4
CNSTI4 1060
ADDP4
CNSTI4 11
ASGNI4
line 1093
;1093:	pi->weaponTimer   = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1064
ADDP4
CNSTI4 0
ASGNI4
line 1094
;1094:	pi->chat          = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 1084
ADDP4
CNSTI4 0
ASGNI4
line 1095
;1095:	pi->newModel      = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
CNSTI4 1
ASGNI4
line 1096
;1096:	UI_PlayerInfo_SetWeapon(pi, pi->weapon);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_PlayerInfo_SetWeapon
CALLV
pop
line 1097
;1097:}
LABELV $491
endproc UI_PlayerInfo_SetModel 12 12
export UI_PlayerInfo_SetInfo
proc UI_PlayerInfo_SetInfo 28 8
line 1104
;1098:
;1099:/*
;1100:===============
;1101:UI_PlayerInfo_SetInfo
;1102:===============
;1103:*/
;1104:void UI_PlayerInfo_SetInfo(playerInfo_t* pi, int legsAnim, int torsoAnim, vec3_t viewAngles, vec3_t moveAngles, weapon_t weaponNumber, qboolean chat) {
line 1108
;1105:	int      currentAnim;
;1106:	weapon_t weaponNum;
;1107:
;1108:	pi->chat = chat;
ADDRFP4 0
INDIRP4
CNSTI4 1084
ADDP4
ADDRFP4 24
INDIRI4
ASGNI4
line 1111
;1109:
;1110:	// view angles
;1111:	VectorCopy(viewAngles, pi->viewAngles);
ADDRFP4 0
INDIRP4
CNSTI4 1016
ADDP4
ADDRFP4 12
INDIRP4
INDIRB
ASGNB 12
line 1114
;1112:
;1113:	// move angles
;1114:	VectorCopy(moveAngles, pi->moveAngles);
ADDRFP4 0
INDIRP4
CNSTI4 1028
ADDP4
ADDRFP4 16
INDIRP4
INDIRB
ASGNB 12
line 1116
;1115:
;1116:	if (pi->newModel) {
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
INDIRI4
CNSTI4 0
EQI4 $493
line 1117
;1117:		pi->newModel = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
CNSTI4 0
ASGNI4
line 1119
;1118:
;1119:		jumpHeight          = 0;
ADDRGP4 jumpHeight
CNSTF4 0
ASGNF4
line 1120
;1120:		pi->pendingLegsAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
CNSTI4 0
ASGNI4
line 1121
;1121:		UI_ForceLegsAnim(pi, legsAnim);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 UI_ForceLegsAnim
CALLV
pop
line 1122
;1122:		pi->legs.yawAngle = viewAngles[YAW];
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1123
;1123:		pi->legs.yawing   = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 0
ASGNI4
line 1125
;1124:
;1125:		pi->pendingTorsoAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
CNSTI4 0
ASGNI4
line 1126
;1126:		UI_ForceTorsoAnim(pi, torsoAnim);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 1127
;1127:		pi->torso.yawAngle = viewAngles[YAW];
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1128
;1128:		pi->torso.yawing   = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 0
ASGNI4
line 1130
;1129:
;1130:		if (weaponNumber != WP_PENDING) {
ADDRFP4 20
INDIRI4
CNSTI4 11
EQI4 $492
line 1131
;1131:			pi->weapon        = weaponNumber;
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1132
;1132:			pi->currentWeapon = weaponNumber;
ADDRFP4 0
INDIRP4
CNSTI4 1040
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1133
;1133:			pi->lastWeapon    = weaponNumber;
ADDRFP4 0
INDIRP4
CNSTI4 1056
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1134
;1134:			pi->pendingWeapon = WP_PENDING;
ADDRFP4 0
INDIRP4
CNSTI4 1060
ADDP4
CNSTI4 11
ASGNI4
line 1135
;1135:			pi->weaponTimer   = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1064
ADDP4
CNSTI4 0
ASGNI4
line 1136
;1136:			UI_PlayerInfo_SetWeapon(pi, pi->weapon);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_PlayerInfo_SetWeapon
CALLV
pop
line 1137
;1137:		}
line 1139
;1138:
;1139:		return;
ADDRGP4 $492
JUMPV
LABELV $493
line 1143
;1140:	}
;1141:
;1142:	// weapon
;1143:	if (weaponNumber == WP_PENDING) {
ADDRFP4 20
INDIRI4
CNSTI4 11
NEI4 $497
line 1144
;1144:		pi->pendingWeapon = WP_PENDING;
ADDRFP4 0
INDIRP4
CNSTI4 1060
ADDP4
CNSTI4 11
ASGNI4
line 1145
;1145:		pi->weaponTimer   = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1064
ADDP4
CNSTI4 0
ASGNI4
line 1146
;1146:	} else if (weaponNumber != WP_NONE) {
ADDRGP4 $498
JUMPV
LABELV $497
ADDRFP4 20
INDIRI4
CNSTI4 0
EQI4 $499
line 1147
;1147:		pi->pendingWeapon = weaponNumber;
ADDRFP4 0
INDIRP4
CNSTI4 1060
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1148
;1148:		pi->weaponTimer   = dp_realtime + UI_TIMER_WEAPON_DELAY;
ADDRFP4 0
INDIRP4
CNSTI4 1064
ADDP4
ADDRGP4 dp_realtime
INDIRI4
CNSTI4 250
ADDI4
ASGNI4
line 1149
;1149:	}
LABELV $499
LABELV $498
line 1150
;1150:	weaponNum  = pi->lastWeapon;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1056
ADDP4
INDIRI4
ASGNI4
line 1151
;1151:	pi->weapon = weaponNum;
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 1153
;1152:
;1153:	if (torsoAnim == BOTH_DEATH1 || legsAnim == BOTH_DEATH1) {
ADDRFP4 8
INDIRI4
CNSTI4 0
EQI4 $503
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $501
LABELV $503
line 1154
;1154:		torsoAnim = legsAnim = BOTH_DEATH1;
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRFP4 4
ADDRLP4 8
INDIRI4
ASGNI4
ADDRFP4 8
ADDRLP4 8
INDIRI4
ASGNI4
line 1155
;1155:		pi->weapon = pi->currentWeapon = WP_NONE;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 1040
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 1052
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1156
;1156:		UI_PlayerInfo_SetWeapon(pi, pi->weapon);
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_PlayerInfo_SetWeapon
CALLV
pop
line 1158
;1157:
;1158:		jumpHeight          = 0;
ADDRGP4 jumpHeight
CNSTF4 0
ASGNF4
line 1159
;1159:		pi->pendingLegsAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
CNSTI4 0
ASGNI4
line 1160
;1160:		UI_ForceLegsAnim(pi, legsAnim);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 UI_ForceLegsAnim
CALLV
pop
line 1162
;1161:
;1162:		pi->pendingTorsoAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
CNSTI4 0
ASGNI4
line 1163
;1163:		UI_ForceTorsoAnim(pi, torsoAnim);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 1165
;1164:
;1165:		return;
ADDRGP4 $492
JUMPV
LABELV $501
line 1169
;1166:	}
;1167:
;1168:	// leg animation
;1169:	currentAnim = pi->legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1170
;1170:	if (legsAnim != LEGS_JUMP && (currentAnim == LEGS_JUMP || currentAnim == LEGS_LAND)) {
ADDRFP4 4
INDIRI4
CNSTI4 18
EQI4 $504
ADDRLP4 0
INDIRI4
CNSTI4 18
EQI4 $506
ADDRLP4 0
INDIRI4
CNSTI4 19
NEI4 $504
LABELV $506
line 1171
;1171:		pi->pendingLegsAnim = legsAnim;
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 1172
;1172:	} else if (legsAnim != currentAnim) {
ADDRGP4 $505
JUMPV
LABELV $504
ADDRFP4 4
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $507
line 1173
;1173:		jumpHeight          = 0;
ADDRGP4 jumpHeight
CNSTF4 0
ASGNF4
line 1174
;1174:		pi->pendingLegsAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
CNSTI4 0
ASGNI4
line 1175
;1175:		UI_ForceLegsAnim(pi, legsAnim);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 UI_ForceLegsAnim
CALLV
pop
line 1176
;1176:	}
LABELV $507
LABELV $505
line 1179
;1177:
;1178:	// torso animation
;1179:	if (torsoAnim == TORSO_STAND || torsoAnim == TORSO_STAND2) {
ADDRLP4 12
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 11
EQI4 $511
ADDRLP4 12
INDIRI4
CNSTI4 12
NEI4 $509
LABELV $511
line 1180
;1180:		if (weaponNum == WP_NONE || weaponNum == WP_GAUNTLET) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $514
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $512
LABELV $514
line 1181
;1181:			torsoAnim = TORSO_STAND2;
ADDRFP4 8
CNSTI4 12
ASGNI4
line 1182
;1182:		} else {
ADDRGP4 $513
JUMPV
LABELV $512
line 1183
;1183:			torsoAnim = TORSO_STAND;
ADDRFP4 8
CNSTI4 11
ASGNI4
line 1184
;1184:		}
LABELV $513
line 1185
;1185:	}
LABELV $509
line 1187
;1186:
;1187:	if (torsoAnim == TORSO_ATTACK || torsoAnim == TORSO_ATTACK2) {
ADDRLP4 16
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 7
EQI4 $517
ADDRLP4 16
INDIRI4
CNSTI4 8
NEI4 $515
LABELV $517
line 1188
;1188:		if (weaponNum == WP_NONE || weaponNum == WP_GAUNTLET) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $520
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $518
LABELV $520
line 1189
;1189:			torsoAnim = TORSO_ATTACK2;
ADDRFP4 8
CNSTI4 8
ASGNI4
line 1190
;1190:		} else {
ADDRGP4 $519
JUMPV
LABELV $518
line 1191
;1191:			torsoAnim = TORSO_ATTACK;
ADDRFP4 8
CNSTI4 7
ASGNI4
line 1192
;1192:		}
LABELV $519
line 1193
;1193:		pi->muzzleFlashTime = dp_realtime + UI_TIMER_MUZZLE_FLASH;
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 dp_realtime
INDIRI4
CNSTI4 20
ADDI4
ASGNI4
line 1195
;1194:		// FIXME play firing sound here
;1195:	}
LABELV $515
line 1197
;1196:
;1197:	currentAnim = pi->torsoAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1048
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1199
;1198:
;1199:	if (weaponNum != pi->currentWeapon || currentAnim == TORSO_RAISE || currentAnim == TORSO_DROP) {
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1040
ADDP4
INDIRI4
NEI4 $524
ADDRLP4 0
INDIRI4
CNSTI4 10
EQI4 $524
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $521
LABELV $524
line 1200
;1200:		pi->pendingTorsoAnim = torsoAnim;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 1201
;1201:	} else if ((currentAnim == TORSO_GESTURE || currentAnim == TORSO_ATTACK) && (torsoAnim != currentAnim)) {
ADDRGP4 $522
JUMPV
LABELV $521
ADDRLP4 0
INDIRI4
CNSTI4 6
EQI4 $527
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $525
LABELV $527
ADDRFP4 8
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $525
line 1202
;1202:		pi->pendingTorsoAnim = torsoAnim;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 1203
;1203:	} else if (torsoAnim != currentAnim) {
ADDRGP4 $526
JUMPV
LABELV $525
ADDRFP4 8
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $528
line 1204
;1204:		pi->pendingTorsoAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
CNSTI4 0
ASGNI4
line 1205
;1205:		UI_ForceTorsoAnim(pi, torsoAnim);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 1206
;1206:	}
LABELV $528
LABELV $526
LABELV $522
line 1207
;1207:}
LABELV $492
endproc UI_PlayerInfo_SetInfo 28 8
bss
align 4
LABELV jumpHeight
skip 4
align 4
LABELV dp_realtime
skip 4
import UI_RankStatusMenu
import RankStatus_Cache
import UI_SignupMenu
import Signup_Cache
import UI_LoginMenu
import Login_Cache
import UI_RankingsMenu
import Rankings_Cache
import Rankings_DrawPassword
import Rankings_DrawName
import Rankings_DrawText
import UI_InitGameinfo
import UI_SPUnlockMedals_f
import UI_SPUnlock_f
import UI_GetAwardLevel
import UI_LogAwardData
import UI_NewGame
import UI_GetCurrentGame
import UI_CanShowTierVideo
import UI_ShowTierVideo
import UI_TierCompleted
import UI_SetBestScore
import UI_GetBestScore
import UI_GetNumBots
import UI_GetBotInfoByName
import UI_GetBotInfoByNumber
import UI_GetNumSPTiers
import UI_GetNumSPArenas
import UI_GetNumArenas
import UI_GetSpecialArenaInfo
import UI_GetArenaInfoByMap
import UI_GetArenaInfoByNumber
import UI_NetworkOptionsMenu
import UI_NetworkOptionsMenu_Cache
import UI_SoundOptionsMenu
import UI_SoundOptionsMenu_Cache
import UI_DisplayOptionsMenu
import UI_DisplayOptionsMenu_Cache
import UI_SaveConfigMenu
import UI_SaveConfigMenu_Cache
import UI_LoadConfigMenu
import UI_LoadConfig_Cache
import UI_TeamOrdersMenu_Cache
import UI_TeamOrdersMenu_f
import UI_TeamOrdersMenu
import UI_RemoveBotsMenu
import UI_RemoveBots_Cache
import UI_AddBotsMenu
import UI_AddBots_Cache
import trap_SetPbClStatus
import trap_VerifyCDKey
import trap_SetCDKey
import trap_GetCDKey
import trap_MemoryRemaining
import trap_LAN_GetPingInfo
import trap_LAN_GetPing
import trap_LAN_ClearPing
import trap_LAN_ServerStatus
import trap_LAN_LoadCachedServers
import trap_LAN_SaveCachedServers
import trap_LAN_GetPingQueueCount
import trap_LAN_GetServerInfo
import trap_LAN_GetServerAddressString
import trap_LAN_GetServerCount
import trap_GetConfigString
import trap_GetGlconfig
import trap_GetClientState
import trap_GetClipboardData
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_ClearStates
import trap_Key_SetOverstrikeMode
import trap_Key_GetOverstrikeMode
import trap_Key_IsDown
import trap_Key_SetBinding
import trap_Key_GetBindingBuf
import trap_Key_KeynumToStringBuf
import trap_S_RegisterSound
import trap_S_StartLocalSound
import trap_CM_LerpTag
import trap_UpdateScreen
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_AddLightToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Cmd_ExecuteText
import trap_Argv
import trap_Argc
import trap_Cvar_InfoStringBuffer
import trap_Cvar_Create
import trap_Cvar_Reset
import trap_Cvar_SetValue
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import UI_SPSkillMenu_Cache
import UI_SPSkillMenu
import UI_SPPostgameMenu_f
import UI_SPPostgameMenu_Cache
import UI_SPArena_Start
import UI_SPLevelMenu_ReInit
import UI_SPLevelMenu_f
import UI_SPLevelMenu
import UI_SPLevelMenu_Cache
import uis
import m_entersound
import UI_StartDemoLoop
import UI_Cvar_VariableString
import UI_Argv
import UI_ForceMenuOff
import UI_PopMenu
import UI_PushMenu
import UI_SetActiveMenu
import UI_IsFullscreen
import UI_DrawTextBox
import UI_AdjustFrom640
import UI_CursorInRect
import UI_DrawChar
import UI_DrawString
import UI_ProportionalStringWidth
import UI_DrawProportionalString_AutoWrapped
import UI_DrawProportionalString
import UI_ProportionalSizeScale
import UI_DrawBannerString
import UI_LerpColor
import UI_SetColor
import UI_UpdateScreen
import UI_DrawRect
import UI_FillRect
import UI_DrawHandlePic
import UI_DrawNamedPic
import UI_ClampCvar
import UI_ConsoleCommand
import UI_Refresh
import UI_MouseEvent
import UI_KeyEvent
import UI_Shutdown
import UI_Init
import DriverInfo_Cache
import GraphicsOptions_Cache
import UI_GraphicsOptionsMenu
import ServerInfo_Cache
import UI_ServerInfoMenu
import UI_BotSelectMenu_Cache
import UI_BotSelectMenu
import ServerOptions_Cache
import StartServer_Cache
import UI_StartServerMenu
import ArenaServers_Cache
import UI_ArenaServersMenu
import SpecifyServer_Cache
import UI_SpecifyServerMenu
import SpecifyLeague_Cache
import UI_SpecifyLeagueMenu
import Preferences_Cache
import UI_PreferencesMenu
import PlayerSettings_Cache
import UI_PlayerSettingsMenu
import PlayerModel_Cache
import UI_PlayerModelMenu
import UI_CDKeyMenu_f
import UI_CDKeyMenu_Cache
import UI_CDKeyMenu
import UI_ModsMenu_Cache
import UI_ModsMenu
import UI_CinematicsMenu_Cache
import UI_CinematicsMenu_f
import UI_CinematicsMenu
import Demos_Cache
import UI_DemosMenu
import Controls_Cache
import UI_ControlsMenu
import UI_DrawConnectScreen
import TeamMain_Cache
import UI_TeamMainMenu
import UI_SetupMenu
import UI_SetupMenu_Cache
import UI_Message
import UI_ConfirmMenu_Style
import UI_ConfirmMenu
import ConfirmMenu_Cache
import UI_InGameMenu
import InGame_Cache
import UI_CreditMenu
import UI_UpdateCvars
import UI_RegisterCvars
import UI_MainMenu
import MainMenu_Cache
import MenuField_Key
import MenuField_Draw
import MenuField_Init
import MField_Draw
import MField_CharEvent
import MField_KeyDownEvent
import MField_Clear
import UI_VideoCheck
import ui_medalSounds
import ui_medalPicNames
import ui_medalNames
import text_color_highlight
import text_color_normal
import text_color_disabled
import listbar_color
import list_color
import name_color
import color_dim
import color_red
import color_orange
import color_blue
import color_yellow
import color_white
import color_black
import menu_dim_color
import menu_black_color
import menu_red_color
import menu_highlight_color
import menu_dark_color
import menu_grayed_color
import menu_text_color
import weaponChangeSound
import menu_null_sound
import menu_buzz_sound
import menu_out_sound
import menu_move_sound
import menu_in_sound
import ScrollList_Key
import ScrollList_Draw
import Bitmap_Draw
import Bitmap_Init
import Menu_DefaultKey
import Menu_SetCursorToItem
import Menu_SetCursor
import Menu_ActivateItem
import Menu_ItemAtCursor
import Menu_Draw
import Menu_AdjustCursor
import Menu_AddItem
import Menu_Focus
import Menu_Cache
import ui_cdkeychecked
import ui_cdkey
import ui_server16
import ui_server15
import ui_server14
import ui_server13
import ui_server12
import ui_server11
import ui_server10
import ui_server9
import ui_server8
import ui_server7
import ui_server6
import ui_server5
import ui_server4
import ui_server3
import ui_server2
import ui_server1
import ui_marks
import ui_drawCrosshairNames
import ui_drawCrosshair
import ui_brassTime
import ui_browserShowEmpty
import ui_browserShowFull
import ui_browserSortKey
import ui_browserGameType
import ui_browserMaster
import ui_spSelection
import ui_spSkill
import ui_spVideos
import ui_spAwards
import ui_spScores5
import ui_spScores4
import ui_spScores3
import ui_spScores2
import ui_spScores1
import ui_botsFile
import ui_arenasFile
import ui_ctf_friendly
import ui_ctf_timelimit
import ui_ctf_capturelimit
import ui_team_friendly
import ui_team_timelimit
import ui_team_fraglimit
import ui_tourney_timelimit
import ui_tourney_fraglimit
import ui_ffa_timelimit
import ui_ffa_fraglimit
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import VectorMAM
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $490
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $487
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 99
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $486
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $479
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $476
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $475
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $472
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $471
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 0
align 1
LABELV $465
byte 1 69
byte 1 114
byte 1 114
byte 1 111
byte 1 114
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $442
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 111
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $437
byte 1 115
byte 1 101
byte 1 120
byte 1 0
align 1
LABELV $428
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 111
byte 1 102
byte 1 102
byte 1 115
byte 1 101
byte 1 116
byte 1 0
align 1
LABELV $423
byte 1 102
byte 1 111
byte 1 111
byte 1 116
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 115
byte 1 0
align 1
LABELV $415
byte 1 70
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 110
byte 1 103
byte 1 10
byte 1 0
align 1
LABELV $403
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $402
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $401
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $395
byte 1 115
byte 1 112
byte 1 114
byte 1 105
byte 1 116
byte 1 101
byte 1 115
byte 1 47
byte 1 98
byte 1 97
byte 1 108
byte 1 108
byte 1 111
byte 1 111
byte 1 110
byte 1 51
byte 1 0
align 1
LABELV $386
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $379
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $362
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $356
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $346
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 0
align 1
LABELV $164
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $92
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $91
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
