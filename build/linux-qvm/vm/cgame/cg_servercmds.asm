code
proc CG_ParseScores 208 12
file "../../../../code/cgame/cg_servercmds.c"
line 48
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_servercmds.c -- reliably sequenced text commands sent by the server
;4:// these are processed at snapshot transition time, so there will definately
;5:// be a valid snapshot this frame
;6:
;7:#include "cg_local.h"
;8:
;9:#ifdef MISSIONPACK             // bk001204
;10:#include "../../ui/menudef.h"  // bk001205 - for Q3_ui as well
;11:
;12:typedef struct {
;13:	const char* order;
;14:	int         taskNum;
;15:} orderTask_t;
;16:
;17:static const orderTask_t validOrders[] = {
;18:	{VOICECHAT_GETFLAG,           TEAMTASK_OFFENSE },
;19:    {VOICECHAT_OFFENSE,           TEAMTASK_OFFENSE },
;20:    {VOICECHAT_DEFEND,            TEAMTASK_DEFENSE },
;21:	{VOICECHAT_DEFENDFLAG,        TEAMTASK_DEFENSE },
;22:    {VOICECHAT_PATROL,            TEAMTASK_PATROL  },
;23:    {VOICECHAT_CAMP,              TEAMTASK_CAMP    },
;24:	{VOICECHAT_FOLLOWME,          TEAMTASK_FOLLOW  },
;25:    {VOICECHAT_RETURNFLAG,        TEAMTASK_RETRIEVE},
;26:    {VOICECHAT_FOLLOWFLAGCARRIER, TEAMTASK_ESCORT  }
;27:};
;28:
;29:static const int numValidOrders = sizeof(validOrders) / sizeof(orderTask_t);
;30:
;31:static int       CG_ValidOrder(const char* p) {
;32:		  int i;
;33:		  for (i = 0; i < numValidOrders; i++) {
;34:			  if (Q_stricmp(p, validOrders[i].order) == 0) {
;35:				  return validOrders[i].taskNum;
;36:        }
;37:    }
;38:		  return -1;
;39:}
;40:#endif
;41:
;42:/*
;43:=================
;44:CG_ParseScores
;45:
;46:=================
;47:*/
;48:static void CG_ParseScores(void) {
line 51
;49:	int i, powerups;
;50:
;51:	cg.numScores = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110476
ADDRLP4 12
INDIRI4
ASGNI4
line 52
;52:	if (cg.numScores > MAX_CLIENTS) {
ADDRGP4 cg+110476
INDIRI4
CNSTI4 64
LEI4 $74
line 53
;53:		cg.numScores = MAX_CLIENTS;
ADDRGP4 cg+110476
CNSTI4 64
ASGNI4
line 54
;54:	}
LABELV $74
line 56
;55:
;56:	cg.teamScores[0] = atoi(CG_Argv(2));
CNSTI4 2
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110484
ADDRLP4 20
INDIRI4
ASGNI4
line 57
;57:	cg.teamScores[1] = atoi(CG_Argv(3));
CNSTI4 3
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+110484+4
ADDRLP4 28
INDIRI4
ASGNI4
line 59
;58:
;59:	memset(cg.scores, 0, sizeof(cg.scores));
ADDRGP4 cg+110492
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4864
ARGI4
ADDRGP4 memset
CALLP4
pop
line 60
;60:	for (i = 0; i < cg.numScores; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $86
JUMPV
LABELV $83
line 62
;61:		//
;62:		cg.scores[i].client          = atoi(CG_Argv(i * 14 + 4));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 63
;63:		cg.scores[i].score           = atoi(CG_Argv(i * 14 + 5));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 48
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+4
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 64
;64:		cg.scores[i].ping            = atoi(CG_Argv(i * 14 + 6));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 6
ADDI4
ARGI4
ADDRLP4 60
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+8
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 65
;65:		cg.scores[i].time            = atoi(CG_Argv(i * 14 + 7));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 72
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+12
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 66
;66:		cg.scores[i].scoreFlags      = atoi(CG_Argv(i * 14 + 8));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 8
ADDI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+16
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 67
;67:		powerups                     = atoi(CG_Argv(i * 14 + 9));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 9
ADDI4
ARGI4
ADDRLP4 92
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 96
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 96
INDIRI4
ASGNI4
line 68
;68:		cg.scores[i].accuracy        = atoi(CG_Argv(i * 14 + 10));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 10
ADDI4
ARGI4
ADDRLP4 104
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+24
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 69
;69:		cg.scores[i].impressiveCount = atoi(CG_Argv(i * 14 + 11));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 11
ADDI4
ARGI4
ADDRLP4 116
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+28
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 70
;70:		cg.scores[i].excellentCount  = atoi(CG_Argv(i * 14 + 12));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 12
ADDI4
ARGI4
ADDRLP4 128
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+32
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 71
;71:		cg.scores[i].gauntletCount   = atoi(CG_Argv(i * 14 + 13));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 13
ADDI4
ARGI4
ADDRLP4 140
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 144
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+36
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 72
;72:		cg.scores[i].defendCount     = atoi(CG_Argv(i * 14 + 14));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 14
ADDI4
ARGI4
ADDRLP4 152
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 152
INDIRP4
ARGP4
ADDRLP4 156
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+40
ADDP4
ADDRLP4 156
INDIRI4
ASGNI4
line 73
;73:		cg.scores[i].assistCount     = atoi(CG_Argv(i * 14 + 15));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 15
ADDI4
ARGI4
ADDRLP4 164
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 168
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+44
ADDP4
ADDRLP4 168
INDIRI4
ASGNI4
line 74
;74:		cg.scores[i].perfect         = atoi(CG_Argv(i * 14 + 16));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 16
ADDI4
ARGI4
ADDRLP4 176
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRLP4 180
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+52
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 75
;75:		cg.scores[i].captures        = atoi(CG_Argv(i * 14 + 17));
ADDRLP4 0
INDIRI4
CNSTI4 14
MULI4
CNSTI4 17
ADDI4
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 192
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+48
ADDP4
ADDRLP4 192
INDIRI4
ASGNI4
line 77
;76:
;77:		if (cg.scores[i].client < 0 || cg.scores[i].client >= MAX_CLIENTS) {
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 0
LTI4 $117
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 64
LTI4 $113
LABELV $117
line 78
;78:			cg.scores[i].client = 0;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
CNSTI4 0
ASGNI4
line 79
;79:		}
LABELV $113
line 80
;80:		cgs.clientinfo[cg.scores[i].client].score    = cg.scores[i].score;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+68
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+4
ADDP4
INDIRI4
ASGNI4
line 81
;81:		cgs.clientinfo[cg.scores[i].client].powerups = powerups;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+108
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 83
;82:
;83:		cg.scores[i].team = cgs.clientinfo[cg.scores[i].client].team;
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492+56
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 76
MULI4
ADDRGP4 cg+110492
ADDP4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+36
ADDP4
INDIRI4
ASGNI4
line 84
;84:	}
LABELV $84
line 60
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $86
ADDRLP4 0
INDIRI4
ADDRGP4 cg+110476
INDIRI4
LTI4 $83
line 88
;85:#ifdef MISSIONPACK
;86:	CG_SetScoreSelection(NULL);
;87:#endif
;88:}
LABELV $72
endproc CG_ParseScores 208 12
proc CG_ParseTeamInfo 64 4
line 95
;89:
;90:/*
;91:=================
;92:CG_ParseTeamInfo
;93:=================
;94:*/
;95:static void CG_ParseTeamInfo(void) {
line 99
;96:	int i;
;97:	int client;
;98:
;99:	numSortedTeamPlayers = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 numSortedTeamPlayers
ADDRLP4 12
INDIRI4
ASGNI4
line 100
;100:	if ((unsigned)numSortedTeamPlayers > TEAM_MAXOVERLAY)
ADDRGP4 numSortedTeamPlayers
INDIRI4
CVIU4 4
CNSTU4 32
LEU4 $133
line 101
;101:		numSortedTeamPlayers = TEAM_MAXOVERLAY;
ADDRGP4 numSortedTeamPlayers
CNSTI4 32
ASGNI4
LABELV $133
line 103
;102:
;103:	for (i = 0; i < numSortedTeamPlayers; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $138
JUMPV
LABELV $135
line 104
;104:		client = atoi(CG_Argv(i * 6 + 2));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 2
ADDI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
line 105
;105:		if ((unsigned)client >= MAX_CLIENTS)
ADDRLP4 4
INDIRI4
CVIU4 4
CNSTU4 64
LTU4 $139
line 106
;106:			continue;
ADDRGP4 $136
JUMPV
LABELV $139
line 108
;107:
;108:		sortedTeamPlayers[i] = client;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 110
;109:
;110:		cgs.clientinfo[client].location  = atoi(CG_Argv(i * 6 + 3));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 3
ADDI4
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+72
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 111
;111:		cgs.clientinfo[client].health    = atoi(CG_Argv(i * 6 + 4));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 32
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+76
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
line 112
;112:		cgs.clientinfo[client].armor     = atoi(CG_Argv(i * 6 + 5));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 40
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+80
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 113
;113:		cgs.clientinfo[client].curWeapon = atoi(CG_Argv(i * 6 + 6));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 6
ADDI4
ARGI4
ADDRLP4 48
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+84
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 114
;114:		cgs.clientinfo[client].powerups  = atoi(CG_Argv(i * 6 + 7));
ADDRLP4 0
INDIRI4
CNSTI4 6
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1652
MULI4
ADDRGP4 cgs+40996+108
ADDP4
ADDRLP4 60
INDIRI4
ASGNI4
line 115
;115:	}
LABELV $136
line 103
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $138
ADDRLP4 0
INDIRI4
ADDRGP4 numSortedTeamPlayers
INDIRI4
LTI4 $135
line 116
;116:}
LABELV $132
endproc CG_ParseTeamInfo 64 4
export CG_ParseServerinfo
proc CG_ParseServerinfo 84 16
line 126
;117:
;118:/*
;119:================
;120:CG_ParseServerinfo
;121:
;122:This is called explicitly when the gamestate is first received,
;123:and whenever the server updates any serverinfo flagged cvars
;124:================
;125:*/
;126:void CG_ParseServerinfo(void) {
line 130
;127:	const char* info;
;128:	char*       mapname;
;129:
;130:	info         = CG_ConfigString(CS_SERVERINFO);
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 131
;131:	cgs.gametype = atoi(Info_ValueForKey(info, "g_gametype"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $153
ARGP4
ADDRLP4 12
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31480
ADDRLP4 16
INDIRI4
ASGNI4
line 132
;132:	trap_Cvar_Set("ui_gametype", va("%i", cgs.gametype));
ADDRGP4 $155
ARGP4
ADDRGP4 cgs+31480
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $154
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 133
;133:	cgs.dmflags      = atoi(Info_ValueForKey(info, "dmflags"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $158
ARGP4
ADDRLP4 24
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31484
ADDRLP4 28
INDIRI4
ASGNI4
line 134
;134:	cgs.teamflags    = atoi(Info_ValueForKey(info, "teamflags"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $160
ARGP4
ADDRLP4 32
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31488
ADDRLP4 36
INDIRI4
ASGNI4
line 135
;135:	cgs.fraglimit    = atoi(Info_ValueForKey(info, "fraglimit"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $162
ARGP4
ADDRLP4 40
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31492
ADDRLP4 44
INDIRI4
ASGNI4
line 136
;136:	cgs.capturelimit = atoi(Info_ValueForKey(info, "capturelimit"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $164
ARGP4
ADDRLP4 48
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31496
ADDRLP4 52
INDIRI4
ASGNI4
line 137
;137:	cgs.timelimit    = atoi(Info_ValueForKey(info, "timelimit"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $166
ARGP4
ADDRLP4 56
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31500
ADDRLP4 60
INDIRI4
ASGNI4
line 138
;138:	cgs.maxclients   = atoi(Info_ValueForKey(info, "sv_maxclients"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $168
ARGP4
ADDRLP4 64
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31504
ADDRLP4 68
INDIRI4
ASGNI4
line 139
;139:	mapname          = Info_ValueForKey(info, "mapname");
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $169
ARGP4
ADDRLP4 72
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 72
INDIRP4
ASGNP4
line 140
;140:	Com_sprintf(cgs.mapname, sizeof(cgs.mapname), "maps/%s.bsp", mapname);
ADDRGP4 cgs+31508
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $172
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLI4
pop
line 141
;141:	Q_strncpyz(cgs.redTeam, Info_ValueForKey(info, "g_redTeam"), sizeof(cgs.redTeam));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $174
ARGP4
ADDRLP4 76
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+31572
ARGP4
ADDRLP4 76
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 142
;142:	Q_strncpyz(cgs.blueTeam, Info_ValueForKey(info, "g_blueTeam"), sizeof(cgs.blueTeam));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $177
ARGP4
ADDRLP4 80
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+31636
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 143
;143:}
LABELV $151
endproc CG_ParseServerinfo 84 16
export CG_ParseSysteminfo
proc CG_ParseSysteminfo 40 8
line 145
;144:
;145:void CG_ParseSysteminfo(void) {
line 148
;146:	const char* info;
;147:
;148:	info = CG_ConfigString(CS_SYSTEMINFO);
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 150
;149:
;150:	cgs.pmove_fixed = (atoi(Info_ValueForKey(info, "pmove_fixed"))) ? qtrue : qfalse;
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $181
ARGP4
ADDRLP4 12
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $183
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $184
JUMPV
LABELV $183
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $184
ADDRGP4 cgs+149676
ADDRLP4 8
INDIRI4
ASGNI4
line 151
;151:	cgs.pmove_msec  = atoi(Info_ValueForKey(info, "pmove_msec"));
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $186
ARGP4
ADDRLP4 20
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+149680
ADDRLP4 24
INDIRI4
ASGNI4
line 152
;152:	if (cgs.pmove_msec < 8) {
ADDRGP4 cgs+149680
INDIRI4
CNSTI4 8
GEI4 $187
line 153
;153:		cgs.pmove_msec = 8;
ADDRGP4 cgs+149680
CNSTI4 8
ASGNI4
line 154
;154:	} else if (cgs.pmove_msec > 33) {
ADDRGP4 $188
JUMPV
LABELV $187
ADDRGP4 cgs+149680
INDIRI4
CNSTI4 33
LEI4 $191
line 155
;155:		cgs.pmove_msec = 33;
ADDRGP4 cgs+149680
CNSTI4 33
ASGNI4
line 156
;156:	}
LABELV $191
LABELV $188
line 158
;157:
;158:	cgs.synchronousClients = (atoi(Info_ValueForKey(info, "g_synchronousClients"))) ? qtrue : qfalse;
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $196
ARGP4
ADDRLP4 32
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $198
ADDRLP4 28
CNSTI4 1
ASGNI4
ADDRGP4 $199
JUMPV
LABELV $198
ADDRLP4 28
CNSTI4 0
ASGNI4
LABELV $199
ADDRGP4 cgs+149684
ADDRLP4 28
INDIRI4
ASGNI4
line 159
;159:}
LABELV $179
endproc CG_ParseSysteminfo 40 8
proc CG_ParseWarmup 24 4
line 166
;160:
;161:/*
;162:==================
;163:CG_ParseWarmup
;164:==================
;165:*/
;166:static void CG_ParseWarmup(void) {
line 170
;167:	const char* info;
;168:	int         warmup;
;169:
;170:	info = CG_ConfigString(CS_WARMUP);
CNSTI4 5
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 172
;171:
;172:	warmup         = atoi(info);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 173
;173:	cg.warmupCount = -1;
ADDRGP4 cg+117824
CNSTI4 -1
ASGNI4
line 175
;174:
;175:	if (warmup) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $202
line 176
;176:		cg.timelimitWarnings |= 1 | 2 | 4;
ADDRLP4 16
ADDRGP4 cg+107616
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 7
BORI4
ASGNI4
line 177
;177:		cg.fraglimitWarnings |= 1 | 2 | 4;
ADDRLP4 20
ADDRGP4 cg+107620
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 7
BORI4
ASGNI4
line 178
;178:	}
LABELV $202
line 180
;179:
;180:	if (cg.clientFrame == 0) {
ADDRGP4 cg
INDIRI4
CNSTI4 0
NEI4 $206
line 181
;181:		if (warmup == 0 && cgs.gametype != GT_SINGLE_PLAYER) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $208
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 2
EQI4 $208
line 182
;182:			if (cg.snap && (cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR || cg.snap->ps.pm_flags & PMF_FOLLOW)) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $200
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $216
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $200
LABELV $216
line 184
;183:				// force sound playback in CG_WarmupEvents()
;184:				cg.warmup      = cg.time;
ADDRGP4 cg+117820
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 185
;185:				cg.warmupCount = -2;  // special value to silent FIGHT sound for demo playback
ADDRGP4 cg+117824
CNSTI4 -2
ASGNI4
line 186
;186:			}
line 187
;187:			return;
ADDRGP4 $200
JUMPV
LABELV $208
line 189
;188:		}
;189:	}
LABELV $206
line 191
;190:
;191:	if (warmup == 0 && cg.warmup) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $220
ADDRGP4 cg+117820
INDIRI4
CNSTI4 0
EQI4 $220
line 193
;192:
;193:	} else if (warmup > 0 && cg.warmup <= 0) {
ADDRGP4 $221
JUMPV
LABELV $220
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $223
ADDRGP4 cg+117820
INDIRI4
CNSTI4 0
GTI4 $223
line 199
;194:#ifdef MISSIONPACK
;195:		if (cgs.gametype >= GT_CTF && cgs.gametype <= GT_HARVESTER) {
;196:			trap_S_StartLocalSound(cgs.media.countPrepareTeamSound, CHAN_ANNOUNCER);
;197:		} else
;198:#endif
;199:		{
line 200
;200:			if (cg.soundPlaying != cgs.media.countPrepareSound) {
ADDRGP4 cg+117816
INDIRI4
ADDRGP4 cgs+148692+932
INDIRI4
EQI4 $226
line 201
;201:				CG_AddBufferedSound(-1);
CNSTI4 -1
ARGI4
ADDRGP4 CG_AddBufferedSound
CALLV
pop
line 202
;202:				CG_AddBufferedSound(cgs.media.countPrepareSound);
ADDRGP4 cgs+148692+932
INDIRI4
ARGI4
ADDRGP4 CG_AddBufferedSound
CALLV
pop
line 203
;203:				cg.soundTime = cg.time + 1;  // play in next frame
ADDRGP4 cg+117732
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 204
;204:			}
LABELV $226
line 205
;205:		}
line 206
;206:	}
LABELV $223
LABELV $221
line 208
;207:
;208:	cg.warmup = warmup;
ADDRGP4 cg+117820
ADDRLP4 0
INDIRI4
ASGNI4
line 209
;209:}
LABELV $200
endproc CG_ParseWarmup 24 4
export CG_SetConfigValues
proc CG_SetConfigValues 32 4
line 218
;210:
;211:/*
;212:================
;213:CG_SetConfigValues
;214:
;215:Called on load to set the initial values from configure strings
;216:================
;217:*/
;218:void CG_SetConfigValues(void) {
line 221
;219:	const char* s;
;220:
;221:	cgs.scores1        = atoi(CG_ConfigString(CS_SCORES1));
CNSTI4 6
ARGI4
ADDRLP4 4
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34824
ADDRLP4 8
INDIRI4
ASGNI4
line 222
;222:	cgs.scores2        = atoi(CG_ConfigString(CS_SCORES2));
CNSTI4 7
ARGI4
ADDRLP4 12
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34828
ADDRLP4 16
INDIRI4
ASGNI4
line 223
;223:	cgs.levelStartTime = atoi(CG_ConfigString(CS_LEVEL_START_TIME));
CNSTI4 21
ARGI4
ADDRLP4 20
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34820
ADDRLP4 24
INDIRI4
ASGNI4
line 224
;224:	if (cgs.gametype == GT_CTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 4
NEI4 $240
line 225
;225:		s            = CG_ConfigString(CS_FLAGSTATUS);
CNSTI4 23
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 226
;226:		cgs.redflag  = s[0] - '0';
ADDRGP4 cgs+34832
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 227
;227:		cgs.blueflag = s[1] - '0';
ADDRGP4 cgs+34836
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 228
;228:	}
LABELV $240
line 235
;229:#ifdef MISSIONPACK
;230:	else if (cgs.gametype == GT_1FCTF) {
;231:		s              = CG_ConfigString(CS_FLAGSTATUS);
;232:		cgs.flagStatus = s[0] - '0';
;233:	}
;234:#endif
;235:	CG_ParseWarmup();
ADDRGP4 CG_ParseWarmup
CALLV
pop
line 236
;236:}
LABELV $236
endproc CG_SetConfigValues 32 4
export CG_ShaderStateChanged
proc CG_ShaderStateChanged 180 12
line 243
;237:
;238:/*
;239:=====================
;240:CG_ShaderStateChanged
;241:=====================
;242:*/
;243:void CG_ShaderStateChanged(void) {
line 250
;244:	char        originalShader[MAX_QPATH];
;245:	char        newShader[MAX_QPATH];
;246:	char        timeOffset[16];
;247:	const char* o;
;248:	char *      n, *t;
;249:
;250:	o = CG_ConfigString(CS_SHADERSTATE);
CNSTI4 24
ARGI4
ADDRLP4 156
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 156
INDIRP4
ASGNP4
ADDRGP4 $247
JUMPV
LABELV $246
line 251
;251:	while (o && *o) {
line 252
;252:		n = strchr(o, '=');
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 61
ARGI4
ADDRLP4 160
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 160
INDIRP4
ASGNP4
line 253
;253:		if (n) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $248
line 254
;254:			strncpy(originalShader, o, n - o);
ADDRLP4 12
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 255
;255:			originalShader[n - o] = '\0';
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 12
ADDP4
CNSTI1 0
ASGNI1
line 256
;256:			n++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 257
;257:			t = strchr(n, ':');
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 58
ARGI4
ADDRLP4 168
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 168
INDIRP4
ASGNP4
line 258
;258:			if (t) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $248
line 259
;259:				strncpy(newShader, n, t - n);
ADDRLP4 76
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 260
;260:				newShader[t - n] = '\0';
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 76
ADDP4
CNSTI1 0
ASGNI1
line 261
;261:			} else {
line 262
;262:				break;
LABELV $252
line 264
;263:			}
;264:			t++;
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 265
;265:			o = strchr(t, '@');
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRLP4 172
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 172
INDIRP4
ASGNP4
line 266
;266:			if (o) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $250
line 267
;267:				strncpy(timeOffset, t, o - t);
ADDRLP4 140
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 268
;268:				timeOffset[o - t] = 0;
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 140
ADDP4
CNSTI1 0
ASGNI1
line 269
;269:				o++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 270
;270:				trap_R_RemapShader(originalShader, newShader, timeOffset);
ADDRLP4 12
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 271
;271:			}
line 272
;272:		} else {
line 273
;273:			break;
LABELV $250
line 275
;274:		}
;275:	}
LABELV $247
line 251
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $255
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $246
LABELV $255
LABELV $248
line 276
;276:}
LABELV $245
endproc CG_ShaderStateChanged 180 12
proc CG_ConfigStringModified 48 12
line 284
;277:
;278:/*
;279:================
;280:CG_ConfigStringModified
;281:
;282:================
;283:*/
;284:static void CG_ConfigStringModified(void) {
line 288
;285:	const char* str;
;286:	int         num;
;287:
;288:	num = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 292
;289:
;290:	// get the gamestate from the client system, which will have the
;291:	// new configstring already integrated
;292:	trap_GetGameState(&cgs.gameState);
ADDRGP4 cgs
ARGP4
ADDRGP4 trap_GetGameState
CALLV
pop
line 295
;293:
;294:	// look up the individual string that was modified
;295:	str = CG_ConfigString(num);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 298
;296:
;297:	// do something with it if necessary
;298:	if (num == CS_MUSIC) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $257
line 299
;299:		CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 300
;300:	} else if (num == CS_SYSTEMINFO) {
ADDRGP4 $258
JUMPV
LABELV $257
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $259
line 301
;301:		CG_ParseSysteminfo();
ADDRGP4 CG_ParseSysteminfo
CALLV
pop
line 302
;302:	} else if (num == CS_SERVERINFO) {
ADDRGP4 $260
JUMPV
LABELV $259
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $261
line 303
;303:		CG_ParseServerinfo();
ADDRGP4 CG_ParseServerinfo
CALLV
pop
line 304
;304:	} else if (num == CS_WARMUP) {
ADDRGP4 $262
JUMPV
LABELV $261
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $263
line 305
;305:		CG_ParseWarmup();
ADDRGP4 CG_ParseWarmup
CALLV
pop
line 306
;306:	} else if (num == CS_SCORES1) {
ADDRGP4 $264
JUMPV
LABELV $263
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $265
line 307
;307:		cgs.scores1 = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34824
ADDRLP4 20
INDIRI4
ASGNI4
line 308
;308:	} else if (num == CS_SCORES2) {
ADDRGP4 $266
JUMPV
LABELV $265
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $268
line 309
;309:		cgs.scores2 = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34828
ADDRLP4 20
INDIRI4
ASGNI4
line 310
;310:	} else if (num == CS_LEVEL_START_TIME) {
ADDRGP4 $269
JUMPV
LABELV $268
ADDRLP4 0
INDIRI4
CNSTI4 21
NEI4 $271
line 311
;311:		cgs.levelStartTime = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+34820
ADDRLP4 20
INDIRI4
ASGNI4
line 312
;312:	} else if (num == CS_VOTE_TIME) {
ADDRGP4 $272
JUMPV
LABELV $271
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $274
line 313
;313:		cgs.voteTime     = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31700
ADDRLP4 20
INDIRI4
ASGNI4
line 314
;314:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31712
CNSTI4 1
ASGNI4
line 315
;315:	} else if (num == CS_VOTE_YES) {
ADDRGP4 $275
JUMPV
LABELV $274
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $278
line 316
;316:		cgs.voteYes      = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31704
ADDRLP4 20
INDIRI4
ASGNI4
line 317
;317:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31712
CNSTI4 1
ASGNI4
line 318
;318:	} else if (num == CS_VOTE_NO) {
ADDRGP4 $279
JUMPV
LABELV $278
ADDRLP4 0
INDIRI4
CNSTI4 11
NEI4 $282
line 319
;319:		cgs.voteNo       = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+31708
ADDRLP4 20
INDIRI4
ASGNI4
line 320
;320:		cgs.voteModified = qtrue;
ADDRGP4 cgs+31712
CNSTI4 1
ASGNI4
line 321
;321:	} else if (num == CS_VOTE_STRING) {
ADDRGP4 $283
JUMPV
LABELV $282
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $286
line 322
;322:		Q_strncpyz(cgs.voteString, str, sizeof(cgs.voteString));
ADDRGP4 cgs+31716
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 326
;323:#ifdef MISSIONPACK
;324:		trap_S_StartLocalSound(cgs.media.voteNow, CHAN_ANNOUNCER);
;325:#endif  // MISSIONPACK
;326:	} else if (num >= CS_TEAMVOTE_TIME && num <= CS_TEAMVOTE_TIME + 1) {
ADDRGP4 $287
JUMPV
LABELV $286
ADDRLP4 0
INDIRI4
CNSTI4 12
LTI4 $290
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $290
line 327
;327:		cgs.teamVoteTime[num - CS_TEAMVOTE_TIME]     = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32740-48
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 328
;328:		cgs.teamVoteModified[num - CS_TEAMVOTE_TIME] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32764-48
ADDP4
CNSTI4 1
ASGNI4
line 329
;329:	} else if (num >= CS_TEAMVOTE_YES && num <= CS_TEAMVOTE_YES + 1) {
ADDRGP4 $291
JUMPV
LABELV $290
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $296
ADDRLP4 0
INDIRI4
CNSTI4 17
GTI4 $296
line 330
;330:		cgs.teamVoteYes[num - CS_TEAMVOTE_YES]      = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32748-64
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 331
;331:		cgs.teamVoteModified[num - CS_TEAMVOTE_YES] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32764-64
ADDP4
CNSTI4 1
ASGNI4
line 332
;332:	} else if (num >= CS_TEAMVOTE_NO && num <= CS_TEAMVOTE_NO + 1) {
ADDRGP4 $297
JUMPV
LABELV $296
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $302
ADDRLP4 0
INDIRI4
CNSTI4 19
GTI4 $302
line 333
;333:		cgs.teamVoteNo[num - CS_TEAMVOTE_NO]       = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32756-72
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 334
;334:		cgs.teamVoteModified[num - CS_TEAMVOTE_NO] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+32764-72
ADDP4
CNSTI4 1
ASGNI4
line 335
;335:	} else if (num >= CS_TEAMVOTE_STRING && num <= CS_TEAMVOTE_STRING + 1) {
ADDRGP4 $303
JUMPV
LABELV $302
ADDRLP4 0
INDIRI4
CNSTI4 14
LTI4 $308
ADDRLP4 0
INDIRI4
CNSTI4 15
GTI4 $308
line 336
;336:		Q_strncpyz(cgs.teamVoteString[num - CS_TEAMVOTE_STRING], str, sizeof(cgs.teamVoteString[0]));
ADDRLP4 0
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+32772-14336
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 340
;337:#ifdef MISSIONPACK
;338:		trap_S_StartLocalSound(cgs.media.voteNow, CHAN_ANNOUNCER);
;339:#endif
;340:	} else if (num == CS_INTERMISSION) {
ADDRGP4 $309
JUMPV
LABELV $308
ADDRLP4 0
INDIRI4
CNSTI4 22
NEI4 $313
line 341
;341:		cg.intermissionStarted = atoi(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+24
ADDRLP4 36
INDIRI4
ASGNI4
line 342
;342:	} else if (num >= CS_MODELS && num < CS_MODELS + MAX_MODELS) {
ADDRGP4 $314
JUMPV
LABELV $313
ADDRLP4 0
INDIRI4
CNSTI4 32
LTI4 $316
ADDRLP4 0
INDIRI4
CNSTI4 288
GEI4 $316
line 343
;343:		cgs.gameModels[num - CS_MODELS] = trap_R_RegisterModel(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34848-128
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 344
;344:	} else if (num >= CS_SOUNDS && num < CS_SOUNDS + MAX_SOUNDS) {
ADDRGP4 $317
JUMPV
LABELV $316
ADDRLP4 0
INDIRI4
CNSTI4 288
LTI4 $320
ADDRLP4 0
INDIRI4
CNSTI4 544
GEI4 $320
line 345
;345:		if (str[0] != '*') {  // player specific sounds don't register here
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $321
line 346
;346:			cgs.gameSounds[num - CS_SOUNDS] = trap_S_RegisterSound(str, qfalse);
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 44
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+35872-1152
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 347
;347:		}
line 348
;348:	} else if (num >= CS_PLAYERS && num < CS_PLAYERS + MAX_CLIENTS) {
ADDRGP4 $321
JUMPV
LABELV $320
ADDRLP4 0
INDIRI4
CNSTI4 544
LTI4 $326
ADDRLP4 0
INDIRI4
CNSTI4 608
GEI4 $326
line 349
;349:		CG_NewClientInfo(num - CS_PLAYERS);
ADDRLP4 0
INDIRI4
CNSTI4 544
SUBI4
ARGI4
ADDRGP4 CG_NewClientInfo
CALLV
pop
line 350
;350:		CG_BuildSpectatorString();
ADDRGP4 CG_BuildSpectatorString
CALLV
pop
line 351
;351:	} else if (num == CS_FLAGSTATUS) {
ADDRGP4 $327
JUMPV
LABELV $326
ADDRLP4 0
INDIRI4
CNSTI4 23
NEI4 $328
line 352
;352:		if (cgs.gametype == GT_CTF) {
ADDRGP4 cgs+31480
INDIRI4
CNSTI4 4
NEI4 $329
line 354
;353:			// format is rb where its red/blue, 0 is at base, 1 is taken, 2 is dropped
;354:			cgs.redflag  = str[0] - '0';
ADDRGP4 cgs+34832
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 355
;355:			cgs.blueflag = str[1] - '0';
ADDRGP4 cgs+34836
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 356
;356:		}
line 362
;357:#ifdef MISSIONPACK
;358:		else if (cgs.gametype == GT_1FCTF) {
;359:			cgs.flagStatus = str[0] - '0';
;360:		}
;361:#endif
;362:	} else if (num == CS_SHADERSTATE) {
ADDRGP4 $329
JUMPV
LABELV $328
ADDRLP4 0
INDIRI4
CNSTI4 24
NEI4 $335
line 363
;363:		CG_ShaderStateChanged();
ADDRGP4 CG_ShaderStateChanged
CALLV
pop
line 364
;364:	}
LABELV $335
LABELV $329
LABELV $327
LABELV $321
LABELV $317
LABELV $314
LABELV $309
LABELV $303
LABELV $297
LABELV $291
LABELV $287
LABELV $283
LABELV $279
LABELV $275
LABELV $272
LABELV $269
LABELV $266
LABELV $264
LABELV $262
LABELV $260
LABELV $258
line 365
;365:}
LABELV $256
endproc CG_ConfigStringModified 48 12
proc CG_AddToTeamChat 40 0
line 373
;366:
;367:/*
;368:=======================
;369:CG_AddToTeamChat
;370:
;371:=======================
;372:*/
;373:static void CG_AddToTeamChat(const char* str) {
line 379
;374:	int   len;
;375:	char *p, *ls;
;376:	int   lastcolor;
;377:	int   chatHeight;
;378:
;379:	if (cg_teamChatHeight.integer < TEAMCHAT_HEIGHT) {
ADDRGP4 cg_teamChatHeight+12
INDIRI4
CNSTI4 8
GEI4 $338
line 380
;380:		chatHeight = cg_teamChatHeight.integer;
ADDRLP4 12
ADDRGP4 cg_teamChatHeight+12
INDIRI4
ASGNI4
line 381
;381:	} else {
ADDRGP4 $339
JUMPV
LABELV $338
line 382
;382:		chatHeight = TEAMCHAT_HEIGHT;
ADDRLP4 12
CNSTI4 8
ASGNI4
line 383
;383:	}
LABELV $339
line 385
;384:
;385:	if (chatHeight <= 0 || cg_teamChatTime.integer <= 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
LEI4 $345
ADDRGP4 cg_teamChatTime+12
INDIRI4
CNSTI4 0
GTI4 $342
LABELV $345
line 387
;386:		// team chat disabled, dump into normal chat
;387:		cgs.teamChatPos = cgs.teamLastChatPos = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 cgs+148688
ADDRLP4 20
INDIRI4
ASGNI4
ADDRGP4 cgs+148684
ADDRLP4 20
INDIRI4
ASGNI4
line 388
;388:		return;
ADDRGP4 $337
JUMPV
LABELV $342
line 391
;389:	}
;390:
;391:	len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 393
;392:
;393:	p  = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
ADDRGP4 cgs+148684
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 241
MULI4
ADDRGP4 cgs+146724
ADDP4
ASGNP4
line 394
;394:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 396
;395:
;396:	lastcolor = '7';
ADDRLP4 16
CNSTI4 55
ASGNI4
line 398
;397:
;398:	ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
ADDRGP4 $351
JUMPV
LABELV $350
line 399
;399:	while (*str) {
line 400
;400:		if (len > TEAMCHAT_WIDTH - 1) {
ADDRLP4 4
INDIRI4
CNSTI4 79
LEI4 $353
line 401
;401:			if (ls) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $355
line 402
;402:				str -= (p - ls);
ADDRFP4 0
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 403
;403:				str++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 404
;404:				p -= (p - ls);
ADDRLP4 0
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 405
;405:			}
LABELV $355
line 406
;406:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 408
;407:
;408:			cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+148684
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+148652
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 410
;409:
;410:			cgs.teamChatPos++;
ADDRLP4 20
ADDRGP4 cgs+148684
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 411
;411:			p    = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
ADDRGP4 cgs+148684
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 241
MULI4
ADDRGP4 cgs+146724
ADDP4
ASGNP4
line 412
;412:			*p   = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 413
;413:			*p++ = Q_COLOR_ESCAPE;
ADDRLP4 24
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI1 94
ASGNI1
line 414
;414:			*p++ = lastcolor;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 16
INDIRI4
CVII1 4
ASGNI1
line 415
;415:			len  = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 416
;416:			ls   = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 417
;417:		}
LABELV $353
line 419
;418:
;419:		if (Q_IsColorString(str)) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $363
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
CNSTI4 94
NEI4 $363
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $363
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 94
EQI4 $363
line 420
;420:			*p++      = *str++;
ADDRLP4 24
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI1
ASGNI1
line 421
;421:			lastcolor = *str;
ADDRLP4 16
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 422
;422:			*p++      = *str++;
ADDRLP4 32
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 36
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI1
ASGNI1
line 423
;423:			continue;
ADDRGP4 $351
JUMPV
LABELV $363
line 425
;424:		}
;425:		if (*str == ' ') {
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
NEI4 $365
line 426
;426:			ls = p;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
line 427
;427:		}
LABELV $365
line 428
;428:		*p++ = *str++;
ADDRLP4 24
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI1
ASGNI1
line 429
;429:		len++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 430
;430:	}
LABELV $351
line 399
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $350
line 431
;431:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 433
;432:
;433:	cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+148684
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+148652
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 434
;434:	cgs.teamChatPos++;
ADDRLP4 20
ADDRGP4 cgs+148684
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 436
;435:
;436:	if (cgs.teamChatPos - cgs.teamLastChatPos > chatHeight)
ADDRGP4 cgs+148684
INDIRI4
ADDRGP4 cgs+148688
INDIRI4
SUBI4
ADDRLP4 12
INDIRI4
LEI4 $371
line 437
;437:		cgs.teamLastChatPos = cgs.teamChatPos - chatHeight;
ADDRGP4 cgs+148688
ADDRGP4 cgs+148684
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ASGNI4
LABELV $371
line 438
;438:}
LABELV $337
endproc CG_AddToTeamChat 40 0
proc CG_MapRestart 0 8
line 451
;439:
;440:/*
;441:===============
;442:CG_MapRestart
;443:
;444:The server has issued a map_restart, so the next snapshot
;445:is completely new and should not be interpolated to.
;446:
;447:A tournement restart will clear everything, but doesn't
;448:require a reload of all the media
;449:===============
;450:*/
;451:static void CG_MapRestart(void) {
line 452
;452:	if (cg_showmiss.integer) {
ADDRGP4 cg_showmiss+12
INDIRI4
CNSTI4 0
EQI4 $378
line 453
;453:		CG_Printf("CG_MapRestart\n");
ADDRGP4 $381
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 454
;454:	}
LABELV $378
line 456
;455:
;456:	CG_InitLocalEntities();
ADDRGP4 CG_InitLocalEntities
CALLV
pop
line 457
;457:	CG_InitMarkPolys();
ADDRGP4 CG_InitMarkPolys
CALLV
pop
line 458
;458:	CG_ClearParticles();
ADDRGP4 CG_ClearParticles
CALLV
pop
line 461
;459:
;460:	// make sure the "3 frags left" warnings play again
;461:	cg.fraglimitWarnings = 0;
ADDRGP4 cg+107620
CNSTI4 0
ASGNI4
line 462
;462:	cg.timelimitWarnings = 0;
ADDRGP4 cg+107616
CNSTI4 0
ASGNI4
line 464
;463:
;464:	cg.rewardTime          = 0;
ADDRGP4 cg+117600
CNSTI4 0
ASGNI4
line 465
;465:	cg.rewardStack         = 0;
ADDRGP4 cg+117596
CNSTI4 0
ASGNI4
line 466
;466:	cg.intermissionStarted = qfalse;
ADDRGP4 cg+24
CNSTI4 0
ASGNI4
line 467
;467:	cg.levelShot           = qfalse;
ADDRGP4 cg+12
CNSTI4 0
ASGNI4
line 469
;468:
;469:	cgs.voteTime = 0;
ADDRGP4 cgs+31700
CNSTI4 0
ASGNI4
line 471
;470:
;471:	cg.mapRestart = qtrue;
ADDRGP4 cg+107624
CNSTI4 1
ASGNI4
line 473
;472:
;473:	CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 475
;474:
;475:	trap_S_ClearLoopingSounds(qtrue);
CNSTI4 1
ARGI4
ADDRGP4 trap_S_ClearLoopingSounds
CALLV
pop
line 477
;476:
;477:	cg.allowPickupPrediction = cg.time + PICKUP_PREDICTION_DELAY;
ADDRGP4 cg+149076
ADDRGP4 cg+107604
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 482
;478:
;479:	// we really should clear more parts of cg here and stop sounds
;480:
;481:	// play the "fight" sound if this is a restart without warmup
;482:	if (cg.warmup == 0 /* && cgs.gametype == GT_TOURNAMENT */) {
ADDRGP4 cg+117820
INDIRI4
CNSTI4 0
NEI4 $392
line 484
;483:		// force sound playback in CG_WarmupEvents()
;484:		cg.warmup      = cg.time;
ADDRGP4 cg+117820
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 485
;485:		cg.warmupCount = -1;
ADDRGP4 cg+117824
CNSTI4 -1
ASGNI4
line 486
;486:	}
LABELV $392
line 497
;487:
;488:#ifdef MISSIONPACK
;489:	if (cg_singlePlayerActive.integer) {
;490:		trap_Cvar_Set("ui_matchStartTime", va("%i", cg.time));
;491:		if (cg_recordSPDemo.integer && *cg_recordSPDemoName.string) {
;492:			trap_SendConsoleCommand(va("set g_synchronousclients 1 ; record %s \n", cg_recordSPDemoName.string));
;493:		}
;494:	}
;495:#endif
;496:
;497:	trap_Cvar_Set("cg_thirdPerson", "0");
ADDRGP4 $398
ARGP4
ADDRGP4 $399
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 498
;498:}
LABELV $377
endproc CG_MapRestart 0 8
proc CG_RemoveChatEscapeChar 12 0
line 958
;499:
;500:#ifdef MISSIONPACK
;501:
;502:#define MAX_VOICEFILESIZE 16384
;503:#define MAX_VOICEFILES    8
;504:#define MAX_VOICECHATS    64
;505:#define MAX_VOICESOUNDS   64
;506:#define MAX_CHATSIZE      64
;507:#define MAX_HEADMODELS    64
;508:
;509:typedef struct voiceChat_s {
;510:	char        id[64];
;511:	int         numSounds;
;512:	sfxHandle_t sounds[MAX_VOICESOUNDS];
;513:	char        chats[MAX_VOICESOUNDS][MAX_CHATSIZE];
;514:} voiceChat_t;
;515:
;516:typedef struct voiceChatList_s {
;517:	char        name[64];
;518:	int         gender;
;519:	int         numVoiceChats;
;520:	voiceChat_t voiceChats[MAX_VOICECHATS];
;521:} voiceChatList_t;
;522:
;523:typedef struct headModelVoiceChat_s {
;524:	char headmodel[64];
;525:	int  voiceChatNum;
;526:} headModelVoiceChat_t;
;527:
;528:voiceChatList_t      voiceChatLists[MAX_VOICEFILES];
;529:headModelVoiceChat_t headModelVoiceChat[MAX_HEADMODELS];
;530:
;531:/*
;532:=================
;533:CG_ParseVoiceChats
;534:=================
;535:*/
;536:int CG_ParseVoiceChats(const char* filename, voiceChatList_t* voiceChatList, int maxVoiceChats) {
;537:	int          len, i;
;538:	fileHandle_t f;
;539:	char         buf[MAX_VOICEFILESIZE];
;540:	char **      p, *ptr;
;541:	char*        token;
;542:	voiceChat_t* voiceChats;
;543:	qboolean     compress;
;544:	sfxHandle_t  sound;
;545:
;546:	compress = qtrue;
;547:	if (cg_buildScript.integer) {
;548:		compress = qfalse;
;549:	}
;550:
;551:	len = trap_FS_FOpenFile(filename, &f, FS_READ);
;552:	if (f == FS_INVALID_HANDLE) {
;553:		trap_Print(va(S_COLOR_RED "voice chat file not found: %s\n", filename));
;554:		return qfalse;
;555:	}
;556:	if (len >= MAX_VOICEFILESIZE) {
;557:		trap_Print(va(S_COLOR_RED "voice chat file too large: %s is %i, max allowed is %i", filename, len, MAX_VOICEFILESIZE));
;558:		trap_FS_FCloseFile(f);
;559:		return qfalse;
;560:	}
;561:
;562:	trap_FS_Read(buf, len, f);
;563:	buf[len] = 0;
;564:	trap_FS_FCloseFile(f);
;565:
;566:	ptr = buf;
;567:	p   = &ptr;
;568:
;569:	Com_sprintf(voiceChatList->name, sizeof(voiceChatList->name), "%s", filename);
;570:	voiceChats = voiceChatList->voiceChats;
;571:	for (i = 0; i < maxVoiceChats; i++) {
;572:		voiceChats[i].id[0] = 0;
;573:	}
;574:	token = COM_ParseExt(p, qtrue);
;575:	if (token[0] == '\0') {
;576:		return qtrue;
;577:	}
;578:	if (!Q_stricmp(token, "female")) {
;579:		voiceChatList->gender = GENDER_FEMALE;
;580:	} else if (!Q_stricmp(token, "male")) {
;581:		voiceChatList->gender = GENDER_MALE;
;582:	} else if (!Q_stricmp(token, "neuter")) {
;583:		voiceChatList->gender = GENDER_NEUTER;
;584:	} else {
;585:		trap_Print(va(S_COLOR_RED "expected gender not found in voice chat file: %s\n", filename));
;586:		return qfalse;
;587:	}
;588:
;589:	voiceChatList->numVoiceChats = 0;
;590:	while (1) {
;591:		token = COM_ParseExt(p, qtrue);
;592:		if (token[0] == '\0') {
;593:			return qtrue;
;594:		}
;595:		Com_sprintf(voiceChats[voiceChatList->numVoiceChats].id, sizeof(voiceChats[voiceChatList->numVoiceChats].id), "%s", token);
;596:		token = COM_ParseExt(p, qtrue);
;597:		if (Q_stricmp(token, "{")) {
;598:			trap_Print(va(S_COLOR_RED "expected { found %s in voice chat file: %s\n", token, filename));
;599:			return qfalse;
;600:		}
;601:		voiceChats[voiceChatList->numVoiceChats].numSounds = 0;
;602:		while (1) {
;603:			token = COM_ParseExt(p, qtrue);
;604:			if (token[0] == '\0') {
;605:				return qtrue;
;606:			}
;607:			if (!Q_stricmp(token, "}"))
;608:				break;
;609:			sound                                                                                               = trap_S_RegisterSound(token, compress);
;610:			voiceChats[voiceChatList->numVoiceChats].sounds[voiceChats[voiceChatList->numVoiceChats].numSounds] = sound;
;611:			token                                                                                               = COM_ParseExt(p, qtrue);
;612:			if (token[0] == '\0') {
;613:				return qtrue;
;614:			}
;615:			Com_sprintf(voiceChats[voiceChatList->numVoiceChats].chats[voiceChats[voiceChatList->numVoiceChats].numSounds], MAX_CHATSIZE, "%s", token);
;616:			if (sound)
;617:				voiceChats[voiceChatList->numVoiceChats].numSounds++;
;618:			if (voiceChats[voiceChatList->numVoiceChats].numSounds >= MAX_VOICESOUNDS)
;619:				break;
;620:		}
;621:		voiceChatList->numVoiceChats++;
;622:		if (voiceChatList->numVoiceChats >= maxVoiceChats)
;623:			return qtrue;
;624:	}
;625:	return qtrue;
;626:}
;627:
;628:/*
;629:=================
;630:CG_LoadVoiceChats
;631:=================
;632:*/
;633:void CG_LoadVoiceChats(void) {
;634:	int size;
;635:
;636:	size = trap_MemoryRemaining();
;637:	CG_ParseVoiceChats("scripts/female1.voice", &voiceChatLists[0], MAX_VOICECHATS);
;638:	CG_ParseVoiceChats("scripts/female2.voice", &voiceChatLists[1], MAX_VOICECHATS);
;639:	CG_ParseVoiceChats("scripts/female3.voice", &voiceChatLists[2], MAX_VOICECHATS);
;640:	CG_ParseVoiceChats("scripts/male1.voice", &voiceChatLists[3], MAX_VOICECHATS);
;641:	CG_ParseVoiceChats("scripts/male2.voice", &voiceChatLists[4], MAX_VOICECHATS);
;642:	CG_ParseVoiceChats("scripts/male3.voice", &voiceChatLists[5], MAX_VOICECHATS);
;643:	CG_ParseVoiceChats("scripts/male4.voice", &voiceChatLists[6], MAX_VOICECHATS);
;644:	CG_ParseVoiceChats("scripts/male5.voice", &voiceChatLists[7], MAX_VOICECHATS);
;645:	CG_Printf("voice chat memory size = %d\n", size - trap_MemoryRemaining());
;646:}
;647:
;648:/*
;649:=================
;650:CG_HeadModelVoiceChats
;651:=================
;652:*/
;653:int CG_HeadModelVoiceChats(char* filename) {
;654:	int          len, i;
;655:	fileHandle_t f;
;656:	char         buf[MAX_VOICEFILESIZE];
;657:	char **      p, *ptr;
;658:	char*        token;
;659:
;660:	len = trap_FS_FOpenFile(filename, &f, FS_READ);
;661:	if (f == FS_INVALID_HANDLE) {
;662:		// trap_Print( va( "voice chat file not found: %s\n", filename ) );
;663:		return -1;
;664:	}
;665:	if (len >= MAX_VOICEFILESIZE) {
;666:		trap_Print(va(S_COLOR_RED "voice chat file too large: %s is %i, max allowed is %i", filename, len, MAX_VOICEFILESIZE));
;667:		trap_FS_FCloseFile(f);
;668:		return -1;
;669:	}
;670:
;671:	trap_FS_Read(buf, len, f);
;672:	buf[len] = 0;
;673:	trap_FS_FCloseFile(f);
;674:
;675:	ptr = buf;
;676:	p   = &ptr;
;677:
;678:	token = COM_ParseExt(p, qtrue);
;679:	if (token[0] == '\0') {
;680:		return -1;
;681:	}
;682:
;683:	for (i = 0; i < MAX_VOICEFILES; i++) {
;684:		if (!Q_stricmp(token, voiceChatLists[i].name)) {
;685:			return i;
;686:		}
;687:	}
;688:
;689:	// FIXME: maybe try to load the .voice file which name is stored in token?
;690:
;691:	return -1;
;692:}
;693:
;694:/*
;695:=================
;696:CG_GetVoiceChat
;697:=================
;698:*/
;699:int CG_GetVoiceChat(voiceChatList_t* voiceChatList, const char* id, sfxHandle_t* snd, char** chat) {
;700:	int i, rnd;
;701:
;702:	for (i = 0; i < voiceChatList->numVoiceChats; i++) {
;703:		if (!Q_stricmp(id, voiceChatList->voiceChats[i].id)) {
;704:			rnd   = random() * voiceChatList->voiceChats[i].numSounds;
;705:			*snd  = voiceChatList->voiceChats[i].sounds[rnd];
;706:			*chat = voiceChatList->voiceChats[i].chats[rnd];
;707:			return qtrue;
;708:		}
;709:	}
;710:	return qfalse;
;711:}
;712:
;713:/*
;714:=================
;715:CG_VoiceChatListForClient
;716:=================
;717:*/
;718:voiceChatList_t* CG_VoiceChatListForClient(int clientNum) {
;719:	clientInfo_t* ci;
;720:	int           voiceChatNum, i, j, k, gender;
;721:	char          filename[MAX_QPATH], headModelName[MAX_QPATH];
;722:
;723:	if (clientNum < 0 || clientNum >= MAX_CLIENTS) {
;724:		clientNum = 0;
;725:	}
;726:	ci = &cgs.clientinfo[clientNum];
;727:
;728:	for (k = 0; k < 2; k++) {
;729:		if (k == 0) {
;730:			if (ci->headModelName[0] == '*') {
;731:				Com_sprintf(headModelName, sizeof(headModelName), "%s/%s", ci->headModelName + 1, ci->headSkinName);
;732:			} else {
;733:				Com_sprintf(headModelName, sizeof(headModelName), "%s/%s", ci->headModelName, ci->headSkinName);
;734:			}
;735:		} else {
;736:			if (ci->headModelName[0] == '*') {
;737:				Com_sprintf(headModelName, sizeof(headModelName), "%s", ci->headModelName + 1);
;738:			} else {
;739:				Com_sprintf(headModelName, sizeof(headModelName), "%s", ci->headModelName);
;740:			}
;741:		}
;742:		// find the voice file for the head model the client uses
;743:		for (i = 0; i < MAX_HEADMODELS; i++) {
;744:			if (!Q_stricmp(headModelVoiceChat[i].headmodel, headModelName)) {
;745:				break;
;746:			}
;747:		}
;748:		if (i < MAX_HEADMODELS) {
;749:			return &voiceChatLists[headModelVoiceChat[i].voiceChatNum];
;750:		}
;751:		// find a <headmodelname>.vc file
;752:		for (i = 0; i < MAX_HEADMODELS; i++) {
;753:			if (!strlen(headModelVoiceChat[i].headmodel)) {
;754:				Com_sprintf(filename, sizeof(filename), "scripts/%s.vc", headModelName);
;755:				voiceChatNum = CG_HeadModelVoiceChats(filename);
;756:				if (voiceChatNum == -1)
;757:					break;
;758:				Com_sprintf(headModelVoiceChat[i].headmodel, sizeof(headModelVoiceChat[i].headmodel), "%s", headModelName);
;759:				headModelVoiceChat[i].voiceChatNum = voiceChatNum;
;760:				return &voiceChatLists[headModelVoiceChat[i].voiceChatNum];
;761:			}
;762:		}
;763:	}
;764:	gender = ci->gender;
;765:	for (k = 0; k < 2; k++) {
;766:		// just pick the first with the right gender
;767:		for (i = 0; i < MAX_VOICEFILES; i++) {
;768:			if (strlen(voiceChatLists[i].name)) {
;769:				if (voiceChatLists[i].gender == gender) {
;770:					// store this head model with voice chat for future reference
;771:					for (j = 0; j < MAX_HEADMODELS; j++) {
;772:						if (!strlen(headModelVoiceChat[j].headmodel)) {
;773:							Com_sprintf(headModelVoiceChat[j].headmodel, sizeof(headModelVoiceChat[j].headmodel), "%s", headModelName);
;774:							headModelVoiceChat[j].voiceChatNum = i;
;775:							break;
;776:						}
;777:					}
;778:					return &voiceChatLists[i];
;779:				}
;780:			}
;781:		}
;782:		// fall back to male gender because we don't have neuter in the mission pack
;783:		if (gender == GENDER_MALE)
;784:			break;
;785:		gender = GENDER_MALE;
;786:	}
;787:	// store this head model with voice chat for future reference
;788:	for (j = 0; j < MAX_HEADMODELS; j++) {
;789:		if (!strlen(headModelVoiceChat[j].headmodel)) {
;790:			Com_sprintf(headModelVoiceChat[j].headmodel, sizeof(headModelVoiceChat[j].headmodel), "%s", headModelName);
;791:			headModelVoiceChat[j].voiceChatNum = 0;
;792:			break;
;793:		}
;794:	}
;795:	// just return the first voice chat list
;796:	return &voiceChatLists[0];
;797:}
;798:
;799:#define MAX_VOICECHATBUFFER 32
;800:
;801:typedef struct bufferedVoiceChat_s {
;802:	int         clientNum;
;803:	sfxHandle_t snd;
;804:	int         voiceOnly;
;805:	char        cmd[MAX_SAY_TEXT];
;806:	char        message[MAX_SAY_TEXT];
;807:} bufferedVoiceChat_t;
;808:
;809:bufferedVoiceChat_t voiceChatBuffer[MAX_VOICECHATBUFFER];
;810:
;811:/*
;812:=================
;813:CG_PlayVoiceChat
;814:=================
;815:*/
;816:void CG_PlayVoiceChat(bufferedVoiceChat_t* vchat) {
;817:
;818:	// if we are going into the intermission, don't start any voices
;819:	if (cg.intermissionStarted) {
;820:		return;
;821:	}
;822:
;823:	if (!cg_noVoiceChats.integer) {
;824:		trap_S_StartLocalSound(vchat->snd, CHAN_VOICE);
;825:		if (vchat->clientNum != cg.snap->ps.clientNum) {
;826:			int orderTask = CG_ValidOrder(vchat->cmd);
;827:			if (orderTask > 0) {
;828:				cgs.acceptOrderTime = cg.time + 5000;
;829:				Q_strncpyz(cgs.acceptVoice, vchat->cmd, sizeof(cgs.acceptVoice));
;830:				cgs.acceptTask   = orderTask;
;831:				cgs.acceptLeader = vchat->clientNum;
;832:			}
;833:			// see if this was an order
;834:			CG_ShowResponseHead();
;835:		}
;836:	}
;837:	if (!vchat->voiceOnly && !cg_noVoiceText.integer) {
;838:		CG_AddToTeamChat(vchat->message);
;839:		CG_Printf("%s\n", vchat->message);
;840:	}
;841:	voiceChatBuffer[cg.voiceChatBufferOut].snd = 0;
;842:}
;843:
;844:/*
;845:=====================
;846:CG_PlayBufferedVoieChats
;847:=====================
;848:*/
;849:void CG_PlayBufferedVoiceChats(void) {
;850:	if (cg.voiceChatTime < cg.time) {
;851:		if (cg.voiceChatBufferOut != cg.voiceChatBufferIn && voiceChatBuffer[cg.voiceChatBufferOut].snd) {
;852:			//
;853:			CG_PlayVoiceChat(&voiceChatBuffer[cg.voiceChatBufferOut]);
;854:			//
;855:			cg.voiceChatBufferOut = (cg.voiceChatBufferOut + 1) % MAX_VOICECHATBUFFER;
;856:			cg.voiceChatTime      = cg.time + 1000;
;857:		}
;858:	}
;859:}
;860:
;861:/*
;862:=====================
;863:CG_AddBufferedVoiceChat
;864:=====================
;865:*/
;866:void CG_AddBufferedVoiceChat(bufferedVoiceChat_t* vchat) {
;867:
;868:	// if we are going into the intermission, don't start any voices
;869:	if (cg.intermissionStarted) {
;870:		return;
;871:	}
;872:
;873:	memcpy(&voiceChatBuffer[cg.voiceChatBufferIn], vchat, sizeof(bufferedVoiceChat_t));
;874:	cg.voiceChatBufferIn = (cg.voiceChatBufferIn + 1) % MAX_VOICECHATBUFFER;
;875:	if (cg.voiceChatBufferIn == cg.voiceChatBufferOut) {
;876:		CG_PlayVoiceChat(&voiceChatBuffer[cg.voiceChatBufferOut]);
;877:		cg.voiceChatBufferOut++;
;878:	}
;879:}
;880:
;881:/*
;882:=================
;883:CG_VoiceChatLocal
;884:=================
;885:*/
;886:void CG_VoiceChatLocal(int mode, qboolean voiceOnly, int clientNum, int color, const char* cmd) {
;887:
;888:	char*               chat;
;889:	voiceChatList_t*    voiceChatList;
;890:	clientInfo_t*       ci;
;891:	sfxHandle_t         snd;
;892:	bufferedVoiceChat_t vchat;
;893:
;894:	// if we are going into the intermission, don't start any voices
;895:	if (cg.intermissionStarted) {
;896:		return;
;897:	}
;898:
;899:	if (clientNum < 0 || clientNum >= MAX_CLIENTS) {
;900:		clientNum = 0;
;901:	}
;902:	ci = &cgs.clientinfo[clientNum];
;903:
;904:	cgs.currentVoiceClient = clientNum;
;905:
;906:	voiceChatList = CG_VoiceChatListForClient(clientNum);
;907:
;908:	if (CG_GetVoiceChat(voiceChatList, cmd, &snd, &chat)) {
;909:		//
;910:		if (mode == SAY_TEAM || !cg_teamChatsOnly.integer) {
;911:			vchat.clientNum = clientNum;
;912:			vchat.snd       = snd;
;913:			vchat.voiceOnly = voiceOnly;
;914:			Q_strncpyz(vchat.cmd, cmd, sizeof(vchat.cmd));
;915:			if (mode == SAY_TELL) {
;916:				Com_sprintf(vchat.message, sizeof(vchat.message), "[%s]: %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
;917:			} else if (mode == SAY_TEAM) {
;918:				Com_sprintf(vchat.message, sizeof(vchat.message), "(%s): %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
;919:			} else {
;920:				Com_sprintf(vchat.message, sizeof(vchat.message), "%s: %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
;921:			}
;922:			CG_AddBufferedVoiceChat(&vchat);
;923:		}
;924:	}
;925:}
;926:
;927:/*
;928:=================
;929:CG_VoiceChat
;930:=================
;931:*/
;932:void CG_VoiceChat(int mode) {
;933:	const char* cmd;
;934:	int         clientNum, color;
;935:	qboolean    voiceOnly;
;936:
;937:	voiceOnly = atoi(CG_Argv(1));
;938:	clientNum = atoi(CG_Argv(2));
;939:	color     = atoi(CG_Argv(3));
;940:	cmd       = CG_Argv(4);
;941:
;942:	if (cg_noTaunt.integer != 0) {
;943:		if (!strcmp(cmd, VOICECHAT_KILLINSULT) || !strcmp(cmd, VOICECHAT_TAUNT) || !strcmp(cmd, VOICECHAT_DEATHINSULT) ||
;944:		    !strcmp(cmd, VOICECHAT_KILLGAUNTLET) || !strcmp(cmd, VOICECHAT_PRAISE)) {
;945:			return;
;946:		}
;947:	}
;948:
;949:	CG_VoiceChatLocal(mode, voiceOnly, clientNum, color, cmd);
;950:}
;951:#endif  // MISSIONPACK
;952:
;953:/*
;954:=================
;955:CG_RemoveChatEscapeChar
;956:=================
;957:*/
;958:static void CG_RemoveChatEscapeChar(char* text) {
line 961
;959:	int i, l;
;960:
;961:	l = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 962
;962:	for (i = 0; text[i]; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $404
JUMPV
LABELV $401
line 963
;963:		if (text[i] == '\x19')
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 25
NEI4 $405
line 964
;964:			continue;
ADDRGP4 $402
JUMPV
LABELV $405
line 965
;965:		text[l] = text[i];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 966
;966:		l++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 967
;967:	}
LABELV $402
line 962
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $404
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $401
line 968
;968:	text[l] = '\0';
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 969
;969:}
LABELV $400
endproc CG_RemoveChatEscapeChar 12 0
proc CG_TimerStart 0 0
line 973
;970:
;971://:::::::::::::::::::::::::::::::::::::::::
;972:// Basic Start/End timer support
;973:static void CG_TimerStart(int timer) {
line 975
;974:	// Time started by trigger
;975:	cg.timer_start = timer;  // Set timer_start as the commandTime when start trigger was hit (comes from servercommand)
ADDRGP4 cg+149092
ADDRFP4 0
INDIRI4
ASGNI4
line 976
;976:	cg.timer_stop  = -1;     // Disable timer_stop, so we can draw timer_start
ADDRGP4 cg+149096
CNSTI4 -1
ASGNI4
line 977
;977:}
LABELV $407
endproc CG_TimerStart 0 0
proc CG_TimerStop 4 0
line 979
;978://..............................................
;979:static void CG_TimerStop(int timer) {
line 981
;980:	// Time stopped/canceled without trigger
;981:	cg.timer_stop  = cg.timer_stop < 0 ? timer - cg.timer_start : 0;  // Servertime - startTime at the moment of stopping the clock (comes from servercommand)
ADDRGP4 cg+149096
INDIRI4
CNSTI4 0
GEI4 $415
ADDRLP4 0
ADDRFP4 0
INDIRI4
ADDRGP4 cg+149092
INDIRI4
SUBI4
ASGNI4
ADDRGP4 $416
JUMPV
LABELV $415
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $416
ADDRGP4 cg+149096
ADDRLP4 0
INDIRI4
ASGNI4
line 982
;982:	cg.timer_start = -1;                                              // disable timer_start, so we can draw timer_stop
ADDRGP4 cg+149092
CNSTI4 -1
ASGNI4
line 983
;983:}
LABELV $410
endproc CG_TimerStop 4 0
proc CG_TimerEnd 4 0
line 985
;984://..............................................
;985:static void CG_TimerEnd(int timer) {
line 987
;986:	// Time ended by trigger
;987:	if (cg.timer_stop >= 0) {
ADDRGP4 cg+149096
INDIRI4
CNSTI4 0
LTI4 $419
line 988
;988:		return;
ADDRGP4 $418
JUMPV
LABELV $419
line 990
;989:	}                                        // Only update timer_end when the timer is not stopped (aka trigger once)
;990:	cg.timer_end  = timer - cg.timer_start;  // Servertime - startTime when end trigger was hit (comes from servercommand)
ADDRGP4 cg+149100
ADDRFP4 0
INDIRI4
ADDRGP4 cg+149092
INDIRI4
SUBI4
ASGNI4
line 991
;991:	cg.timer_stop = cg.timer_end;            // Stop the active timer
ADDRGP4 cg+149096
ADDRGP4 cg+149100
INDIRI4
ASGNI4
line 992
;992:	if (!cg.timer_best) {
ADDRGP4 cg+149104
INDIRI4
CNSTI4 0
NEI4 $426
line 993
;993:		cg.timer_best = cg.timer_end;
ADDRGP4 cg+149104
ADDRGP4 cg+149100
INDIRI4
ASGNI4
line 994
;994:	}  // If there is no best timer yet, mark timer_end as current best time
ADDRGP4 $427
JUMPV
LABELV $426
line 995
;995:	else {
line 996
;996:		cg.timer_best = cg.timer_end < cg.timer_best ? cg.timer_end : cg.timer_best;
ADDRGP4 cg+149100
INDIRI4
ADDRGP4 cg+149104
INDIRI4
GEI4 $437
ADDRLP4 0
ADDRGP4 cg+149100
INDIRI4
ASGNI4
ADDRGP4 $438
JUMPV
LABELV $437
ADDRLP4 0
ADDRGP4 cg+149104
INDIRI4
ASGNI4
LABELV $438
ADDRGP4 cg+149104
ADDRLP4 0
INDIRI4
ASGNI4
line 997
;997:	}  // Replace best time if timer_end is lower than best time, and replace it if
LABELV $427
line 999
;998:	   // Com_Printf("timer_end= %i :: timer_best= %i\n", cg.timer_end, cg.timer_best);
;999:}
LABELV $418
endproc CG_TimerEnd 4 0
proc CG_TimerCheckpoint 0 0
line 1001
;1000://..............................................
;1001:static void CG_TimerCheckpoint(int timer) {
line 1003
;1002:	// do timer cp here
;1003:}
LABELV $439
endproc CG_TimerCheckpoint 0 0
proc CG_ServerCommand 408 12
line 1014
;1004://:::::::::::::::::::::::::::::::::::::::::
;1005:
;1006:/*
;1007:=================
;1008:CG_ServerCommand
;1009:
;1010:The string has been tokenized and can be retrieved with
;1011:Cmd_Argc() / Cmd_Argv()
;1012:=================
;1013:*/
;1014:static void CG_ServerCommand(void) {
line 1018
;1015:	const char *cmd, *id;
;1016:	char        text[MAX_SAY_TEXT];
;1017:
;1018:	cmd = CG_Argv(0);
CNSTI4 0
ARGI4
ADDRLP4 160
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 160
INDIRP4
ASGNP4
line 1020
;1019:
;1020:	if (!cmd[0]) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $441
line 1022
;1021:		// server claimed the command
;1022:		return;
ADDRGP4 $440
JUMPV
LABELV $441
line 1025
;1023:	}
;1024:
;1025:	if (!strcmp(cmd, "cp")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $445
ARGP4
ADDRLP4 164
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 0
NEI4 $443
line 1026
;1026:		CG_CenterPrint(CG_Argv(1), SCREEN_HEIGHT * 0.30, BIGCHAR_WIDTH);
CNSTI4 1
ARGI4
ADDRLP4 168
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
CNSTI4 144
ARGI4
CNSTI4 16
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 1027
;1027:		return;
ADDRGP4 $440
JUMPV
LABELV $443
line 1030
;1028:	}
;1029:
;1030:	if (!strcmp(cmd, "cs")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $448
ARGP4
ADDRLP4 168
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 0
NEI4 $446
line 1031
;1031:		CG_ConfigStringModified();
ADDRGP4 CG_ConfigStringModified
CALLV
pop
line 1032
;1032:		return;
ADDRGP4 $440
JUMPV
LABELV $446
line 1035
;1033:	}
;1034:
;1035:	if (!strcmp(cmd, "print")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $451
ARGP4
ADDRLP4 172
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 172
INDIRI4
CNSTI4 0
NEI4 $449
line 1036
;1036:		CG_Printf("%s", CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 176
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $452
ARGP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1046
;1037:#ifdef MISSIONPACK
;1038:		cmd = CG_Argv(1);  // yes, this is obviously a hack, but so is the way we hear about
;1039:		                   // votes passing or failing
;1040:		if (!Q_stricmpn(cmd, "vote failed", 11) || !Q_stricmpn(cmd, "team vote failed", 16)) {
;1041:			trap_S_StartLocalSound(cgs.media.voteFailed, CHAN_ANNOUNCER);
;1042:		} else if (!Q_stricmpn(cmd, "vote passed", 11) || !Q_stricmpn(cmd, "team vote passed", 16)) {
;1043:			trap_S_StartLocalSound(cgs.media.votePassed, CHAN_ANNOUNCER);
;1044:		}
;1045:#endif
;1046:		return;
ADDRGP4 $440
JUMPV
LABELV $449
line 1049
;1047:	}
;1048:
;1049:	if (!strcmp(cmd, "chat")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $455
ARGP4
ADDRLP4 176
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 176
INDIRI4
CNSTI4 0
NEI4 $453
line 1050
;1050:		if (!cg_teamChatsOnly.integer) {
ADDRGP4 cg_teamChatsOnly+12
INDIRI4
CNSTI4 0
NEI4 $440
line 1051
;1051:			trap_S_StartLocalSound(cgs.media.talkSound, CHAN_LOCAL_SOUND);
ADDRGP4 cgs+148692+716
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1052
;1052:			Q_strncpyz(text, CG_Argv(1), MAX_SAY_TEXT);
CNSTI4 1
ARGI4
ADDRLP4 180
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 180
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1053
;1053:			CG_RemoveChatEscapeChar(text);
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 1054
;1054:			id = CG_Argv(2);
CNSTI4 2
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 156
ADDRLP4 184
INDIRP4
ASGNP4
line 1055
;1055:			if (*id >= '0' && *id <= '9')
ADDRLP4 188
ADDRLP4 156
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 48
LTI4 $461
ADDRLP4 188
INDIRI4
CNSTI4 57
GTI4 $461
line 1056
;1056:				CG_Printf("(%i) %s\n", atoi(id), text);
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 192
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 $463
ARGP4
ADDRLP4 192
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
ADDRGP4 $440
JUMPV
LABELV $461
line 1058
;1057:			else
;1058:				CG_Printf("%s\n", text);
ADDRGP4 $464
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1059
;1059:		}
line 1060
;1060:		return;
ADDRGP4 $440
JUMPV
LABELV $453
line 1063
;1061:	}
;1062:
;1063:	if (!strcmp(cmd, "tchat")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $467
ARGP4
ADDRLP4 180
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 180
INDIRI4
CNSTI4 0
NEI4 $465
line 1064
;1064:		trap_S_StartLocalSound(cgs.media.talkSound, CHAN_LOCAL_SOUND);
ADDRGP4 cgs+148692+716
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1065
;1065:		Q_strncpyz(text, CG_Argv(1), MAX_SAY_TEXT);
CNSTI4 1
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 184
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1066
;1066:		CG_RemoveChatEscapeChar(text);
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 1067
;1067:		CG_AddToTeamChat(text);
ADDRLP4 4
ARGP4
ADDRGP4 CG_AddToTeamChat
CALLV
pop
line 1068
;1068:		id = CG_Argv(2);
CNSTI4 2
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 156
ADDRLP4 188
INDIRP4
ASGNP4
line 1069
;1069:		if (*id >= '0' && *id <= '9')
ADDRLP4 192
ADDRLP4 156
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 48
LTI4 $470
ADDRLP4 192
INDIRI4
CNSTI4 57
GTI4 $470
line 1070
;1070:			CG_Printf("(%i) %s\n", atoi(id), text);
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 196
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 $463
ARGP4
ADDRLP4 196
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
ADDRGP4 $440
JUMPV
LABELV $470
line 1072
;1071:		else
;1072:			CG_Printf("%s\n", text);
ADDRGP4 $464
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1073
;1073:		return;
ADDRGP4 $440
JUMPV
LABELV $465
line 1093
;1074:	}
;1075:
;1076:#ifdef MISSIONPACK
;1077:	if (!strcmp(cmd, "vchat")) {
;1078:		CG_VoiceChat(SAY_ALL);
;1079:		return;
;1080:	}
;1081:
;1082:	if (!strcmp(cmd, "vtchat")) {
;1083:		CG_VoiceChat(SAY_TEAM);
;1084:		return;
;1085:	}
;1086:
;1087:	if (!strcmp(cmd, "vtell")) {
;1088:		CG_VoiceChat(SAY_TELL);
;1089:		return;
;1090:	}
;1091:#endif
;1092:
;1093:	if (!strcmp(cmd, "scores")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $474
ARGP4
ADDRLP4 184
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
NEI4 $472
line 1094
;1094:		CG_ParseScores();
ADDRGP4 CG_ParseScores
CALLV
pop
line 1095
;1095:		return;
ADDRGP4 $440
JUMPV
LABELV $472
line 1098
;1096:	}
;1097:
;1098:	if (!strcmp(cmd, "tinfo")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $477
ARGP4
ADDRLP4 188
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 0
NEI4 $475
line 1099
;1099:		CG_ParseTeamInfo();
ADDRGP4 CG_ParseTeamInfo
CALLV
pop
line 1100
;1100:		return;
ADDRGP4 $440
JUMPV
LABELV $475
line 1103
;1101:	}
;1102:
;1103:	if (!strcmp(cmd, "map_restart")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $480
ARGP4
ADDRLP4 192
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 0
NEI4 $478
line 1104
;1104:		CG_MapRestart();
ADDRGP4 CG_MapRestart
CALLV
pop
line 1105
;1105:		return;
ADDRGP4 $440
JUMPV
LABELV $478
line 1108
;1106:	}
;1107:
;1108:	if (Q_stricmp(cmd, "remapShader") == 0) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $483
ARGP4
ADDRLP4 196
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 0
NEI4 $481
line 1109
;1109:		if (trap_Argc() == 4) {
ADDRLP4 200
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 4
NEI4 $440
line 1114
;1110:			char shader1[MAX_QPATH];
;1111:			char shader2[MAX_QPATH];
;1112:			char shader3[MAX_QPATH];
;1113:
;1114:			Q_strncpyz(shader1, CG_Argv(1), sizeof(shader1));
CNSTI4 1
ARGI4
ADDRLP4 396
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 204
ARGP4
ADDRLP4 396
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1115
;1115:			Q_strncpyz(shader2, CG_Argv(2), sizeof(shader2));
CNSTI4 2
ARGI4
ADDRLP4 400
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 268
ARGP4
ADDRLP4 400
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1116
;1116:			Q_strncpyz(shader3, CG_Argv(3), sizeof(shader3));
CNSTI4 3
ARGI4
ADDRLP4 404
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 332
ARGP4
ADDRLP4 404
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1118
;1117:
;1118:			trap_R_RemapShader(shader1, shader2, shader3);
ADDRLP4 204
ARGP4
ADDRLP4 268
ARGP4
ADDRLP4 332
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 1119
;1119:		}
line 1121
;1120:
;1121:		return;
ADDRGP4 $440
JUMPV
LABELV $481
line 1125
;1122:	}
;1123:
;1124:	// loaddeferred can be both a servercmd and a consolecmd
;1125:	if (!strcmp(cmd, "loaddeferred")) {  // FIXME: spelled wrong, but not changing for demo
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $488
ARGP4
ADDRLP4 200
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 0
NEI4 $486
line 1126
;1126:		CG_LoadDeferredPlayers();
ADDRGP4 CG_LoadDeferredPlayers
CALLV
pop
line 1127
;1127:		return;
ADDRGP4 $440
JUMPV
LABELV $486
line 1132
;1128:	}
;1129:
;1130:	// clientLevelShot is sent before taking a special screenshot for
;1131:	// the menu system during development
;1132:	if (!strcmp(cmd, "clientLevelShot")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $491
ARGP4
ADDRLP4 204
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 0
NEI4 $489
line 1133
;1133:		cg.levelShot = qtrue;
ADDRGP4 cg+12
CNSTI4 1
ASGNI4
line 1134
;1134:		return;
ADDRGP4 $440
JUMPV
LABELV $489
line 1137
;1135:	}
;1136:
;1137:	if (cgs.defrag && cg.demoPlayback) {
ADDRGP4 cgs+149692
INDIRI4
CNSTI4 0
EQI4 $493
ADDRGP4 cg+8
INDIRI4
CNSTI4 0
EQI4 $493
line 1138
;1138:		if (!strcmp(cmd, "aswitch") || !strcmp(cmd, "stats")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $499
ARGP4
ADDRLP4 208
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
EQI4 $501
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $500
ARGP4
ADDRLP4 212
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 0
NEI4 $497
LABELV $501
line 1139
;1139:			return;
ADDRGP4 $440
JUMPV
LABELV $497
line 1141
;1140:		}
;1141:	}
LABELV $493
line 1144
;1142:
;1143:	// Basic Start/End timer support. Server command bindings
;1144:	if (!Q_stricmp(cmd, "timerStart")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $504
ARGP4
ADDRLP4 208
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
NEI4 $502
line 1145
;1145:		CG_TimerStart(atoi(CG_Argv(1)));
CNSTI4 1
ARGI4
ADDRLP4 212
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 212
INDIRP4
ARGP4
ADDRLP4 216
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 216
INDIRI4
ARGI4
ADDRGP4 CG_TimerStart
CALLV
pop
line 1146
;1146:		return;
ADDRGP4 $440
JUMPV
LABELV $502
line 1148
;1147:	}
;1148:	if (!Q_stricmp(cmd, "timerStop")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $507
ARGP4
ADDRLP4 212
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 0
NEI4 $505
line 1149
;1149:		CG_TimerStop(atoi(CG_Argv(1)));
CNSTI4 1
ARGI4
ADDRLP4 216
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRLP4 220
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 220
INDIRI4
ARGI4
ADDRGP4 CG_TimerStop
CALLV
pop
line 1150
;1150:		return;
ADDRGP4 $440
JUMPV
LABELV $505
line 1152
;1151:	}
;1152:	if (!Q_stricmp(cmd, "timerEnd")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $510
ARGP4
ADDRLP4 216
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 216
INDIRI4
CNSTI4 0
NEI4 $508
line 1153
;1153:		CG_TimerEnd(atoi(CG_Argv(1)));
CNSTI4 1
ARGI4
ADDRLP4 220
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 220
INDIRP4
ARGP4
ADDRLP4 224
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 224
INDIRI4
ARGI4
ADDRGP4 CG_TimerEnd
CALLV
pop
line 1154
;1154:		return;
ADDRGP4 $440
JUMPV
LABELV $508
line 1156
;1155:	}
;1156:	if (!Q_stricmp(cmd, "timerCheckpoint")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $513
ARGP4
ADDRLP4 220
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 220
INDIRI4
CNSTI4 0
NEI4 $511
line 1157
;1157:		CG_TimerCheckpoint(atoi(CG_Argv(1)));
CNSTI4 1
ARGI4
ADDRLP4 224
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 224
INDIRP4
ARGP4
ADDRLP4 228
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 228
INDIRI4
ARGI4
ADDRGP4 CG_TimerCheckpoint
CALLV
pop
line 1158
;1158:		return;
ADDRGP4 $440
JUMPV
LABELV $511
line 1161
;1159:	}
;1160:
;1161:	CG_Printf("Unknown client game command: %s\n", cmd);
ADDRGP4 $514
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1162
;1162:}
LABELV $440
endproc CG_ServerCommand 408 12
export CG_ExecuteNewServerCommands
proc CG_ExecuteNewServerCommands 12 4
line 1172
;1163:
;1164:/*
;1165:====================
;1166:CG_ExecuteNewServerCommands
;1167:
;1168:Execute all of the server commands that were received along
;1169:with this this snapshot.
;1170:====================
;1171:*/
;1172:void CG_ExecuteNewServerCommands(int latestSequence) {
ADDRGP4 $517
JUMPV
LABELV $516
line 1173
;1173:	while (cgs.serverCommandSequence < latestSequence) {
line 1174
;1174:		if (trap_GetServerCommand(++cgs.serverCommandSequence)) {
ADDRLP4 0
ADDRGP4 cgs+31468
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 trap_GetServerCommand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $520
line 1175
;1175:			CG_ServerCommand();
ADDRGP4 CG_ServerCommand
CALLV
pop
line 1176
;1176:		}
LABELV $520
line 1177
;1177:	}
LABELV $517
line 1173
ADDRGP4 cgs+31468
INDIRI4
ADDRFP4 0
INDIRI4
LTI4 $516
line 1178
;1178:}
LABELV $515
endproc CG_ExecuteNewServerCommands 12 4
import trap_R_AddLinearLightToScene
import trap_R_AddRefEntityToScene2
import linearLight
import intShaderTime
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_inPVS
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedCapsuleTrace
import trap_CM_TransformedBoxTrace
import trap_CM_CapsuleTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_RemoveCommand
import trap_AddCommand
import trap_RealTime
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_ScoreboardClick
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PlayDroppedEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_TrackClientTeamChange
import CG_ForceModelChange
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_SelectFont
import CG_LoadFonts
import CG_DrawString
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColorTime
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawStringExt
import CG_DrawPic
import CG_FillScreen
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_SetScoreCatcher
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import eventnames
import phy_movetype
import cg_timerBest_y
import cg_timerBest_x
import cg_timerActive_y
import cg_timerActive_x
import cg_timerSkim_y
import cg_timerSkim_x
import cg_speed_y
import cg_speed_x
import cg_followKiller
import cg_fovAdjust
import cg_deadBodyDarken
import cg_teamColors
import cg_teamModel
import cg_enemyColors
import cg_enemyModel
import cg_hitSounds
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import cg_smoothClients
import cg_scorePlum
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_drawSpeed
import cg_drawAttacker
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailRadius
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_drawWeaponSelect
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BigEndian
import replace1
import Q_stradd
import Q_strcpy
import BG_StripColor
import BG_CleanName
import DecodedString
import EncodedString
import strtok
import Q_stristr
import BG_sprintf
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_ValidateKeyValue
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import locase
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import Com_Split
import COM_ParseSep
import Com_InitSeparators
import SkipTillSeparators
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import VectorMAM
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import Q_sscanf
import ED_vsprintf
import atoi
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $514
byte 1 85
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $513
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 67
byte 1 104
byte 1 101
byte 1 99
byte 1 107
byte 1 112
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $510
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 69
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $507
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 83
byte 1 116
byte 1 111
byte 1 112
byte 1 0
align 1
LABELV $504
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 83
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 0
align 1
LABELV $500
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $499
byte 1 97
byte 1 115
byte 1 119
byte 1 105
byte 1 116
byte 1 99
byte 1 104
byte 1 0
align 1
LABELV $491
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 83
byte 1 104
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $488
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 114
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $483
byte 1 114
byte 1 101
byte 1 109
byte 1 97
byte 1 112
byte 1 83
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $480
byte 1 109
byte 1 97
byte 1 112
byte 1 95
byte 1 114
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 0
align 1
LABELV $477
byte 1 116
byte 1 105
byte 1 110
byte 1 102
byte 1 111
byte 1 0
align 1
LABELV $474
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $467
byte 1 116
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $464
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $463
byte 1 40
byte 1 37
byte 1 105
byte 1 41
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $455
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $452
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $451
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $448
byte 1 99
byte 1 115
byte 1 0
align 1
LABELV $445
byte 1 99
byte 1 112
byte 1 0
align 1
LABELV $399
byte 1 48
byte 1 0
align 1
LABELV $398
byte 1 99
byte 1 103
byte 1 95
byte 1 116
byte 1 104
byte 1 105
byte 1 114
byte 1 100
byte 1 80
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $381
byte 1 67
byte 1 71
byte 1 95
byte 1 77
byte 1 97
byte 1 112
byte 1 82
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $196
byte 1 103
byte 1 95
byte 1 115
byte 1 121
byte 1 110
byte 1 99
byte 1 104
byte 1 114
byte 1 111
byte 1 110
byte 1 111
byte 1 117
byte 1 115
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $186
byte 1 112
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 95
byte 1 109
byte 1 115
byte 1 101
byte 1 99
byte 1 0
align 1
LABELV $181
byte 1 112
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 95
byte 1 102
byte 1 105
byte 1 120
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $177
byte 1 103
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $174
byte 1 103
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $172
byte 1 109
byte 1 97
byte 1 112
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 46
byte 1 98
byte 1 115
byte 1 112
byte 1 0
align 1
LABELV $169
byte 1 109
byte 1 97
byte 1 112
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $168
byte 1 115
byte 1 118
byte 1 95
byte 1 109
byte 1 97
byte 1 120
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $166
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $164
byte 1 99
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $162
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $160
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $158
byte 1 100
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $155
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $154
byte 1 117
byte 1 105
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $153
byte 1 103
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 0
